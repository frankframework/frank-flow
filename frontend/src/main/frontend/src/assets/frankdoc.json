{
  "metadata": {
    "version": "9.1.0-20250107.042327"
  },
  "groups": [
    {
      "name": "Pipes",
      "types": [
        "org.frankframework.core.IPipe",
        "org.frankframework.core.IValidator",
        "org.frankframework.core.IWrapperPipe"
      ]
    },
    {
      "name": "Senders",
      "types": [
        "org.frankframework.core.ICorrelatedSender",
        "org.frankframework.core.ISender"
      ]
    },
    {
      "name": "Listeners",
      "types": [
        "org.frankframework.core.ICorrelatedPullingListener",
        "org.frankframework.core.IListener",
        "org.frankframework.core.IPostboxListener"
      ]
    },
    {
      "name": "TransactionalStorages",
      "types": ["org.frankframework.core.ITransactionalStorage"]
    },
    {
      "name": "ErrorMessageFormatters",
      "types": ["org.frankframework.core.IErrorMessageFormatter"]
    },
    {
      "name": "Batch",
      "types": [
        "org.frankframework.batch.IReaderFactory",
        "org.frankframework.batch.IRecordHandler",
        "org.frankframework.batch.IRecordHandlerManager",
        "org.frankframework.batch.IResultHandler",
        "org.frankframework.batch.InputfieldsPart",
        "org.frankframework.batch.OutputfieldsPart",
        "org.frankframework.batch.RecordHandlingFlow"
      ]
    },
    {
      "name": "Monitoring",
      "types": [
        "org.frankframework.monitoring.AdapterFilter",
        "org.frankframework.monitoring.IMonitorDestination",
        "org.frankframework.monitoring.ITrigger",
        "org.frankframework.monitoring.Monitor",
        "org.frankframework.monitoring.MonitorManager"
      ]
    },
    {
      "name": "Scheduling",
      "types": ["org.frankframework.scheduler.job.IJob"]
    },
    {
      "name": "Parameters",
      "types": ["org.frankframework.parameters.IParameter"]
    },
    {
      "name": "Other",
      "types": [
        "org.frankframework.core.Adapter",
        "org.frankframework.util.DirectoryCleaner",
        "org.frankframework.http.HttpSession",
        "org.frankframework.cache.ICache",
        "org.frankframework.configuration.extensions.ISapSystem",
        "org.frankframework.configuration.Include",
        "org.frankframework.jms.JmsRealm",
        "org.frankframework.jms.JmsRealmFactory",
        "org.frankframework.util.Locker",
        "org.frankframework.core.PipeForward",
        "org.frankframework.core.PipeForwards",
        "org.frankframework.core.PipeLine",
        "org.frankframework.core.PipeLineExit",
        "org.frankframework.core.PipeLineExits",
        "org.frankframework.receivers.Receiver",
        "org.frankframework.configuration.extensions.SapSystems",
        "org.frankframework.configuration.ScheduleManager",
        "org.frankframework.core.SharedResource",
        "org.frankframework.configuration.SharedResources",
        "org.frankframework.configuration.Configuration",
        "Module"
      ]
    }
  ],
  "types": [
    {
      "name": "org.frankframework.core.Adapter",
      "members": ["org.frankframework.core.Adapter"]
    },
    {
      "name": "org.frankframework.monitoring.AdapterFilter",
      "members": ["org.frankframework.monitoring.AdapterFilter"]
    },
    {
      "name": "org.frankframework.util.DirectoryCleaner",
      "members": ["org.frankframework.util.DirectoryCleaner"]
    },
    {
      "name": "org.frankframework.http.HttpSession",
      "members": ["org.frankframework.http.HttpSession"]
    },
    {
      "name": "org.frankframework.cache.ICache",
      "members": ["org.frankframework.cache.EhCache"]
    },
    {
      "name": "org.frankframework.core.ICorrelatedPullingListener",
      "members": ["org.frankframework.jms.PullingJmsListener"]
    },
    {
      "name": "org.frankframework.core.ICorrelatedSender",
      "members": [
        "org.frankframework.extensions.bis.BisJmsSender",
        "org.frankframework.extensions.esb.EsbJmsSender",
        "org.frankframework.extensions.ibm.IMSSender",
        "org.frankframework.jms.JmsSender",
        "org.frankframework.extensions.ibm.MQSender"
      ]
    },
    {
      "name": "org.frankframework.core.IErrorMessageFormatter",
      "members": [
        "org.frankframework.errormessageformatters.ErrorMessageFormatter",
        "org.frankframework.errormessageformatters.FixedErrorMessage",
        "org.frankframework.errormessageformatters.FixedErrorMessageFormatter",
        "org.frankframework.errormessageformatters.SoapErrorMessage",
        "org.frankframework.errormessageformatters.SoapErrorMessageFormatter",
        "org.frankframework.errormessageformatters.XslErrorMessageFormatter",
        "org.frankframework.errormessageformatters.Y01ErrorMessageFormatter"
      ]
    },
    {
      "name": "org.frankframework.scheduler.job.IJob",
      "members": [
        "org.frankframework.scheduler.job.ActionJob",
        "org.frankframework.scheduler.job.CheckReloadJob",
        "org.frankframework.scheduler.job.CleanupDatabaseJob",
        "org.frankframework.scheduler.job.CleanupFileSystemJob",
        "org.frankframework.scheduler.job.ExecuteQueryJob",
        "org.frankframework.scheduler.job.IbisActionJob",
        "org.frankframework.scheduler.job.Job",
        "org.frankframework.scheduler.job.LoadDatabaseSchedulesJob",
        "org.frankframework.scheduler.job.RecoverAdaptersJob",
        "org.frankframework.scheduler.job.SendMessageJob"
      ]
    },
    {
      "name": "org.frankframework.core.IListener",
      "members": [
        "org.frankframework.http.rest.ApiListener",
        "org.frankframework.extensions.bis.BisJmsListener",
        "org.frankframework.extensions.cmis.CmisEventListener",
        "org.frankframework.receivers.DirectoryListener",
        "org.frankframework.extensions.esb.EsbJmsListener",
        "org.frankframework.receivers.ExchangeMailListener",
        "org.frankframework.receivers.FrankListener",
        "org.frankframework.receivers.FtpFileSystemListener",
        "org.frankframework.extensions.fxf.FxfListener",
        "org.frankframework.http.HttpListener",
        "org.frankframework.receivers.ImapListener",
        "org.frankframework.receivers.JavaListener",
        "org.frankframework.jdbc.JdbcListener",
        "org.frankframework.jdbc.JdbcQueryListener",
        "org.frankframework.jdbc.JdbcTableListener",
        "org.frankframework.jms.JmsListener",
        "org.frankframework.extensions.kafka.KafkaListener",
        "org.frankframework.jdbc.MessageStoreListener",
        "org.frankframework.extensions.mqtt.MqttListener",
        "org.frankframework.jms.PullingJmsListener",
        "org.frankframework.jms.PushingJmsListener",
        "org.frankframework.http.PushingListenerAdapter",
        "org.frankframework.http.RestListener",
        "org.frankframework.receivers.Samba2Listener",
        "org.frankframework.receivers.SambaListener",
        "org.frankframework.extensions.sap.SapListener",
        "org.frankframework.receivers.SftpFileSystemListener",
        "org.frankframework.jdbc.SimpleJdbcListener",
        "org.frankframework.extensions.tibco.TibcoLogJmsListener",
        "org.frankframework.http.WebServiceListener"
      ]
    },
    {
      "name": "org.frankframework.monitoring.IMonitorDestination",
      "members": [
        "org.frankframework.monitoring.MonitorDestination",
        "org.frankframework.monitoring.SenderMonitorAdapter"
      ]
    },
    {
      "name": "org.frankframework.parameters.IParameter",
      "members": [
        "org.frankframework.parameters.BooleanParameter",
        "org.frankframework.parameters.DateParameter",
        "org.frankframework.parameters.NumberParameter",
        "org.frankframework.parameters.Parameter",
        "org.frankframework.parameters.XmlParameter"
      ]
    },
    {
      "name": "org.frankframework.core.IPipe",
      "members": [
        "org.frankframework.extensions.rekenbox.Adios2XmlPipe",
        "org.frankframework.extensions.aspose.pipe.AmountOfPagesPipe",
        "org.frankframework.http.rest.ApiPrincipalPipe",
        "org.frankframework.extensions.api.ApiSoapWrapperPipe",
        "org.frankframework.extensions.api.ApiStreamPipe",
        "org.frankframework.extensions.api.ApiWsdlXmlValidator",
        "org.frankframework.pipes.AsyncSenderWithListenerPipe",
        "org.frankframework.pipes.Base64Pipe",
        "org.frankframework.jdbc.BatchBlobTransformerPipe",
        "org.frankframework.jdbc.BatchClobTransformerPipe",
        "org.frankframework.batch.BatchFileTransformerPipe",
        "org.frankframework.extensions.bis.BisWrapperPipe",
        "org.frankframework.jdbc.BlobLineIteratingPipe",
        "org.frankframework.pipes.BytesOutputPipe",
        "org.frankframework.pipes.ChecksumPipe",
        "org.frankframework.jdbc.ClobLineIteratingPipe",
        "org.frankframework.pipes.CompareIntegerPipe",
        "org.frankframework.pipes.CompareStringPipe",
        "org.frankframework.pipes.CompressPipe",
        "org.frankframework.pipes.CounterSwitchPipe",
        "org.frankframework.pipes.CredentialCheckingPipe",
        "org.frankframework.pipes.CrlPipe",
        "org.frankframework.pipes.CsvParserPipe",
        "org.frankframework.pipes.DataSonnetPipe",
        "org.frankframework.pipes.DelayPipe",
        "org.frankframework.extensions.esb.DirectWrapperPipe",
        "org.frankframework.pipes.DomainTransformerPipe",
        "org.frankframework.pipes.EchoPipe",
        "org.frankframework.extensions.esb.EsbSoapValidator",
        "org.frankframework.extensions.esb.EsbSoapWrapperPipe",
        "org.frankframework.pipes.EscapePipe",
        "org.frankframework.pipes.EtagHandlerPipe",
        "org.frankframework.pipes.ExceptionPipe",
        "org.frankframework.pipes.FileLineIteratorPipe",
        "org.frankframework.pipes.FilePipe",
        "org.frankframework.pipes.FilenameSwitch",
        "org.frankframework.pipes.FixedResultPipe",
        "org.frankframework.filesystem.ForEachAttachmentPipe",
        "org.frankframework.pipes.ForEachChildElementPipe",
        "org.frankframework.pipes.ForPipe",
        "org.frankframework.extensions.fxf.FxfWrapperPipe",
        "org.frankframework.extensions.fxf.FxfXmlValidator",
        "org.frankframework.pipes.GetFromSession",
        "org.frankframework.pipes.GetPrincipalPipe",
        "org.frankframework.extensions.tibco.GetTibcoQueues",
        "org.frankframework.pipes.HashPipe",
        "org.frankframework.pipes.IfPipe",
        "org.frankframework.pipes.IncreaseIntegerPipe",
        "org.frankframework.pipes.IsUserInRolePipe",
        "org.frankframework.pipes.IsXmlPipe",
        "org.frankframework.pipes.Json2XmlValidator",
        "org.frankframework.pipes.JsonPipe",
        "org.frankframework.pipes.JsonValidator",
        "org.frankframework.pipes.JsonWellFormedChecker",
        "org.frankframework.pipes.JsonXsltPipe",
        "org.frankframework.pipes.JwtPipe",
        "org.frankframework.extensions.rekenbox.LabelFormat",
        "org.frankframework.ladybug.LadybugPipe",
        "org.frankframework.pipes.LarvaPipe",
        "org.frankframework.ldap.LdapChallengePipe",
        "org.frankframework.ldap.LdapFindGroupMembershipsPipe",
        "org.frankframework.ldap.LdapFindMemberPipe",
        "org.frankframework.pipes.LocalFileSystemPipe",
        "org.frankframework.pipes.LogContextPipe",
        "org.frankframework.pipes.MailSenderPipe",
        "org.frankframework.extensions.tibco.pipes.ObfuscatePipe",
        "org.frankframework.pipes.PGPPipe",
        "org.frankframework.pipes.PasswordGeneratorPipe",
        "org.frankframework.pipes.PasswordHashPipe",
        "org.frankframework.extensions.aspose.pipe.PdfPipe",
        "org.frankframework.pipes.PostboxRetrieverPipe",
        "org.frankframework.pipes.PutInSession",
        "org.frankframework.pipes.PutParametersInSession",
        "org.frankframework.pipes.PutSystemDateInSession",
        "org.frankframework.pipes.RegExPipe",
        "org.frankframework.extensions.rekenbox.RekenBoxCaller",
        "org.frankframework.cache.RemoveCacheKeyPipe",
        "org.frankframework.pipes.RemoveFromSession",
        "org.frankframework.pipes.ReplacerPipe",
        "org.frankframework.jdbc.ResultSetIteratingPipe",
        "org.frankframework.pipes.Samba1Pipe",
        "org.frankframework.pipes.Samba2Pipe",
        "org.frankframework.pipes.SambaPipe",
        "org.frankframework.extensions.sap.jco3.SapLUWManager",
        "org.frankframework.extensions.svn.ScanTibcoSolutionPipe",
        "org.frankframework.extensions.tibco.SendTibcoMessage",
        "org.frankframework.pipes.SenderPipe",
        "org.frankframework.pipes.SignaturePipe",
        "org.frankframework.pipes.SizePipe",
        "org.frankframework.pipes.SkipPipe",
        "org.frankframework.soap.SoapValidator",
        "org.frankframework.soap.SoapWrapperPipe",
        "org.frankframework.pipes.Stream2StringPipe",
        "org.frankframework.pipes.StreamLineIteratorPipe",
        "org.frankframework.pipes.StreamPipe",
        "org.frankframework.batch.StreamTransformerPipe",
        "org.frankframework.pipes.Text2XmlPipe",
        "org.frankframework.pipes.TextSplitterPipe",
        "org.frankframework.pipes.UUIDGeneratorPipe",
        "org.frankframework.pipes.UnzipPipe",
        "org.frankframework.pipes.WsdlGeneratorPipe",
        "org.frankframework.pipes.WsdlXmlValidator",
        "org.frankframework.pipes.XQueryPipe",
        "org.frankframework.pipes.XmlBuilderPipe",
        "org.frankframework.pipes.XmlFileElementIteratorPipe",
        "org.frankframework.pipes.XmlIf",
        "org.frankframework.pipes.XmlSwitch",
        "org.frankframework.pipes.XmlValidator",
        "org.frankframework.pipes.XmlWellFormedChecker",
        "org.frankframework.pipes.XsltPipe",
        "org.frankframework.compression.ZipIteratorPipe",
        "org.frankframework.compression.ZipWriterPipe"
      ]
    },
    {
      "name": "org.frankframework.core.IPostboxListener",
      "members": ["org.frankframework.jms.PullingJmsListener"]
    },
    {
      "name": "org.frankframework.batch.IReaderFactory",
      "members": [
        "org.frankframework.batch.DelphiStringRecordReaderFactory",
        "org.frankframework.batch.InputStreamReaderFactory"
      ]
    },
    {
      "name": "org.frankframework.batch.IRecordHandler",
      "members": [
        "org.frankframework.batch.RecordTransformer",
        "org.frankframework.batch.RecordXml2Sender",
        "org.frankframework.batch.RecordXmlTransformer"
      ]
    },
    {
      "name": "org.frankframework.batch.IRecordHandlerManager",
      "members": [
        "org.frankframework.batch.FieldPositionRecordHandlerManager",
        "org.frankframework.batch.FixedPositionRecordHandlerManager",
        "org.frankframework.batch.RecordHandlerManager"
      ]
    },
    {
      "name": "org.frankframework.batch.IResultHandler",
      "members": [
        "org.frankframework.jdbc.Result2BlobWriter",
        "org.frankframework.jdbc.Result2ClobWriter",
        "org.frankframework.batch.Result2Filewriter",
        "org.frankframework.batch.Result2StringWriter",
        "org.frankframework.batch.ResultBlock2Sender"
      ]
    },
    {
      "name": "org.frankframework.configuration.extensions.ISapSystem",
      "members": ["org.frankframework.extensions.sap.SapSystem"]
    },
    {
      "name": "org.frankframework.core.ISender",
      "members": [
        "org.frankframework.extensions.afm.Afm2EdiFactSender",
        "org.frankframework.senders.AmazonS3Sender",
        "org.frankframework.extensions.bis.BisJmsSender",
        "org.frankframework.extensions.cmis.CmisSender",
        "org.frankframework.senders.CommandSender",
        "org.frankframework.senders.DelaySender",
        "org.frankframework.jdbc.DirectQuerySender",
        "org.frankframework.senders.EchoSender",
        "org.frankframework.extensions.esb.EsbJmsSender",
        "org.frankframework.senders.ExchangeFileSystemSender",
        "org.frankframework.senders.ExchangeFolderSender",
        "org.frankframework.senders.FileSender",
        "org.frankframework.filesystem.FileSystemSenderWithAttachments",
        "org.frankframework.jdbc.FixedQuerySender",
        "org.frankframework.senders.FixedResultSender",
        "org.frankframework.senders.FrankSender",
        "org.frankframework.senders.FtpFileSystemSender",
        "org.frankframework.http.HttpSender",
        "org.frankframework.extensions.ibm.IMSSender",
        "org.frankframework.senders.IbisJavaSender",
        "org.frankframework.senders.IbisLocalSender",
        "org.frankframework.extensions.idin.IdinSender",
        "org.frankframework.extensions.sap.IdocSender",
        "org.frankframework.senders.ImapSender",
        "org.frankframework.senders.JavascriptSender",
        "org.frankframework.jms.JmsSender",
        "org.frankframework.senders.JsonXsltSender",
        "org.frankframework.extensions.kafka.KafkaSender",
        "org.frankframework.ldap.LdapSender",
        "org.frankframework.senders.LocalFileSystemSender",
        "org.frankframework.senders.LogSender",
        "org.frankframework.extensions.ibm.MQSender",
        "org.frankframework.senders.MailSender",
        "org.frankframework.jdbc.MessageStoreSender",
        "org.frankframework.mongodb.MongoDbSender",
        "org.frankframework.extensions.mqtt.MqttSender",
        "org.frankframework.http.MultipartHttpSender",
        "org.frankframework.extensions.akamai.NetStorageSender",
        "org.frankframework.senders.ParallelSenders",
        "org.frankframework.senders.ReconnectSenderWrapper",
        "org.frankframework.senders.ReloadSender",
        "org.frankframework.http.RestSender",
        "org.frankframework.jdbc.ResultSet2FileSender",
        "org.frankframework.senders.Samba1Sender",
        "org.frankframework.senders.Samba2Sender",
        "org.frankframework.extensions.sap.SapSender",
        "org.frankframework.scheduler.SchedulerSender",
        "org.frankframework.senders.SendGridSender",
        "org.frankframework.senders.SenderSeries",
        "org.frankframework.senders.SenderWrapper",
        "org.frankframework.senders.SftpFileSystemSender",
        "org.frankframework.senders.ShadowSender",
        "org.frankframework.jdbc.StoredProcedureQuerySender",
        "org.frankframework.http.WebServiceNtlmSender",
        "org.frankframework.http.WebServiceSender",
        "org.frankframework.xcom.XComSender",
        "org.frankframework.extensions.xfb.XfbSender",
        "org.frankframework.jms.XmlJmsBrowserSender",
        "org.frankframework.jdbc.XmlQuerySender",
        "org.frankframework.senders.XmlValidatorSender",
        "org.frankframework.senders.XsltSender",
        "org.frankframework.compression.ZipWriterSender"
      ]
    },
    {
      "name": "org.frankframework.core.ITransactionalStorage",
      "members": [
        "org.frankframework.jdbc.DummyTransactionalStorage",
        "org.frankframework.extensions.esb.EsbJmsTransactionalStorage",
        "org.frankframework.jdbc.JdbcTransactionalStorage",
        "org.frankframework.jms.JmsTransactionalStorage"
      ]
    },
    {
      "name": "org.frankframework.monitoring.ITrigger",
      "members": [
        "org.frankframework.monitoring.Alarm",
        "org.frankframework.monitoring.Clearing",
        "org.frankframework.monitoring.Trigger"
      ]
    },
    {
      "name": "org.frankframework.core.IValidator",
      "members": [
        "org.frankframework.extensions.api.ApiWsdlXmlValidator",
        "org.frankframework.extensions.esb.EsbSoapValidator",
        "org.frankframework.extensions.fxf.FxfXmlValidator",
        "org.frankframework.pipes.Json2XmlValidator",
        "org.frankframework.pipes.JsonValidator",
        "org.frankframework.soap.SoapValidator",
        "org.frankframework.pipes.WsdlXmlValidator",
        "org.frankframework.pipes.XmlValidator",
        "org.frankframework.pipes.XmlWellFormedChecker"
      ]
    },
    {
      "name": "org.frankframework.core.IWrapperPipe",
      "members": [
        "org.frankframework.extensions.api.ApiSoapWrapperPipe",
        "org.frankframework.extensions.bis.BisWrapperPipe",
        "org.frankframework.extensions.esb.EsbSoapWrapperPipe",
        "org.frankframework.extensions.fxf.FxfWrapperPipe",
        "org.frankframework.soap.SoapWrapperPipe"
      ]
    },
    {
      "name": "org.frankframework.configuration.Include",
      "members": ["org.frankframework.configuration.Include"]
    },
    {
      "name": "org.frankframework.batch.InputfieldsPart",
      "members": ["org.frankframework.batch.InputfieldsPart"]
    },
    {
      "name": "org.frankframework.jms.JmsRealm",
      "members": ["org.frankframework.jms.JmsRealm"]
    },
    {
      "name": "org.frankframework.jms.JmsRealmFactory",
      "members": ["org.frankframework.jms.JmsRealmFactory"]
    },
    {
      "name": "org.frankframework.util.Locker",
      "members": ["org.frankframework.util.Locker"]
    },
    {
      "name": "org.frankframework.monitoring.Monitor",
      "members": ["org.frankframework.monitoring.Monitor"]
    },
    {
      "name": "org.frankframework.monitoring.MonitorManager",
      "members": ["org.frankframework.monitoring.MonitorManager"]
    },
    {
      "name": "org.frankframework.batch.OutputfieldsPart",
      "members": ["org.frankframework.batch.OutputfieldsPart"]
    },
    {
      "name": "org.frankframework.core.PipeForward",
      "members": ["org.frankframework.core.PipeForward"]
    },
    {
      "name": "org.frankframework.core.PipeForwards",
      "members": ["org.frankframework.core.PipeForwards"]
    },
    {
      "name": "org.frankframework.core.PipeLine",
      "members": ["org.frankframework.core.PipeLine"]
    },
    {
      "name": "org.frankframework.core.PipeLineExit",
      "members": ["org.frankframework.core.PipeLineExit"]
    },
    {
      "name": "org.frankframework.core.PipeLineExits",
      "members": ["org.frankframework.core.PipeLineExits"]
    },
    {
      "name": "org.frankframework.receivers.Receiver",
      "members": ["org.frankframework.receivers.Receiver"]
    },
    {
      "name": "org.frankframework.batch.RecordHandlingFlow",
      "members": ["org.frankframework.batch.RecordHandlingFlow"]
    },
    {
      "name": "org.frankframework.configuration.extensions.SapSystems",
      "members": ["org.frankframework.configuration.extensions.SapSystems"]
    },
    {
      "name": "org.frankframework.configuration.ScheduleManager",
      "members": ["org.frankframework.configuration.ScheduleManager"]
    },
    {
      "name": "org.frankframework.core.SharedResource",
      "members": ["org.frankframework.http.HttpSession"]
    },
    {
      "name": "org.frankframework.configuration.SharedResources",
      "members": ["org.frankframework.configuration.SharedResources"]
    },
    {
      "name": "org.frankframework.configuration.Configuration",
      "members": ["org.frankframework.configuration.Configuration"]
    },
    {
      "name": "Module",
      "members": ["Module"]
    }
  ],
  "elements": [
    {
      "name": "AbstractCacheAdapter",
      "fullName": "org.frankframework.cache.AbstractCacheAdapter",
      "abstract": true,
      "description": "Baseclass for caching.\n Provides key transformation functionality.",
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "description": "name of the cache, will be lowercased",
          "default": "<code>&lt;ownerName&gt;</code>_cache"
        },
        {
          "name": "keyXPath",
          "description": "xpath expression to extract cache key from request message"
        },
        {
          "name": "keyXPathOutputType",
          "description": "output type of xpath expression to extract cache key from request message",
          "default": "text",
          "enum": "org.frankframework.util.TransformerPool.OutputType"
        },
        {
          "name": "keyNamespaceDefs",
          "description": "namespace defintions for keyxpath. must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code> definitions"
        },
        {
          "name": "keyStyleSheet",
          "description": "stylesheet to extract cache key from request message. Use in combination with {@link #setCacheEmptyKeys(boolean) cacheEmptyKeys} to inhibit caching for certain groups of request messages"
        },
        {
          "name": "keyInputSessionKey",
          "description": "session key to use as input for transformation of request message to key by keyxpath or keystylesheet"
        },
        {
          "name": "cacheEmptyKeys",
          "description": "controls whether empty keys are used for caching. when set true, cache entries with empty keys can exist.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "valueXPath",
          "description": "xpath expression to extract value to be cached key from response message. Use in combination with {@link #setCacheEmptyValues(boolean) cacheEmptyValues} to inhibit caching for certain groups of response messages"
        },
        {
          "name": "valueXPathOutputType",
          "enum": "org.frankframework.util.TransformerPool.OutputType"
        },
        {
          "name": "valueNamespaceDefs",
          "description": "namespace defintions for valuexpath. must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code> definitions"
        },
        {
          "name": "valueStyleSheet",
          "description": "stylesheet to extract value to be cached from response message"
        },
        {
          "name": "valueInputSessionKey",
          "description": "session key to use as input for transformation of response message to cached value by valuexpath or valuestylesheet"
        },
        {
          "name": "cacheEmptyValues",
          "description": "controls whether empty values will be cached. when set true, empty cache entries can exist for any key.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "AbstractCollectorPipe",
      "fullName": "org.frankframework.collection.AbstractCollectorPipe",
      "abstract": true,
      "description": "Base class for pipes that can collect items, such as multipart messages and zip archives.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "action",
          "description": "Collectors must be opened before you can write content to them, after it's closed you can no longer write to it.",
          "default": "WRITE",
          "enum": "org.frankframework.collection.AbstractCollectorPipe.Action"
        },
        {
          "name": "collectionName",
          "description": "Session key used to refer to collection. Must be specified with another value if multiple CollectorPipes are active at the same time in the same session",
          "default": "collection"
        }
      ]
    },
    {
      "name": "AbstractCollectorSender",
      "fullName": "org.frankframework.collection.AbstractCollectorSender",
      "abstract": true,
      "description": "Sender that writes an item to a collection, created by {@link AbstractCollectorPipe} with <code>action=OPEN</code>.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": [],
      "attributes": [
        {
          "name": "collectionName",
          "description": "Session key used to refer to collection. Must be specified with another value if multiple CollectorPipes are active at the same time in the same session",
          "default": "collection"
        }
      ],
      "parametersDescription": "all parameters are handled by the collection."
    },
    {
      "name": "AbstractConfigurableLifecyle",
      "fullName": "org.frankframework.lifecycle.AbstractConfigurableLifecyle",
      "abstract": true,
      "description": "Base class which looks at the {@link RunState} of the component before changing it's {@link ConfigurableLifecycle Lifecycle} state.\n <br/>\n Calling configure() should set the state to STARTING.\n Calling start() should set the state to STARTED.",
      "elementNames": [],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "AbstractFileSystemListener",
      "fullName": "org.frankframework.filesystem.AbstractFileSystemListener",
      "abstract": true,
      "description": "{@link IPullingListener listener} that looks in a {@link IBasicFileSystem FileSystem} for files.\n When a file is found, it is moved to an in-process folder, so that it isn't found more than once.\n <br/>\n The information specified by {@link #setMessageType(IMessageType)} is then passed to the pipeline.",
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "description": "Name of the listener"
        },
        {
          "name": "inputFolder",
          "description": "Folder that is scanned for files. If not set, the root is scanned"
        },
        {
          "name": "inProcessFolder",
          "description": "Folder where files are stored <i>while</i> being processed"
        },
        {
          "name": "processedFolder",
          "description": "Folder where files are stored <i>after</i> being processed"
        },
        {
          "name": "errorFolder",
          "description": "Folder where files are stored <i>after</i> being processed, in case the exit-state was not equal to <code>success</code>"
        },
        {
          "name": "holdFolder",
          "description": "Folder where messages from the error folder can be put on Hold, temporarily"
        },
        {
          "name": "logFolder",
          "description": "Folder where a copy of every file that is received is stored"
        },
        {
          "name": "createFolders",
          "description": "If set to <code>true</code>, the folders to look for files and to move files to when being processed and after being processed are created if they are specified and do not exist",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "delete",
          "description": "If set <code>true</code>, the file processed will be deleted after being processed, and not stored",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "numberOfBackups",
          "description": "Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept.",
          "default": "0",
          "type": "int"
        },
        {
          "name": "overwrite",
          "description": "If set <code>true</code>, the destination file will be deleted if it already exists",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "fileTimeSensitive",
          "description": "If <code>true</code>, the file modification time is used in addition to the filename to determine if a file has been seen previously.\n <br/>\n This setting is only supported for filesystem listeners that implement {@link IWritableFileSystem}.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "minStableTime",
          "description": "Minimal age of file <i>in milliseconds</i>, to avoid receiving a file while it is still being written",
          "default": "1000",
          "type": "int"
        },
        {
          "name": "messageIdPropertyKey",
          "description": "Key of Property to use as messageId. If not set, the filename of the file as it was received in the inputFolder is used as the messageId",
          "default": "for MailFileSystems: Message-ID"
        },
        {
          "name": "disableMessageBrowsers",
          "description": "If set <code>true</code>, no browsers for process folders are generated",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "wildcard",
          "description": "Filter of files to look for in inputFolder e.g. '*.inp'."
        },
        {
          "name": "excludeWildcard",
          "description": "Filter of files to be excluded when looking in inputFolder."
        },
        {
          "name": "storeMetadataInSessionKey",
          "deprecated": {
            "forRemoval": false,
            "since": "9.0"
          },
          "description": "If set, an XML with all message properties is provided under this key.\n Also stored in the <code>originalMessage</code> metadata."
        },
        {
          "name": "charset",
          "description": "Charset to be used for extracting the contents"
        },
        {
          "name": "outputFormat",
          "description": "OutputFormat of message for messageType=info",
          "default": "XML",
          "enum": "org.frankframework.documentbuilder.DocumentFormat"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "To avoid problems with duplicate filenames in folders like the <code>errorFolder</code> or <code>processedFolder</code>,\n you should configure either <code>overwrite=&quot;true&quot;</code>, configure <code>numberOfBackups</code> to a value larger than 0, or\n configure an <code>inProcessFolder</code> and <code>fileTimeSensitive=&quot;true&quot;</code>.\n These options can be used together as well."
        },
        {
          "type": "WARNING",
          "value": "In addition to the above, prior to release 9.0 it was not sufficient to configure <code>inProcessFolder</code> and <code>fileTimeSensitive</code>\n to avoid potential duplicate filename errors. Prior to release 9.0, it is recommended to configure <code>numberOfBackups</code> to avoid these issues."
        }
      ]
    },
    {
      "name": "AbstractFileSystemPipe",
      "fullName": "org.frankframework.filesystem.AbstractFileSystemPipe",
      "abstract": true,
      "description": "Base class for Pipes that use a {@link IBasicFileSystem FileSystem}.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "action",
          "description": "If parameter [<code>action</code>] is set, then the attribute action value will be overridden with the value of the parameter.",
          "enum": "org.frankframework.filesystem.FileSystemActor.FileSystemAction"
        },
        {
          "name": "filename",
          "description": "Filename to operate on. If not set, the parameter <code>filename</code> is used. If that is not set either, the input is used"
        },
        {
          "name": "destination",
          "description": "Destination for <code>move</code>, <code>copy</code> or <code>rename</code>. If not set, the parameter <code>destination</code> is used. If that is not set either, the input is used"
        },
        {
          "name": "inputFolder",
          "description": "Folder that is scanned for files when action=<code>list</code>. When not set, the root is scanned"
        },
        {
          "name": "createFolder",
          "description": "If <code>true</code>: if a non-existing folder is part of the fileName, it will be created.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "overwrite",
          "description": "If set <code>true</code>, for actions <code>create</code>, <code>write</code>, <code>move</code>, <code>copy</code> or <code>rename</code>, the destination file is overwritten if it already exists",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "rotateDays",
          "description": "For action=<code>append</code>: If set to a positive number, the file is rotated each day, and this number of files is kept. The inputFolder must point to the directory where the file resides",
          "default": "0",
          "type": "int"
        },
        {
          "name": "rotateSize",
          "description": "For action=<code>append</code>: If set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept. Size is specified in plain bytes, suffixes like 'K', 'M' or 'G' are not recognized. The inputFolder must point to the directory where the file resides",
          "default": "0",
          "type": "int"
        },
        {
          "name": "numberOfBackups",
          "description": "For the actions <code>write</code> and <code>append</code>, with rotateSize>0: the number of backup files that is kept. The inputFolder must point to the directory where the file resides",
          "default": "0",
          "type": "int"
        },
        {
          "name": "wildcard",
          "description": "Filter of files to look for in inputFolder e.g. '*.inp'. Works with actions <code>move</code>, <code>copy</code>, <code>delete</code> and <code>list</code>"
        },
        {
          "name": "excludeWildcard",
          "description": "Filter of files to be excluded when looking in inputFolder. Works with actions <code>move</code>, <code>copy</code>, <code>delete</code> and <code>list</code>"
        },
        {
          "name": "removeNonEmptyFolder",
          "description": "If set to <code>true</code> then the folder and the content of the non empty folder will be deleted.",
          "type": "bool"
        },
        {
          "name": "writeLineSeparator",
          "description": "If set to <code>true</code> then the system specific line separator will be appended to the file after executing the action. Works with actions <code>write</code> and <code>append</code>",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "charset",
          "description": "Charset to be used for <code>read</code> and <code>write</code> action"
        },
        {
          "name": "deleteEmptyFolder",
          "description": "If set to true then the folder will be deleted if it is empty after processing the action. Works with actions <code>delete</code>, <code>readDelete</code> and <code>move</code>",
          "type": "bool"
        },
        {
          "name": "outputFormat",
          "description": "Sets the outputFormat. This ignored when reading a file. Is applicable to actions which return information about file(s). Relevant for:\n 'info', 'list', 'append', 'move', 'delete' and 'copy' actions.",
          "default": "XML",
          "enum": "org.frankframework.documentbuilder.DocumentFormat"
        },
        {
          "name": "typeFilter",
          "description": "Filter for action <code>list</code>. Specify <code>FILES_ONLY</code>, <code>FOLDERS_ONLY</code> or <code>FILES_AND_FOLDERS</code>.",
          "default": "FILES_ONLY",
          "enum": "org.frankframework.filesystem.TypeFilter"
        }
      ],
      "parameters": [
        {
          "name": "action",
          "description": "Overrides attribute <code>action</code>."
        },
        {
          "name": "filename",
          "description": "Overrides attribute <code>filename</code>. If not present, the input message is used."
        },
        {
          "name": "destination",
          "description": "Destination for action <code>rename</code> and <code>move</code>. Overrides attribute <code>destination</code>."
        },
        {
          "name": "contents",
          "description": "Content for action <code>write</code> and <code>append</code>."
        },
        {
          "name": "inputFolder",
          "description": "Folder for actions <code>list</code>, <code>mkdir</code> and <code>rmdir</code>. This is a sub folder of baseFolder. Overrides attribute <code>inputFolder</code>. If not present, the input message is used."
        },
        {
          "name": "typeFilter",
          "description": "Filter for action <code>list</code>. Specify <code>FILES_ONLY</code>, <code>FOLDERS_ONLY</code> or <code>FILES_AND_FOLDERS</code>. By default, only files are listed."
        }
      ],
      "forwards": [
        {
          "name": "fileNotFound",
          "description": "the input file was expected to exist, but was not found"
        },
        {
          "name": "folderNotFound",
          "description": "the folder does not exist"
        },
        {
          "name": "fileAlreadyExists",
          "description": "a file that should have been created as new already exists, or if a file already exists when it should have been created as folder"
        },
        {
          "name": "folderAlreadyExists",
          "description": "a folder is to be created that already exists."
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Endpoint"
        }
      ]
    },
    {
      "name": "AbstractFileSystemSender",
      "fullName": "org.frankframework.filesystem.AbstractFileSystemSender",
      "abstract": true,
      "description": "Base class for Senders that use a {@link IBasicFileSystem FileSystem}.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": [],
      "attributes": [
        {
          "name": "action",
          "description": "If parameter [<code>action</code>] is set, then the attribute action value will be overridden with the value of the parameter.",
          "enum": "org.frankframework.filesystem.FileSystemActor.FileSystemAction"
        },
        {
          "name": "filename",
          "description": "Filename to operate on. If not set, the parameter <code>filename</code> is used. If that is not set either, the input is used"
        },
        {
          "name": "destination",
          "description": "Destination for <code>move</code>, <code>copy</code> or <code>rename</code>. If not set, the parameter <code>destination</code> is used. If that is not set either, the input is used"
        },
        {
          "name": "inputFolder",
          "description": "Folder that is scanned for files when action=<code>list</code>. When not set, the root is scanned"
        },
        {
          "name": "createFolder",
          "description": "If <code>true</code>: if a non-existing folder is part of the fileName, it will be created.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "overwrite",
          "description": "If set <code>true</code>, for actions <code>create</code>, <code>write</code>, <code>move</code>, <code>copy</code> or <code>rename</code>, the destination file is overwritten if it already exists",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "rotateDays",
          "description": "For action=<code>append</code>: If set to a positive number, the file is rotated each day, and this number of files is kept. The inputFolder must point to the directory where the file resides",
          "default": "0",
          "type": "int"
        },
        {
          "name": "rotateSize",
          "description": "For action=<code>append</code>: If set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept. Size is specified in plain bytes, suffixes like 'K', 'M' or 'G' are not recognized. The inputFolder must point to the directory where the file resides",
          "default": "0",
          "type": "int"
        },
        {
          "name": "numberOfBackups",
          "description": "For the actions <code>write</code> and <code>append</code>, with rotateSize>0: the number of backup files that is kept. The inputFolder must point to the directory where the file resides",
          "default": "0",
          "type": "int"
        },
        {
          "name": "wildcard",
          "description": "Filter of files to look for in inputFolder e.g. '*.inp'. Works with actions <code>move</code>, <code>copy</code>, <code>delete</code> and <code>list</code>"
        },
        {
          "name": "excludeWildcard",
          "description": "Filter of files to be excluded when looking in inputFolder. Works with actions <code>move</code>, <code>copy</code>, <code>delete</code> and <code>list</code>"
        },
        {
          "name": "removeNonEmptyFolder",
          "description": "If set to <code>true</code> then the folder and the content of the non empty folder will be deleted.",
          "type": "bool"
        },
        {
          "name": "writeLineSeparator",
          "description": "If set to <code>true</code> then the system specific line separator will be appended to the file after executing the action. Works with actions <code>write</code> and <code>append</code>",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "charset",
          "description": "Charset to be used for <code>read</code> and <code>write</code> action"
        },
        {
          "name": "deleteEmptyFolder",
          "description": "If set to true then the folder will be deleted if it is empty after processing the action. Works with actions <code>delete</code>, <code>readDelete</code> and <code>move</code>",
          "type": "bool"
        },
        {
          "name": "outputFormat",
          "description": "Sets the outputFormat. This ignored when reading a file. Is applicable to actions which return information about file(s). Relevant for:\n 'info', 'list', 'append', 'move', 'delete' and 'copy' actions.",
          "default": "XML",
          "enum": "org.frankframework.documentbuilder.DocumentFormat"
        },
        {
          "name": "typeFilter",
          "description": "Filter for action <code>list</code>. Specify <code>FILES_ONLY</code>, <code>FOLDERS_ONLY</code> or <code>FILES_AND_FOLDERS</code>.",
          "default": "FILES_ONLY",
          "enum": "org.frankframework.filesystem.TypeFilter"
        }
      ],
      "parameters": [
        {
          "name": "action",
          "description": "Overrides attribute <code>action</code>."
        },
        {
          "name": "filename",
          "description": "Overrides attribute <code>filename</code>. If not present, the input message is used."
        },
        {
          "name": "destination",
          "description": "Destination for action <code>rename</code> and <code>move</code>. Overrides attribute <code>destination</code>."
        },
        {
          "name": "contents",
          "description": "Content for action <code>write</code> and <code>append</code>."
        },
        {
          "name": "inputFolder",
          "description": "Folder for actions <code>list</code>, <code>mkdir</code> and <code>rmdir</code>. This is a sub folder of baseFolder. Overrides attribute <code>inputFolder</code>. If not present, the input message is used."
        },
        {
          "name": "typeFilter",
          "description": "Filter for action <code>list</code>. Specify <code>FILES_ONLY</code>, <code>FOLDERS_ONLY</code> or <code>FILES_AND_FOLDERS</code>. By default, only files are listed."
        }
      ],
      "forwards": [
        {
          "name": "fileNotFound",
          "description": "if the input file was expected to exist, but was not found"
        },
        {
          "name": "folderNotFound",
          "description": "if the folder does not exist"
        },
        {
          "name": "fileAlreadyExists",
          "description": "if a file that should have been created as new already exists, or if a file already exists when it should have been created as folder"
        },
        {
          "name": "folderAlreadyExists",
          "description": "if a folder is to be created that already exists"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Endpoint"
        }
      ]
    },
    {
      "name": "AbstractHttpSender",
      "fullName": "org.frankframework.http.AbstractHttpSender",
      "abstract": true,
      "description": "Sender for the HTTP protocol using {@link HttpMethod HttpMethod}. By default, any response code outside the 2xx or 3xx range\n is considered an error and the <code>exception</code> forward of the SenderPipe is followed if present and if there\n is no forward for the specific HTTP status code. Forwards for specific HTTP codes (e.g. \\\"200\\\", \\\"201\\\", ...)\n are returned by this sender, so they are available to the SenderPipe.\n\n <p><b>Expected message format:</b></p>\n <p>GET methods expect a message looking like this:\n <pre>\n    param_name=param_value&another_param_name=another_param_value\n </pre>\n <p>POST AND PUT methods expect a message similar as GET, or looking like this:\n <pre>\n   param_name=param_value\n   another_param_name=another_param_value\n </pre>",
      "parent": "org.frankframework.http.AbstractHttpSession",
      "elementNames": [],
      "attributes": [
        {
          "name": "url",
          "description": "URL or base of URL to be used"
        },
        {
          "name": "urlParam",
          "description": "Parameter that is used to obtain URL; overrides url-attribute.",
          "default": "url"
        },
        {
          "name": "methodType",
          "description": "The HTTP Method used to execute the request",
          "default": "<code>GET</code>",
          "enum": "org.frankframework.http.AbstractHttpSender.HttpMethod"
        },
        {
          "name": "contentType",
          "description": "Content-Type (superset of mimetype + charset) of the request, for <code>POST</code>, <code>PUT</code> and <code>PATCH</code> methods",
          "default": "text/html, when postType=<code>RAW</code>"
        },
        {
          "name": "charSet",
          "description": "Charset of the request. Typically only used on <code>PUT</code> and <code>POST</code> requests.",
          "default": "UTF-8"
        },
        {
          "name": "certificate",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "Please use attribute keystore instead"
          }
        },
        {
          "name": "certificateType",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "has been replaced with keystoreType"
          },
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "certificateAuthAlias",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "Please use attribute keystoreAuthAlias instead"
          }
        },
        {
          "name": "certificatePassword",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "Please use attribute keystorePassword instead"
          }
        },
        {
          "name": "headersParams",
          "description": "Comma separated list of parameter names which should be set as HTTP headers"
        },
        {
          "name": "parametersToSkipWhenEmpty",
          "description": "Comma separated list of parameter names that should not be added as request or body parameter, or as HTTP header, if they are empty. Set to '*' for this behaviour for all parameters"
        },
        {
          "name": "xhtml",
          "description": "If <code>true</code>, the HTML response is transformed to XHTML",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "styleSheetName",
          "description": "(Only used when xHtml=<code>true</code>) stylesheet to apply to the HTML response"
        },
        {
          "name": "resultStatusCodeSessionKey",
          "description": "If set, the status code of the HTTP response is put in the specified sessionKey and the (error or okay) response message is returned.\n Setting this property has a side effect. If a 4xx or 5xx result code is returned and if the configuration does not implement\n the specific forward for the returned HTTP result code, then the success forward is followed instead of the exception forward."
        },
        {
          "name": "sharedResourceRef"
        },
        {
          "name": "name",
          "description": "The functional name of the object."
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ],
      "parametersDescription": "Any parameters present are appended to the request (when method is <code>GET</code> as request-parameters, when method <code>POST</code>\n as body part) except the <code>headersParams</code> list, which are added as HTTP headers, and the <code>urlParam</code> header",
      "forwards": [
        {
          "name": "*",
          "description": "statuscode of the HTTP response"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "When used as MTOM sender and MTOM receiver doesn't support Content-Transfer-Encoding \"base64\", messages without line feeds will give an error.\n This can be fixed by setting the Content-Transfer-Encoding in the MTOM sender."
        }
      ]
    },
    {
      "name": "AbstractHttpSession",
      "fullName": "org.frankframework.http.AbstractHttpSession",
      "abstract": true,
      "description": "<p>\n Note 1:\n Some certificates require the &lt;java_home&gt;/jre/lib/security/xxx_policy.jar files to be upgraded to unlimited strength. Typically, in such a case, an error message like\n <code>Error in loading the keystore: Private key decryption error: (java.lang.SecurityException: Unsupported keysize or algorithm parameters</code> is observed.\n For IBM JDKs these files can be downloaded from http://www.ibm.com/developerworks/java/jdk/security/50/ (scroll down to 'IBM SDK Policy files')\n </p>\n Replace in the directory java\\jre\\lib\\security the following files:\n <ul>\n <li>local_policy.jar</li>\n <li>US_export_policy.jar</li>\n </ul>\n <p>\n Note 2:\n To debug ssl-related problems, set the following system property:\n <ul>\n <li><code>-Djavax.net.debug=all</code></li>\n </ul>\n </p>\n <p>\n Note 3:\n In case <code>javax.net.ssl.SSLHandshakeException: unknown certificate</code> exceptions are thrown,\n probably the certificate of the other party is not trusted. Try to use one of the certificates in the path as your truststore by doing the following:\n <ul>\n   <li>open the URL you are trying to reach in InternetExplorer</li>\n   <li>click on the yellow padlock on the right in the bottom-bar. This opens the certificate information window</li>\n   <li>click on tab 'Certificeringspad'</li>\n   <li>double click on root certificate in the tree displayed. This opens the certificate information window for the root certificate</li>\n   <li>click on tab 'Details'</li>\n   <li>click on 'Kopieren naar bestand'</li>\n   <li>click 'next', choose 'DER Encoded Binary X.509 (.CER)'</li>\n   <li>click 'next', choose a filename</li>\n   <li>click 'next' and 'finish'</li>\n \t <li>Start IBM key management tool ikeyman.bat, located in Program Files/IBM/WebSphere Studio/Application Developer/v5.1.2/runtimes/base_v51/bin (or similar)</li>\n   <li>create a new key-database (Sleuteldatabase -> Nieuw...), or open the default key.jks (default password=\\\"changeit\\\")</li>\n   <li>add the generated certificate (Toevoegen...)</li>\n   <li>store the key-database in JKS format</li>\n   <li>if you didn't use the standard keydatabase, then reference the file in the truststore-attribute in Configuration.xml (include the file as a resource)</li>\n   <li>use jks for the truststoreType-attribute</li>\n   <li>restart your application</li>\n   <li>instead of IBM ikeyman you can use the standard java tool <code>keytool</code> as follows:\n      <code>keytool -import -alias <i>yourAlias</i> -file <i>pathToSavedCertificate</i></code></li>\n </ul>\n <p>\n Note 4:\n In case <code>cannot create or initialize SocketFactory: (IOException) Unable to verify MAC</code> exceptions are thrown,\n please check password or authAlias configuration of the corresponding certificate.\n </p>",
      "elementNames": [],
      "attributes": [
        {
          "name": "timeout",
          "description": "Timeout in ms of obtaining a connection/result.",
          "default": "10000",
          "type": "int"
        },
        {
          "name": "maxConnections",
          "description": "The maximum number of concurrent connections",
          "default": "10",
          "type": "int"
        },
        {
          "name": "maxExecuteRetries",
          "description": "The maximum number of times the execution is retried",
          "default": "1 (for repeatable messages) else 0",
          "type": "int"
        },
        {
          "name": "authAlias",
          "description": "Authentication alias used for authentication to the host"
        },
        {
          "name": "username",
          "description": "Username used for authentication to the host"
        },
        {
          "name": "authDomain",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "Please use the UPN or the full sAM-AccountName instead"
          },
          "description": "Corporate domain name. Should only be used in combination with sAMAccountName, never with an UPN.<br/>\n <br/>\n Assuming the following user:<br/>\n UPN: john.doe@CorpDomain.biz<br/>\n sAMAccountName: CORPDOMAIN\\john.doe<br/>\n <br/>\n The username attribute may be set to <code>john.doe</code><br/>\n The AuthDomain attribute may be set to <code>CORPDOMAIN</code><br/>"
        },
        {
          "name": "password",
          "description": "Password used for authentication to the host"
        },
        {
          "name": "tokenEndpoint",
          "description": "Endpoint to obtain OAuth accessToken. If <code>authAlias</code> or <code>username</code>( and <code>password</code>) are specified,\n then a PasswordGrant is used, otherwise a ClientCredentials grant. The obtained accessToken will be added to the regular requests\n in an HTTP Header 'Authorization' with a 'Bearer' prefix."
        },
        {
          "name": "tokenExpiry",
          "description": "If set to a non-negative value, then determines the time (in seconds) after which the token will be refreshed. Otherwise the token\n will be refreshed when it is half way its lifetime as defined by the <code>expires_in</code> clause of the token response,\n or when the regular server returns a 401 status with a challenge.\n If not specified, and the accessTokens lifetime is not found in the token response, the accessToken will not be refreshed preemptively.",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "clientAlias",
          "description": "Alias used to obtain client_id and client_secret for authentication to <code>tokenEndpoint</code>"
        },
        {
          "name": "clientId",
          "description": "Client_id used in authentication to <code>tokenEndpoint</code>"
        },
        {
          "name": "clientSecret",
          "description": "Client_secret used in authentication to <code>tokenEndpoint</code>"
        },
        {
          "name": "scope",
          "description": "Space or comma separated list of scope items requested for accessToken, e.g. <code>read write</code>. Only used when <code>tokenEndpoint</code> is specified"
        },
        {
          "name": "authenticatedTokenRequest",
          "deprecated": {
            "forRemoval": true,
            "since": "9.0",
            "description": "Use oauthAuthenticationMethod to set this behaviour"
          },
          "description": "if set true, clientId and clientSecret will be added as Basic Authentication header to the tokenRequest, instead of as request parameters",
          "type": "bool"
        },
        {
          "name": "oauthAuthenticationMethod",
          "description": "Only used when `tokenEndpoint` has been configured. Sets the OAuth authentication method and controls which authentication flow should be used.",
          "enum": "org.frankframework.http.AbstractHttpSession.OauthAuthenticationMethod"
        },
        {
          "name": "samlNameId",
          "description": "The nameId to be added during the creation of the SAML assertion."
        },
        {
          "name": "samlIssuer",
          "description": "The issuer to be added during the creation of the SAML assertion."
        },
        {
          "name": "samlAudience",
          "description": "The audience to be added during the creation of the SAML assertion."
        },
        {
          "name": "samlAssertionExpiry",
          "description": "The time to live (in seconds) until the generated SAML assertion should be valid. A new assertion will be generated when the previous assertion is no longer valid.",
          "type": "int"
        },
        {
          "name": "proxyHost",
          "description": "Proxy host"
        },
        {
          "name": "proxyPort",
          "description": "Proxy port",
          "default": "80",
          "type": "int"
        },
        {
          "name": "proxyAuthAlias",
          "description": "Alias used to obtain credentials for authentication to proxy"
        },
        {
          "name": "proxyUsername",
          "description": "Proxy username"
        },
        {
          "name": "proxyPassword",
          "description": "Proxy password"
        },
        {
          "name": "proxyRealm",
          "description": "Proxy realm"
        },
        {
          "name": "prefillProxyAuthCache",
          "description": "Create a pre-emptive login context for the proxy connection(s).",
          "type": "bool"
        },
        {
          "name": "disableCookies",
          "description": "Disables the use of cookies, making the sender completely stateless",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "keystore",
          "description": "resource URL to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used."
        },
        {
          "name": "keystoreType",
          "description": "Type of keystore",
          "default": "pkcs12",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "keystoreAuthAlias",
          "description": "Authentication alias used to obtain keystore password"
        },
        {
          "name": "keystorePassword",
          "description": "Default password to access keystore"
        },
        {
          "name": "keyManagerAlgorithm",
          "description": "Key manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "keystoreAlias",
          "description": "Alias to obtain specific certificate or key in keystore"
        },
        {
          "name": "keystoreAliasAuthAlias",
          "description": "Authentication alias to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keystoreAliasPassword",
          "description": "Default password to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "truststore",
          "description": "Resource URL to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used."
        },
        {
          "name": "truststoreAuthAlias",
          "description": "Authentication alias used to obtain truststore password"
        },
        {
          "name": "truststorePassword",
          "description": "Default password to access truststore"
        },
        {
          "name": "truststoreType",
          "description": "Type of truststore",
          "default": "jks",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "trustManagerAlgorithm",
          "description": "Trust manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "verifyHostname",
          "unsafe": true,
          "description": "If <code>true</code>, the hostname in the certificate will be checked against the actual hostname of the peer",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "allowSelfSignedCertificates",
          "unsafe": true,
          "description": "If <code>true</code>, self signed certificates are accepted",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "ignoreCertificateExpiredException",
          "unsafe": true,
          "description": "If <code>true</code>, CertificateExpiredExceptions are ignored",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "followRedirects",
          "description": "If <code>true</code>, a redirect request will be honoured, e.g. to switch to HTTPS",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "ignoreRedirects",
          "description": "If true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "staleChecking",
          "description": "Controls whether connections checked to be stale, i.e. appear open, but are not.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "staleTimeout",
          "description": "Used when <code>staleChecking</code> is <code>true</code>. Timeout after which an idle connection will be validated before being used.",
          "default": "5000 ms",
          "type": "int"
        },
        {
          "name": "connectionTimeToLive",
          "description": "Maximum Time to Live for connections in the pool. No connection will be re-used past its timeToLive value.",
          "default": "900 s",
          "type": "int"
        },
        {
          "name": "connectionIdleTimeout",
          "description": "Maximum Time for connection to stay idle in the pool. Connections that are idle longer will periodically be evicted from the pool",
          "default": "10 s",
          "type": "int"
        },
        {
          "name": "protocol",
          "description": "Secure socket protocol (such as 'TLSv1.2') to use when a SSLContext object is generated.",
          "default": "TLSv1.2"
        },
        {
          "name": "supportedCipherSuites",
          "description": "Allows you to choose which CipherSuites are used when connecting to an endpoint. Works in tandem with <code>protocol</code> as the provided Suite may not be valid for the provided Protocol\n See the Java Security Standard Algorithm Names Specification for all available options. Note that these may differ depending on the JRE you're using."
        },
        {
          "name": "name"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "AbstractJdbcMessageBrowser",
      "fullName": "org.frankframework.jdbc.AbstractJdbcMessageBrowser",
      "abstract": true,
      "description": "JDBC implementation of {@link IMessageBrowser}.",
      "parent": "org.frankframework.jdbc.JdbcFacade",
      "elementNames": [],
      "attributes": [
        {
          "name": "keyField",
          "description": "The name of the column that contains the primary key of the table",
          "default": "MESSAGEKEY"
        },
        {
          "name": "idField",
          "description": "The name of the column messageIds are stored in",
          "default": "MESSAGEID"
        },
        {
          "name": "correlationIdField",
          "description": "The name of the column correlation-ids are stored in",
          "default": "CORRELATIONID"
        },
        {
          "name": "messageField",
          "description": "The name of the column message themselves are stored in",
          "default": "MESSAGE"
        },
        {
          "name": "dateField",
          "description": "The name of the column the timestamp is stored in",
          "default": "MESSAGEDATE"
        },
        {
          "name": "commentField",
          "description": "The name of the column comments are stored in",
          "default": "COMMENTS"
        },
        {
          "name": "expiryDateField",
          "description": "The name of the column the timestamp for expiry is stored in",
          "default": "EXPIRYDATE"
        },
        {
          "name": "labelField",
          "description": "The name of the column labels are stored in",
          "default": "LABEL"
        },
        {
          "name": "prefix",
          "description": "Prefix to be prefixed on all database objects (tables, indices, sequences), e.g. to access a different Oracle schema"
        },
        {
          "name": "order",
          "enum": "org.frankframework.core.IMessageBrowser.SortOrder"
        },
        {
          "name": "hideRegex",
          "description": "Regular expression to mask strings in the errorStore/logStore.\n Every character between to the strings in this expression will be replaced by a '*'.\n <br/>\n For example, the regular expression (?&lt;=&lt;party&gt;).*?(?=&lt;/party&gt;) will replace every\n character between keys &lt;party&gt; and &lt;/party&gt;\n <br/>\n When no hideRegex is configured on the errorStore / logStore but is configured on the {@link org.frankframework.receivers.Receiver#setHideRegex(String)},\n then the Receiver's hideRegex is used for the errorStore / logStore."
        },
        {
          "name": "hideMethod",
          "description": "(Only used when hideRegex is not empty) Specifies the way to hide",
          "default": "ALL",
          "enum": "org.frankframework.core.IMessageBrowser.HideMethod"
        }
      ]
    },
    {
      "name": "AbstractJdbcQuerySender",
      "fullName": "org.frankframework.jdbc.AbstractJdbcQuerySender",
      "abstract": true,
      "description": "This executes the query that is obtained from the (here still abstract) method getStatement.\n Descendant classes can override getStatement to provide meaningful statements.\n If used with parameters, the values of the parameters will be applied to the statement.\n Each occurrence of a questionmark ('?') will be replaced by a parameter value. Parameters are applied\n in order: The n-th questionmark is replaced by the value of the n-th parameter.\n\n <h3>Note on using packages</h3>\n The package processor makes some assumptions about the data types:\n <ul>\n   <li>elements that start with a single quote are assumed to be Strings</li>\n   <li>elements that contain a dash ('-') are assumed to be dates (yyyy-MM-dd) or timestamps (yyyy-MM-dd HH:mm:ss)</li>\n   <li>elements containing a dot ('.') are assumed to be floats</li>\n   <li>all other elements are assumed to be integers</li>\n </ul>\n </p>\n\n Queries that return no data (queryType 'other') return a message indicating the number of rows processed",
      "parent": "org.frankframework.jdbc.AbstractJdbcSender",
      "elementNames": [],
      "attributes": [
        {
          "name": "packageContent",
          "description": "Controls if the returned package content is db2 format or xml format.\n Possible values:\n <ul>\n <li>select:</li> xml content s expected\n <li><i>anything else</i>:</li> db2 content is expected\n </ul>"
        },
        {
          "name": "queryType",
          "description": "Type of query to be executed",
          "default": "OTHER",
          "enum": "org.frankframework.jdbc.AbstractJdbcQuerySender.QueryType"
        },
        {
          "name": "scalar",
          "description": "When <code>true</code>, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "scalarExtended",
          "description": "When <code>true</code> and <code>scalar</code> is also <code>true</code>, but returns no value, one of the following is returned:\n <ul>\n <li>'[absent]' no row is found</li>\n <li>'[null]' a row is found, but the value is a SQL-NULL</li>\n <li>'[empty]' a row is found, but the value is a empty string</li>\n </ul>",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "maxRows",
          "description": "The maximum number of rows to be returned from the output of <code>select</code> queries, -1 means unlimited rows",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "startRow",
          "description": "The number of the first row to be returned from the output of <code>select</code> queries. Rows before this are skipped from the output.",
          "default": "1",
          "type": "int"
        },
        {
          "name": "nullValue",
          "description": "Value used in result as contents of fields that contain no value (sql-null)",
          "default": "<i>empty string</i>"
        },
        {
          "name": "resultQuery",
          "description": "Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual"
        },
        {
          "name": "columnsReturned",
          "description": "Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys().\n Note: not all drivers support multiple values and returned field names may vary between drivers.\n Works for H2 and Oracle. Could work for MS_SQL with a single identity column, with name GENERATED_KEYS, if a identity has been generated. Not supported for other DBMSes."
        },
        {
          "name": "useNamedParams",
          "description": "Named parameters will be auto-detected by default. Every string in the query which equals <code><code>?{</code>paramname<code>}</code></code> will be replaced by the value of the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped.",
          "type": "bool"
        },
        {
          "name": "includeFieldDefinition",
          "description": "when <code>true</code>, the result contains besides the returned rows also includes a header with information about the fetched fields",
          "default": "application default (true)",
          "type": "bool"
        },
        {
          "name": "trimSpaces",
          "description": "Remove trailing blanks from all result values.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "rowIdSessionKey",
          "description": "If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for <code>querytype=other</code>). <b>Note:</b> If multiple rows are processed a SqlException is thrown."
        },
        {
          "name": "streamResultToServlet",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0"
          },
          "description": "If set, the result is streamed to the HttpServletResponse object of the RestServiceDispatcher (instead of passed as bytes or as a String)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "sqlDialect",
          "description": "If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect"
        },
        {
          "name": "lockRows",
          "description": "When set <code>true</code>, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "lockWait",
          "description": "when set and >=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED'",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "synchronous",
          "description": "When <code>true</code>, the result of sendMessage is the reply of the request.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "blobColumn",
          "description": "Only for querytype 'updateBlob': column that contains the BLOB to be updated",
          "default": "1",
          "type": "int"
        },
        {
          "name": "blobSessionKey",
          "description": "For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.\n For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to"
        },
        {
          "name": "blobsCompressed",
          "description": "controls whether blobdata is stored compressed in the database",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "blobBase64Direction",
          "description": "controls whether the streamed blobdata will need to be base64 <code>encode</code> or <code>decode</code> or not.",
          "enum": "org.frankframework.pipes.Base64Pipe.Direction"
        },
        {
          "name": "blobCharset",
          "description": "Charset that is used to read and write BLOBs. This assumes the blob contains character data.\n If blobCharset and blobSmartGet are not set, BLOBs are returned as bytes. Before version 7.6, blobs were base64 encoded after being read to accommodate for the fact that senders need to return a String. This is no longer the case"
        },
        {
          "name": "blobSmartGet",
          "description": "Controls automatically whether blobdata is stored compressed and/or serialized in the database",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "clobColumn",
          "description": "Only for querytype 'updateClob': column that contains the CLOB to be updated",
          "default": "1",
          "type": "int"
        },
        {
          "name": "clobSessionKey",
          "description": "For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.\n For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to"
        },
        {
          "name": "closeInputstreamOnExit",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0"
          },
          "description": "When set to <code>false</code>, the Inputstream is not closed after it has been used to update a BLOB or CLOB",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "closeOutputstreamOnExit",
          "description": "When set to <code>false</code>, the Outputstream is not closed after BLOB or CLOB has been written to it",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "streamCharset",
          "description": "Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion"
        },
        {
          "name": "avoidLocking",
          "description": "If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "prettyPrint",
          "description": "If true and scalar=false, multiline indented XML is produced",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "outputFormat",
          "description": "The type of output. If not set then defaults to old-style XML. If set to XML, new-style XML is used. EXPERIMENTAL: datatypes like numbers are not yet rendered correctly",
          "default": "false",
          "enum": "org.frankframework.documentbuilder.DocumentFormat"
        }
      ],
      "parametersDescription": "all parameters present are applied to the statement to be executed"
    },
    {
      "name": "AbstractJdbcSender",
      "fullName": "org.frankframework.jdbc.AbstractJdbcSender",
      "abstract": true,
      "description": "Base class for building JDBC-senders.",
      "parent": "org.frankframework.jdbc.JdbcFacade",
      "elementNames": [],
      "attributes": [
        {
          "name": "timeout",
          "description": "The number of seconds the JDBC driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited",
          "default": "0",
          "type": "int"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ]
    },
    {
      "name": "AbstractJmsListener",
      "fullName": "org.frankframework.jms.AbstractJmsListener",
      "abstract": true,
      "description": "Common baseclass for Pulling and Pushing JMS Listeners.",
      "parent": "org.frankframework.jms.JMSFacade",
      "elementNames": [],
      "attributes": [
        {
          "name": "forceMessageIdAsCorrelationId",
          "description": "By default, the JmsListener takes the Correlation-ID (if present) as the ID that has to be used as Correlation-ID of the reply.\n When set to <code>true</code>, the messageID is used as Correlation-ID of the reply.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "timeout",
          "description": "Receive timeout <i>in milliseconds</i> as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long-",
          "default": "1000",
          "type": "int"
        },
        {
          "name": "useReplyTo",
          "description": "Flag if reply-to queue from the request message should be used or not.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "replyDestinationName",
          "description": "Name of the JMS destination (queue or topic) to use for sending replies. If <code>useReplyTo=true</code>,\n the sender specified reply destination takes precedence over this one."
        },
        {
          "name": "replyMessageType",
          "description": "Value of the JMSType field of the reply message",
          "default": "not set by application"
        },
        {
          "name": "replyDeliveryMode",
          "description": "Controls mode that reply messages are sent with",
          "default": "NON_PERSISTENT",
          "enum": "org.frankframework.jms.JMSFacade.DeliveryMode"
        },
        {
          "name": "replyPriority",
          "description": "Sets the priority that is used to deliver the reply message. Ranges from 0 to 9. Effectively the default priority is set by JMS to 4, <code>-1</code> means not set and thus uses the JMS default",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "replyMessageTimeToLive",
          "description": "Time <i>in milliseconds</i> after which the reply-message will expire",
          "default": "0",
          "type": "int"
        },
        {
          "name": "soap",
          "description": "If <code>true</code>, messages sent are put in a SOAP envelope",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "replyEncodingStyleURI"
        },
        {
          "name": "replyNamespaceURI"
        },
        {
          "name": "replySoapAction"
        },
        {
          "name": "soapHeaderSessionKey",
          "description": "sessionKey to store the SOAP header of the incoming message",
          "default": "soapHeader"
        }
      ],
      "children": [
        {
          "deprecated": true,
          "multiple": false,
          "roleName": "sender",
          "type": "org.frankframework.core.ISender"
        },
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ]
    },
    {
      "name": "AbstractJmsMessageBrowser",
      "fullName": "org.frankframework.jms.AbstractJmsMessageBrowser",
      "abstract": true,
      "description": "Basic browser of JMS Messages.",
      "parent": "org.frankframework.jms.JMSFacade",
      "elementNames": [],
      "attributes": [
        {
          "name": "timeOut",
          "deprecated": {
            "forRemoval": false,
            "since": "8.1",
            "description": "Use attribute timeout instead"
          },
          "description": "Timeout <i>in milliseconds</i> for receiving a message from the queue",
          "default": "3000",
          "type": "int"
        },
        {
          "name": "timeout",
          "description": "Timeout <i>in milliseconds</i> for receiving a message from the queue",
          "default": "3000",
          "type": "int"
        },
        {
          "name": "hideRegex",
          "description": "Regular expression to mask strings in the errorStore/logStore.\n Every character between to the strings in this expression will be replaced by a '*'.\n <br/>\n For example, the regular expression (?&lt;=&lt;party&gt;).*?(?=&lt;/party&gt;) will replace every\n character between keys &lt;party&gt; and &lt;/party&gt;\n <br/>\n When no hideRegex is configured on the errorStore / logStore but is configured on the {@link org.frankframework.receivers.Receiver#setHideRegex(String)},\n then the Receiver's hideRegex is used for the errorStore / logStore."
        },
        {
          "name": "hideMethod",
          "description": "(Only used when hideRegex is not empty) Specifies the way to hide",
          "default": "ALL",
          "enum": "org.frankframework.core.IMessageBrowser.HideMethod"
        }
      ]
    },
    {
      "name": "AbstractJobDef",
      "fullName": "org.frankframework.scheduler.AbstractJobDef",
      "abstract": true,
      "description": "<h3>Possible cron expressions:</h3>\n <p>\n A \\\"Cron-Expression\\\" is a string comprised of 6 or 7 fields separated by\n white space. The 6 mandatory and 1 optional fields are as follows:<br/>\n </p>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Field Name</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Values</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Special Characters</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Seconds</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Minutes</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Hours</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-23</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-31</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-12 or JAN-DEC</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-Week</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-7 or SUN-SAT</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C #</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Year (Optional)</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">>empty, 1970-2099</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n </table>\n </p>\n\n <p>The '*' character is used to specify all values. For example, \\\"*\\\" in\n the minute field means \\\"every minute\\\".</p>\n\n <p>The '?' character is allowed for the day-of-month and day-of-week fields.\n It is used to specify 'no specific value'. This is useful when you need\n to specify something in one of the two fields, but not the other. See the\n examples below for clarification.</p>\n\n <p>The '-' character is used to specify ranges For example \\\"10-12\\\" in the\n hour field means \\\"the hours 10, 11 and 12\\\".</p>\n\n <p>The ',' character is used to specify additional values. For example\n \\\"MON,WED,FRI\\\" in the day-of-week field means \\\"the days Monday,\n Wednesday, and Friday\\\".</p>\n\n <p>The '/' character is used to specify increments. For example \\\"0/15\\\" in\n the seconds field means \\\"the seconds 0, 15, 30, and 45\\\".  And \\\"5/15\\\" in\n the seconds field means \\\"the seconds 5, 20, 35, and 50\\\".  You can also\n specify '/' after the '*' character - in this case '*' is equivalent to\n having '0' before the '/'.</p>\n\n <p>The 'L' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"last\\\", but it has different meaning in each of\n the two fields.  For example, the value \\\"L\\\" in the  day-of-month field means\n \\\"the last day of the month\\\" - day 31 for  January, day 28 for February on\n non-leap years.  If used in the day-of-week field by itself, it simply\n means \\\"7\\\" or \\\"SAT\\\". But if used in the day-of-week field after another value,\n it means \\\"the last xxx day of the month\\\" - for example \\\"6L\\\" means\n \\\"the last Friday of the month\\\".  When using the 'L' option, it is\n important not to specify lists, or ranges of values, as you'll get confusing\n results.</p>\n\n <p>The '#' character is allowed for the day-of-week field.  This character\n is used to specify \\\"the nth\\\" XX day of the month.  For example, the value\n of \\\"6#3\\\" in the day-of-week field means the third Friday of the month\n (day 6 = Friday and \\\"#3\\\" = the 3rd one in the month). Other\n examples: \\\"2#1\\\" = the first Monday of the month and  \\\"4#5\\\" = the fifth\n Wednesday of the month.  Note that if you specify \\\"#5\\\" and there is not 5 of\n the given day-of-week in the month, then no firing will occur that month.</p>\n\n <p>The 'C' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"calendar\\\".  This means values are\n calculated against the associated calendar, if any.  If no calendar is\n associated, then it is equivalent to having an all-inclusive calendar.\n A value of \\\"5C\\\" in the day-of-month field means \\\"the first day included by\n the calendar on or after the 5th\\\".  A value of \\\"1C\\\" in the day-of-week field\n means \\\"the first day included by the calendar on or after Sunday\\\".</p>\n\n <p>The legal characters and the names of months and days of the week are not\n case sensitive.</p>\n\n <p>Here are some full examples:<br/>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Expression</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Meaning</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0 12 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 12pm (noon) every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? 2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day during the year 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 * 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:59pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14,18 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0-5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:05pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 10,44 14 ? 3 WED\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 2:10pm and at 2:44pm every Wednesday in the month of March.</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * MON-FRI\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 15 * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the 15th day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 L * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L 2002-2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on every last friday of every month during the years 2002, 2003, 2004 and 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6#3\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the third Friday of every month</td>\n   </tr>\n </table>\n </p>\n\n <p>Pay attention to the effects of '?' and '*' in the day-of-week and\n day-of-month fields!</p>",
      "parent": "org.frankframework.core.TransactionAttributes",
      "elementNames": [],
      "attributes": [
        {
          "name": "jobGroup",
          "description": "Group in which to sort multiple jobs.",
          "default": "Name of the Configuration this job has been specified in."
        },
        {
          "name": "name",
          "mandatory": true,
          "description": "Name of the job"
        },
        {
          "name": "description",
          "description": "Description of the job"
        },
        {
          "name": "cronExpression",
          "description": "CRON expression that determines the frequency of execution.\n Can <b>not</b> be used in combination with Interval."
        },
        {
          "name": "interval",
          "description": "Triggers the Job at the specified number of milliseconds. Keep cronExpression empty in order to use interval.\n Value <code>0</code> may be used to run once at startup of the application.\n A value of 0 in combination with function 'sendMessage' will set dependencyTimeout on the IbisLocalSender to -1 to keep waiting indefinitely instead of 60 seconds for the adapter to start.",
          "type": "int"
        },
        {
          "name": "numThreads",
          "description": "Number of threads that may execute concurrently",
          "default": "1",
          "type": "int"
        },
        {
          "name": "messageKeeperSize",
          "description": "Number of messages displayed in ibisconsole",
          "default": "10",
          "type": "int"
        }
      ],
      "children": [
        {
          "multiple": false,
          "roleName": "locker",
          "description": "Optional element to avoid parallel execution of the Job, by multiple threads or servers. The Job is NOT executed when the lock cannot be obtained!\n In case another thread, potentially on another server, holds the lock and does not release it in a timely manner, it will not trigger the job.",
          "type": "org.frankframework.util.Locker"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "Support for specifying both a day-of-week and a day-of-month\n          value is not complete (you'll need to use the '?' character in on of these fields)."
        },
        {
          "type": "INFO",
          "value": "Be careful when setting fire times between mid-night and 1:00 AM -\n          \"daylight savings\" can cause a skip or a repeat depending on whether\n          the time moves back or jumps forward."
        },
        {
          "type": "INFO",
          "value": "Specified in the Configuration.xml inside a <code>&lt;scheduler&gt;</code> element. \n          The scheduler element must be a direct child of configuration, not of adapter."
        },
        {
          "type": "TIP",
          "value": "All registered jobs are displayed in the Frank!Console under 'Scheduler'."
        },
        {
          "type": "WARNING",
          "value": "Support for the features described for the 'C' character is not complete."
        }
      ]
    },
    {
      "name": "AbstractKafkaFacade",
      "fullName": "org.frankframework.extensions.kafka.AbstractKafkaFacade",
      "abstract": true,
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "description": "The functional name of the object."
        },
        {
          "name": "bootstrapServers",
          "description": "The bootstrap servers to connect to, as a comma separated list."
        },
        {
          "name": "clientId",
          "description": "The client id to use when connecting to the Kafka cluster."
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "AbstractLdapQueryPipe",
      "fullName": "org.frankframework.ldap.AbstractLdapQueryPipe",
      "abstract": true,
      "description": "Base pipe for querying LDAP.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "ldapProviderURL",
          "description": "Url to context to search in, e.g. 'ldaps://DOMAIN.EXT'."
        },
        {
          "name": "host",
          "description": "Host part of ldapProviderUrl. Only used when ldapProviderUrl not specified"
        },
        {
          "name": "port",
          "description": "Port of ldapProviderUrl. Only used when ldapProviderUrl not specified",
          "type": "int"
        },
        {
          "name": "useSsl",
          "description": "Indication to use ldap or ldaps in ldapProviderUrl. Only used when ldapProviderUrl not specified",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "baseDN",
          "description": "BaseDN, e.g. CN=USERS,DC=DOMAIN,DC=EXT",
          "default": "false"
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain credentials to connect to ldap server"
        },
        {
          "name": "username",
          "description": "Username used to obtain credentials to connect to ldap server"
        },
        {
          "name": "password",
          "description": "Password used to obtain credentials to connect to ldap server"
        },
        {
          "name": "notFoundForwardName"
        },
        {
          "name": "exceptionForwardName",
          "description": "PipeForward used when an exception is caught"
        }
      ],
      "forwards": [
        {
          "name": "*",
          "description": "When `notFoundForwardName` or `exceptionForwardName` is used"
        }
      ]
    },
    {
      "name": "AbstractMailListener",
      "fullName": "org.frankframework.filesystem.AbstractMailListener",
      "abstract": true,
      "description": "Implementation of a {@link AbstractFileSystemListener} that enables a {@link Receiver} to look in a folder\n for received mails. When a mail is found, it is moved to an output folder (or\n it's deleted), so that it isn't found more then once. A xml string with\n information about the mail is passed to the pipeline.\n\n <p>\n <b>example:</b> <code><pre>\n   &lt;email&gt;\n      &lt;recipients&gt;\n         &lt;recipient type=\\\"to\\\"&gt;***@nn.nl&lt;/recipient&gt;\n         &lt;recipient type=\\\"cc\\\"&gt;***@nn.nl&lt;/recipient&gt;\n      &lt;/recipients&gt;\n      &lt;from&gt;***@nn.nl&lt;/from&gt;\n      &lt;subject&gt;this is the subject&lt;/subject&gt;\n      &lt;headers&gt;\n         &lt;header name=\\\"prop1\\\"&gt;<i>value of first header property</i>&lt;/header&gt;\n         &lt;header name=\\\"prop2\\\"&gt;<i>value of second header property</i>&lt;/header&gt;\n      &lt;/headers&gt;\n      &lt;dateTimeSent&gt;2015-11-18T11:40:19.000+0100&lt;/dateTimeSent&gt;\n      &lt;dateTimeReceived&gt;2015-11-18T11:41:04.000+0100&lt;/dateTimeReceived&gt;\n   &lt;/email&gt;\n </pre></code>\n </p>",
      "parent": "org.frankframework.filesystem.AbstractFileSystemListener",
      "elementNames": [],
      "attributes": [
        {
          "name": "simple",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7",
            "description": "Please use <code>messageType</code> to control the message produced by the listener"
          },
          "description": "when set to <code>true</code>, the xml string passed to the pipeline only contains the subject of the mail (to save memory)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "storeEmailAsStreamInSessionKey",
          "deprecated": {
            "forRemoval": true,
            "since": "7.5",
            "description": "Please use <code>messageType=mime</code> and sessionKey originalMessage"
          }
        },
        {
          "name": "messageType",
          "description": "Determines the contents of the message that is sent to the Pipeline. can be one of:\n <ul>\n <li><code>EMAIL</code>, for an XML containing most relevant information, except the body and the attachments</li>\n <li><code>CONTENTS</code>, for the body of the message</li>\n <li><code>MIME</code>, for the MIME contents of the message</li>\n <li><code>NAME</code> or <code>PATH</code>, for an internal handle of mail message, that can be used by a related MailFileSystemSender</li>\n <li><code>HEADER</code>, for the value of the header matching the searchKey in the message context</li>\n </ul>",
          "default": "EMAIL",
          "enum": "org.frankframework.filesystem.AbstractMailListener.MessageType"
        }
      ]
    },
    {
      "name": "AbstractMailSender",
      "fullName": "org.frankframework.senders.AbstractMailSender",
      "abstract": true,
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": [],
      "attributes": [
        {
          "name": "authAlias",
          "description": "authAlias used to obtain credentials for authentication"
        },
        {
          "name": "userId",
          "description": "userId on the smtphost"
        },
        {
          "name": "password",
          "description": "password of userid"
        },
        {
          "name": "defaultSubject",
          "description": "Set the default value of the subject: header, if not specified in message itself"
        },
        {
          "name": "defaultFrom",
          "description": "Set the default from: header, if not specified in message itself"
        },
        {
          "name": "timeout",
          "description": "Timeout <i>in milliseconds</i> for socket connection timeout and socket i/o timeouts",
          "default": "20000",
          "type": "int"
        },
        {
          "name": "defaultAttachmentName",
          "description": "When this name is used, it will be followed by a number which is equal to the node's position",
          "default": "attachment"
        },
        {
          "name": "defaultMessageType",
          "description": "when messageType is not specified defaultMessageType will be used",
          "default": "text/plain"
        },
        {
          "name": "defaultMessageBase64",
          "description": "when messageBase64 is not specified defaultMessageBase64 will be used",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "bounceAddress",
          "description": "NDR return address when mail cannot be delivered. This adds a Return-Path header",
          "default": "MAIL FROM attribute"
        },
        {
          "name": "domainWhitelist",
          "description": "Comma separated list of domains to which mails can be send, domains not on the list are filtered out. Empty allows all domains"
        }
      ],
      "parameters": [
        {
          "name": "from",
          "description": "email address of the sender"
        },
        {
          "name": "subject",
          "description": "subject field of the message"
        },
        {
          "name": "threadTopic",
          "description": "(optional) conversation field of the message, used to correlate mails in mail viewer (header field \"Thread-Topic\"). Note: subject must end with value of threadTopic, but cann't be exactly the same"
        },
        {
          "name": "message",
          "description": "message itself. If absent, the complete input message is assumed to be the message"
        },
        {
          "name": "messageType",
          "description": "message MIME type (at this moment only available are <code>text/plain</code> and <code>text/html</code> - default: <code>text/plain</code>)"
        },
        {
          "name": "messageBase64",
          "description": "(boolean) indicates whether the message content is base64 encoded (default: <code>false</code>)"
        },
        {
          "name": "charSet",
          "description": "the character encoding (e.g. ISO-8859-1 or UTF-8) used to send the email (default: UTF-8)"
        },
        {
          "name": "recipients",
          "description": "(xml) recipients of the message. Must result in a structure like: <code><pre>\n       &lt;recipient type=\"to\"&gt;***@hotmail.com&lt;/recipient&gt;\n       &lt;recipient type=\"cc\"&gt;***@gmail.com&lt;/recipient&gt;\n </pre></code>"
        },
        {
          "name": "attachments",
          "description": "(xml) attachments to the message. Must result in a structure like: <code><pre>\n       &lt;attachment name=\"filename1.txt\"&gt;This is the first attachment&lt;/attachment&gt;\n       &lt;attachment name=\"filename2.pdf\" base64=\"true\"&gt;JVBERi0xLjQKCjIgMCBvYmoKPDwvVHlwZS9YT2JqZWN0L1N1YnR5cGUvSW1...vSW5mbyA5IDAgUgo+PgpzdGFydHhyZWYKMzQxNDY2CiUlRU9GCg==&lt;/attachment&gt;\n       &lt;attachment name=\"filename3.pdf\" url=\"file:/c:/filename3.pdf\"/&gt;\n       &lt;attachment name=\"filename4.pdf\" sessionKey=\"fileContent\"/&gt;\n </pre></code>"
        }
      ]
    },
    {
      "name": "AbstractMonitorDestination",
      "fullName": "org.frankframework.monitoring.AbstractMonitorDestination",
      "abstract": true,
      "description": "Base class for Monitor Destination implementations.",
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "mandatory": true,
          "description": "The functional name of the object."
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "AbstractParameter",
      "fullName": "org.frankframework.parameters.AbstractParameter",
      "abstract": true,
      "description": "Generic parameter definition.\n\n A parameter resembles an attribute. However, while attributes get their value at configuration-time,\n parameters get their value at the time of processing the message. Value can be retrieved from the message itself,\n a fixed value, or from the pipelineSession. If this does not result in a value (or if neither of these is specified), a default value\n can be specified. If an XPathExpression or stylesheet is specified, it will be applied to the message, the value retrieved\n from the pipelineSession or the fixed value specified. If the transformation produces no output, the default value\n of the parameter is taken if provided.\n <br/><br/>\n Examples:\n <pre><code>\n stored under SessionKey 'TransportInfo':\n  &lt;transportinfo&gt;\n   &lt;to&gt;***@zonnet.nl&lt;/to&gt;\n   &lt;to&gt;***@zonnet.nl&lt;/to&gt;\n   &lt;cc&gt;***@zonnet.nl&lt;/cc&gt;\n  &lt;/transportinfo&gt;\n\n to obtain all 'to' addressees as a parameter:\n sessionKey=\\\"TransportInfo\\\"\n xpathExpression=\\\"transportinfo/to\\\"\n type=\\\"xml\\\"\n\n Result:\n   &lt;to&gt;***@zonnet.nl&lt;/to&gt;\n   &lt;to&gt;***@zonnet.nl&lt;/to&gt;\n </code></pre>\n\n N.B. to obtain a fixed value: a non-existing 'dummy' <code>sessionKey</code> in combination with the fixed value in <code>defaultValue</code> is used traditionally.\n The current version of parameter supports the 'value' attribute, that is sufficient to set a fixed value.",
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "description": "Name of the parameter"
        },
        {
          "name": "value",
          "description": "The value of the parameter, or the base for transformation using xpathExpression or stylesheet, or formatting."
        },
        {
          "name": "sessionKey",
          "description": "Key of a PipelineSession-variable. <br/>If specified, the value of the PipelineSession variable is used as input for\n the xpathExpression or stylesheet, instead of the current input message. <br/>If no xpathExpression or stylesheet are\n specified, the value itself is returned. <br/>If the value '*' is specified, all existing sessionkeys are added as\n parameter of which the name starts with the name of this parameter. <br/>If also the name of the parameter has the\n value '*' then all existing sessionkeys are added as parameter (except tsReceived)"
        },
        {
          "name": "contextKey",
          "description": "key of message context variable to use as source, instead of the message found from input message or sessionKey itself"
        },
        {
          "name": "sessionKeyXPath",
          "description": "Instead of a fixed <code>sessionKey</code> it's also possible to use a XPath expression applied to the input message to extract the name of the session-variable."
        },
        {
          "name": "styleSheetName",
          "description": "URL to a stylesheet that wil be applied to the contents of the message or the value of the session-variable."
        },
        {
          "name": "xpathExpression",
          "description": "the XPath expression to extract the parameter value from the (xml formatted) input or session-variable."
        },
        {
          "name": "xsltVersion",
          "description": "If set to <code>2</code> or <code>3</code> a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). <code>0</code> will auto-detect",
          "default": "0",
          "type": "int"
        },
        {
          "name": "namespaceDefs",
          "description": "Namespace definitions for xpathExpression. Must be in the form of a comma or space separated list of\n <code>prefix=namespaceuri</code> definitions. One entry can be without a prefix, that will define the default namespace."
        },
        {
          "name": "removeNamespaces",
          "description": "When set <code>true</code> namespaces (and prefixes) in the input message are removed before the stylesheet/xpathExpression is executed",
          "default": "<code>false</code>",
          "type": "bool"
        },
        {
          "name": "defaultValue",
          "description": "If the result of sessionKey, xpathExpression and/or stylesheet returns null or an empty string, this value is returned"
        },
        {
          "name": "defaultValueMethods",
          "description": "Comma separated list of methods (<code>defaultValue</code>, <code>sessionKey</code>, <code>pattern</code>, <code>value</code> or <code>input</code>) to use as default value. Used in the order they appear until a non-null value is found.",
          "default": "<code>defaultValue</code>"
        },
        {
          "name": "pattern",
          "description": "Value of parameter is determined using substitution and formatting, following MessageFormat syntax with named parameters. The expression can contain references\n to <code>session-variables</code> or other <code>parameters</code> using the {name-of-parameter} and is formatted using java.text.MessageFormat.\n <br/><b>NB: When referencing other <code>parameters</code> these MUST be defined before the parameter using pattern substitution.</b>\n <br/>\n <br/>\n If for instance <code>fname</code> is a parameter or session-variable that resolves to Eric, then the pattern\n 'Hi {fname}, how do you do?' resolves to 'Hi Eric, do you do?'.<br/>\n The following predefined reference can be used in the expression too:<ul>\n <li>{now}: the current system time</li>\n <li>{uid}: an unique identifier, based on the IP address and java.rmi.server.UID</li>\n <li>{uuid}: an unique identifier, based on the IP address and java.util.UUID</li>\n <li>{hostname}: the name of the machine the application runs on</li>\n <li>{username}: username from the credentials found using authAlias, or the username attribute</li>\n <li>{password}: password from the credentials found using authAlias, or the password attribute</li>\n <li>{fixeddate}: fake date, for testing only</li>\n <li>{fixeduid}: fake uid, for testing only</li>\n <li>{fixedhostname}: fake hostname, for testing only</li>\n </ul>\n A guid can be generated using {hostname}_{uid}, see also\n <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/rmi/server/uid.html\">http://java.sun.com/j2se/1.4.2/docs/api/java/rmi/server/uid.html</a> for more information about (g)uid's or\n <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/util/uuid.html\">http://docs.oracle.com/javase/1.5.0/docs/api/java/util/uuid.html</a> for more information about uuid's.\n <br/>\n When combining a date or time <code>pattern</code> like {now} or {fixeddate} with a DATE, TIME, DATETIME or TIMESTAMP <code>type</code>, the effective value of the attribute\n <code>formatString</code> must match the effective value of the formatString in the <code>pattern</code>."
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain username and password, used when a <code>pattern</code> containing {username} or {password} is specified"
        },
        {
          "name": "username",
          "description": "Default username that is used when a <code>pattern</code> containing {username} is specified"
        },
        {
          "name": "password",
          "description": "Default password that is used when a <code>pattern</code> containing {password} is specified"
        },
        {
          "name": "ignoreUnresolvablePatternElements",
          "description": "If set <code>true</code> pattern elements that cannot be resolved to a parameter or sessionKey are silently resolved to an empty string",
          "type": "bool"
        },
        {
          "name": "minLength",
          "description": "If set (>=0) and the length of the value of the parameter falls short of this minimum length, the value is padded",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "maxLength",
          "description": "If set (>=0) and the length of the value of the parameter exceeds this maximum length, the length is trimmed to this maximum length",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "hidden",
          "description": "If set to <code>true</code>, the value of the parameter will not be shown in the log (replaced by asterisks)",
          "default": "<code>false</code>",
          "type": "bool"
        },
        {
          "name": "mode",
          "description": "Set the mode of the parameter, which determines if the parameter is an INPUT, OUTPUT, or INOUT.\n This parameter only has effect for {@link StoredProcedureQuerySender}.\n An OUTPUT parameter does not need to have a value specified, but does need to have the type specified.\n Parameter values will not be updated, but output values will be put into the result of the\n {@link StoredProcedureQuerySender}.\n <b/>\n If not specified, the default is INPUT.",
          "enum": "org.frankframework.parameters.AbstractParameter.ParameterMode"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ],
      "parametersDescription": "Parameters themselves can have parameters too, for instance if a XSLT transformation is used, that transformation can have parameters."
    },
    {
      "name": "AbstractPipe",
      "fullName": "org.frankframework.pipes.AbstractPipe",
      "abstract": true,
      "description": "Base class for {@link IPipe Pipe}.\n A Pipe represents an action to take in a {@link PipeLine Pipeline}. This class is meant to be extended\n for defining steps or actions to take to complete a request. <br/>\n The contract is that a pipe is created (by the digester), {@link #setName(String)} is called and\n other setters are called, and then {@link IPipe#configure()} is called, optionally\n throwing a {@link ConfigurationException}. <br/>\n As much as possible, class instantiating should take place in the\n {@link IPipe#configure()} method.\n The object remains alive while the framework is running. When the pipe is to be run,\n the {@link IPipe#doPipe(Message, PipeLineSession) doPipe} method is activated.\n <p>\n For the duration of the processing of a message by the {@link PipeLine pipeline} has a {@link PipeLineSession pipeLineSession}.\n <br/>\n By this mechanism, pipes may communicate with one another.<br/>\n However, use this functionality with caution, as it is not desirable to make pipes dependent\n on each other. If a pipe expects something in a session, it is recommended that\n the key under which the information is stored is configurable (has a setter for this keyname).\n Also, the setting of something in the <code>PipeLineSession</code> should be done using\n this technique (specifying the key under which to store the value by a parameter).\n </p>\n <p>Since 4.1 this class also has parameters, so that descendants of this class automatically are parameter-enabled.\n However, your documentation should say if and how parameters are used!<p>\n <p> All pipes support a forward named 'exception' which will be followed in the pipeline in case the PipeRunExceptions are not handled by the pipe itself",
      "parent": "org.frankframework.core.TransactionAttributes",
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "mandatory": true,
          "description": "The functional name of this pipe. Can be referenced by the <code>path</code> attribute of a {@link PipeForward}."
        },
        {
          "name": "getInputFromSessionKey",
          "description": "If set, input is taken from this session key, instead of regular input"
        },
        {
          "name": "getInputFromFixedValue",
          "description": "If set, this fixed value is taken as input, instead of regular input"
        },
        {
          "name": "emptyInputReplacement",
          "description": "If set and the input is empty, this fixed value is taken as input"
        },
        {
          "name": "preserveInput",
          "description": "If set <code>true</code>, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of <code>getInputFromSessionKey</code>, <code>getInputFromFixedValue</code> or <code>emptyInputReplacement</code>)",
          "type": "bool"
        },
        {
          "name": "storeResultInSessionKey",
          "description": "If set, the pipe result is copied to a session key that has the name defined by this attribute. The\n pipe result is still written as the output message as usual."
        },
        {
          "name": "maxThreads",
          "description": "The maximum number of threads that may {@link #doPipe process messages} simultaneously.\n A value of 0 indicates an unlimited number of threads.",
          "default": "0",
          "type": "int"
        },
        {
          "name": "chompCharSize",
          "description": "If set (>=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)"
        },
        {
          "name": "elementToMove",
          "description": "If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionKey: + <code>elementToMoveSessionKey</code> + }"
        },
        {
          "name": "elementToMoveSessionKey",
          "description": "(Only used when <code>elementToMove</code> is set) Name of the session key under which the character data is stored",
          "default": "ref_ + the name of the element"
        },
        {
          "name": "elementToMoveChain",
          "description": "Like <code>elementToMove</code> but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')"
        },
        {
          "name": "durationThreshold",
          "description": "If durationThreshold >=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory to be analyzed",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "removeCompactMsgNamespaces",
          "type": "bool"
        },
        {
          "name": "restoreMovedElements",
          "description": "If set <code>true</code>, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)})",
          "type": "bool"
        },
        {
          "name": "sizeStatistics",
          "description": "Collect and aggregate Message size statistics",
          "type": "bool"
        },
        {
          "name": "writeToSecLog",
          "description": "when set to <code>true</code> a record is written to the security log when the pipe has finished successfully",
          "type": "bool"
        },
        {
          "name": "secLogSessionKeys",
          "description": "(only used when <code>writeToSecLog=true</code>) comma separated list of keys of session variables that is appended to the security log record"
        },
        {
          "name": "logIntermediaryResults",
          "description": "when set, the value in AppConstants is overwritten (for this pipe only)"
        },
        {
          "name": "hideRegex",
          "description": "Regular expression to mask strings in the log. For example, the regular expression <code>(?&lt;=&lt;password&gt;).*?(?=&lt;/password&gt;)</code>\n will replace every character between keys '&lt;password&gt;' and '&lt;/password&gt;'. <b>note:</b> this feature is used at adapter level,\n so a <code>hideRegex</code> set on one pipe affects all pipes in the pipeline (and multiple values in different pipes are combined into a single regex).\n The regular expressions are matched against part of the log lines. See {@link org.frankframework.util.StringUtil#hideAll(String, Collection, int)}\n with <code>mode = 0</code> for how regular expressions are matched and replaced."
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "description": "Add a parameter to the list of parameters",
          "type": "org.frankframework.parameters.IParameter"
        },
        {
          "multiple": false,
          "roleName": "locker",
          "description": "Optional Locker, to avoid parallel execution of the Pipe by multiple threads or servers. An exception is thrown when the lock cannot be obtained,\n e.g. in case another thread, may be in another server, holds the lock and does not release it in a timely manner.",
          "type": "org.frankframework.util.Locker"
        },
        {
          "multiple": true,
          "roleName": "forward",
          "description": "Forwards are used to determine the next Pipe to execute in the Pipeline",
          "type": "org.frankframework.core.PipeForward"
        }
      ],
      "forwards": [
        {
          "name": "exception",
          "description": "some error happened while processing the message; represents the 'unhappy or error flow' and is not limited to Java Exceptions."
        }
      ]
    },
    {
      "name": "AbstractRecordHandler",
      "fullName": "org.frankframework.batch.AbstractRecordHandler",
      "abstract": true,
      "description": "Abstract class that contains functionality for parsing the field values from a\n record (line). Fields in the record are either separated with a separator or have\n a fixed position in the line.",
      "elementNames": [],
      "attributes": [
        {
          "name": "recordIdentifyingFields",
          "description": "comma separated list of numbers of those fields that are compared with the previous record to determine if a prefix must be written. if any of these fields is not equal in both records, the record types are assumed to be different"
        },
        {
          "name": "fieldsDifferConditionForPrefix",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "The attribute 'fieldsDifferConditionForPrefix' has been renamed 'recordIdentifyingFields'"
          }
        },
        {
          "name": "name",
          "description": "Name of the recordhandler"
        },
        {
          "name": "inputFields",
          "description": "Comma separated specification of field lengths. if neither this attribute nor <code>inputSeparator</code> is specified then the entire record is parsed"
        },
        {
          "name": "inputSeparator",
          "description": "Separator that separates the fields in the input record. If neither this attribute nor <code>inputFields</code> is specified then the entire record is parsed"
        },
        {
          "name": "trim",
          "description": "If set to <code>true</code>, trailing spaces are removed from each field",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "deprecated": true,
          "multiple": true,
          "roleName": "child",
          "type": "org.frankframework.batch.InputfieldsPart"
        },
        {
          "multiple": true,
          "roleName": "inputFields",
          "type": "org.frankframework.batch.InputfieldsPart"
        },
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ]
    },
    {
      "name": "AbstractResultHandler",
      "fullName": "org.frankframework.batch.AbstractResultHandler",
      "abstract": true,
      "description": "Abstract class for resulthandlers (handler that handles the transformed record).",
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "description": "The functional name of the object."
        },
        {
          "name": "prefix",
          "deprecated": {
            "forRemoval": false,
            "since": ""
          },
          "description": "Prefix that has to be written before each record, if the record is in another block than the previous record"
        },
        {
          "name": "suffix",
          "deprecated": {
            "forRemoval": false,
            "since": ""
          },
          "description": "<i>deprecated</i> suffix that has to be written after the record, if the record is in another block than the next record. <br/>n.b. if a suffix is set without a prefix, it is only used at the end of processing (i.e. at the end of the file) as a final close"
        },
        {
          "name": "default",
          "description": "if set to <code>true</code>, this resultHandler is the default for all {@link RecordHandlingFlow flow}s that do not have a handler specified",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "blockByRecordType",
          "description": "When set to <code>true</code>(default), every group of records, as indicated by {@link IRecordHandler#isNewRecordType RecordHandler.newRecordType},\n is handled as a block.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ]
    },
    {
      "name": "AbstractSender",
      "fullName": "org.frankframework.senders.AbstractSender",
      "abstract": true,
      "description": "Baseclass for senders.",
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "description": "name of the sender"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "AbstractSenderWithParameters",
      "fullName": "org.frankframework.senders.AbstractSenderWithParameters",
      "abstract": true,
      "description": "Provides a base class for senders with parameters.",
      "parent": "org.frankframework.senders.AbstractSender",
      "elementNames": [],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ]
    },
    {
      "name": "AbstractSenderWrapper",
      "fullName": "org.frankframework.senders.AbstractSenderWrapper",
      "abstract": true,
      "description": "Baseclass for Wrappers for senders, that allows to get input from a session variable, and to store output in a session variable.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": [],
      "attributes": [
        {
          "name": "getInputFromSessionKey",
          "description": "If set, input is taken from this session key, instead of regular input"
        },
        {
          "name": "getInputFromFixedValue",
          "description": "If set, this fixed value is taken as input, instead of regular input"
        },
        {
          "name": "preserveInput",
          "description": "If set <code>true</code>, the input of a pipe is restored before processing the next one",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "storeResultInSessionKey",
          "description": "If set, the result is stored under this session key"
        },
        {
          "name": "storeInputInSessionKey",
          "description": "If set, the input is stored under this session key"
        }
      ],
      "children": [
        {
          "multiple": false,
          "roleName": "cache",
          "description": "optional {@link EhCache cache} definition",
          "type": "org.frankframework.cache.ICache"
        }
      ]
    },
    {
      "name": "AbstractValidator",
      "fullName": "org.frankframework.pipes.AbstractValidator",
      "abstract": true,
      "description": "Pipe that validates the input message against a Schema.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "schemaSessionKey",
          "description": "Session key for retrieving a schema"
        },
        {
          "name": "root",
          "description": "Name of the root element"
        },
        {
          "name": "responseRoot",
          "description": "Name of the response root element"
        },
        {
          "name": "forwardFailureToSuccess",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "please specify a forward with name=failure instead"
          },
          "description": "If set <code>true</code>, the failure forward is replaced by the success forward (like a warning mode)",
          "type": "bool"
        },
        {
          "name": "name",
          "description": "The functional name of this pipe. Can be referenced by the <code>path</code> attribute of a {@link PipeForward}."
        }
      ],
      "forwards": [
        {
          "name": "parserError",
          "description": "a parser exception occurred, probably caused by a non-well-formed document. If not specified, <code>failure</code> is used in such a case."
        },
        {
          "name": "failure",
          "description": "the document is not valid according to the configured schema."
        },
        {
          "name": "warnings",
          "description": "warnings occurred. If not specified, <code>success</code> is used."
        },
        {
          "name": "outputParserError",
          "description": "a <code>parserError</code> when validating a response. If not specified, <code>parserError</code> is used."
        },
        {
          "name": "outputFailure",
          "description": "a <code>failure</code> when validating a response. If not specified, <code>failure</code> is used."
        },
        {
          "name": "outputWarnings",
          "description": "warnings occurred when validating a response. If not specified, <code>warnings</code> is used."
        }
      ]
    },
    {
      "name": "AbstractXmlValidator",
      "fullName": "org.frankframework.validation.AbstractXmlValidator",
      "abstract": true,
      "description": "baseclass for validating input message against a XML Schema.\n\n N.B. noNamespaceSchemaLocation may contain spaces, but not if the schema is stored in a .jar or .zip file on the class path.",
      "elementNames": [],
      "attributes": [
        {
          "name": "fullSchemaChecking",
          "description": "Enable full schema grammar constraint checking, including checking which\n may be time-consuming or memory intensive. Currently, particle unique\n attribution constraint checking and particle derivation restriction\n checking are controlled by this option.\n <p>\n see property\n http://apache.org/xml/features/validation/schema-full-checking\n </p>",
          "default": "<code>false</code>",
          "type": "bool"
        },
        {
          "name": "throwException",
          "description": "Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "reasonSessionKey",
          "description": "If set: key of session variable to store reasons of mis-validation in",
          "default": "failureReason"
        },
        {
          "name": "xmlReasonSessionKey",
          "description": "Like <code>reasonSessionKey</code> but stores reasons in xml format and more extensive",
          "default": "xmlFailureReason"
        },
        {
          "name": "validateFile",
          "description": "If set <code>true</code>, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "charset",
          "description": "Characterset used for reading file, only used when <code>validateFile</code> is <code>true</code>",
          "default": "utf-8"
        },
        {
          "name": "warn",
          "description": "If set <code>true</code>, send warnings to logging and console about syntax problems in the configured schema('s).\n Alternatively, warnings can be switched off using suppression properties <code>XSD_VALIDATION_WARNINGS_SUPPRESS_KEY</code>, <code>XSD_VALIDATION_ERROR_SUPPRESS_KEY</code> and <code>XSD_VALIDATION_FATAL_ERROR_SUPPRESS_KEY</code>",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "ignoreUnknownNamespaces",
          "description": "Ignore namespaces in the input message which are unknown",
          "default": "true when <code>schema</code> or <code>noNamespaceSchemaLocation</code> is used, false otherwise",
          "type": "bool"
        },
        {
          "name": "ignoreCaching",
          "description": "If set <code>true</code>, the number for caching validators in appConstants is ignored and no caching is done (for this validator only)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "xmlSchemaVersion",
          "description": "If set to <code>1.0</code>, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with <code>xsd.processor.version</code> property.",
          "default": "<code>1.1</code>"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "ActionJob",
      "fullName": "org.frankframework.scheduler.job.ActionJob",
      "description": "Job which can stop/start adapters and receivers.\n \n <h3>Possible cron expressions:</h3>\n <p>\n A \\\"Cron-Expression\\\" is a string comprised of 6 or 7 fields separated by\n white space. The 6 mandatory and 1 optional fields are as follows:<br/>\n </p>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Field Name</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Values</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Special Characters</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Seconds</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Minutes</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Hours</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-23</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-31</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-12 or JAN-DEC</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-Week</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-7 or SUN-SAT</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C #</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Year (Optional)</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">>empty, 1970-2099</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n </table>\n </p>\n\n <p>The '*' character is used to specify all values. For example, \\\"*\\\" in\n the minute field means \\\"every minute\\\".</p>\n\n <p>The '?' character is allowed for the day-of-month and day-of-week fields.\n It is used to specify 'no specific value'. This is useful when you need\n to specify something in one of the two fields, but not the other. See the\n examples below for clarification.</p>\n\n <p>The '-' character is used to specify ranges For example \\\"10-12\\\" in the\n hour field means \\\"the hours 10, 11 and 12\\\".</p>\n\n <p>The ',' character is used to specify additional values. For example\n \\\"MON,WED,FRI\\\" in the day-of-week field means \\\"the days Monday,\n Wednesday, and Friday\\\".</p>\n\n <p>The '/' character is used to specify increments. For example \\\"0/15\\\" in\n the seconds field means \\\"the seconds 0, 15, 30, and 45\\\".  And \\\"5/15\\\" in\n the seconds field means \\\"the seconds 5, 20, 35, and 50\\\".  You can also\n specify '/' after the '*' character - in this case '*' is equivalent to\n having '0' before the '/'.</p>\n\n <p>The 'L' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"last\\\", but it has different meaning in each of\n the two fields.  For example, the value \\\"L\\\" in the  day-of-month field means\n \\\"the last day of the month\\\" - day 31 for  January, day 28 for February on\n non-leap years.  If used in the day-of-week field by itself, it simply\n means \\\"7\\\" or \\\"SAT\\\". But if used in the day-of-week field after another value,\n it means \\\"the last xxx day of the month\\\" - for example \\\"6L\\\" means\n \\\"the last Friday of the month\\\".  When using the 'L' option, it is\n important not to specify lists, or ranges of values, as you'll get confusing\n results.</p>\n\n <p>The '#' character is allowed for the day-of-week field.  This character\n is used to specify \\\"the nth\\\" XX day of the month.  For example, the value\n of \\\"6#3\\\" in the day-of-week field means the third Friday of the month\n (day 6 = Friday and \\\"#3\\\" = the 3rd one in the month). Other\n examples: \\\"2#1\\\" = the first Monday of the month and  \\\"4#5\\\" = the fifth\n Wednesday of the month.  Note that if you specify \\\"#5\\\" and there is not 5 of\n the given day-of-week in the month, then no firing will occur that month.</p>\n\n <p>The 'C' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"calendar\\\".  This means values are\n calculated against the associated calendar, if any.  If no calendar is\n associated, then it is equivalent to having an all-inclusive calendar.\n A value of \\\"5C\\\" in the day-of-month field means \\\"the first day included by\n the calendar on or after the 5th\\\".  A value of \\\"1C\\\" in the day-of-week field\n means \\\"the first day included by the calendar on or after Sunday\\\".</p>\n\n <p>The legal characters and the names of months and days of the week are not\n case sensitive.</p>\n\n <p>Here are some full examples:<br/>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Expression</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Meaning</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0 12 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 12pm (noon) every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? 2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day during the year 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 * 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:59pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14,18 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0-5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:05pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 10,44 14 ? 3 WED\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 2:10pm and at 2:44pm every Wednesday in the month of March.</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * MON-FRI\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 15 * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the 15th day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 L * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L 2002-2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on every last friday of every month during the years 2002, 2003, 2004 and 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6#3\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the third Friday of every month</td>\n   </tr>\n </table>\n </p>\n\n <p>Pay attention to the effects of '?' and '*' in the day-of-week and\n day-of-month fields!</p>",
      "parent": "org.frankframework.scheduler.AbstractJobDef",
      "elementNames": ["ActionJob"],
      "attributes": [
        {
          "name": "action",
          "mandatory": true,
          "enum": "org.frankframework.scheduler.job.ActionJob.AvailableAction"
        },
        {
          "name": "configurationName",
          "description": "Configuration on which job operates"
        },
        {
          "name": "adapterName",
          "mandatory": true,
          "description": "Adapter on which job operates"
        },
        {
          "name": "receiverName",
          "description": "Receiver on which job operates"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "Support for specifying both a day-of-week and a day-of-month\n          value is not complete (you'll need to use the '?' character in on of these fields)."
        },
        {
          "type": "INFO",
          "value": "Be careful when setting fire times between mid-night and 1:00 AM -\n          \"daylight savings\" can cause a skip or a repeat depending on whether\n          the time moves back or jumps forward."
        },
        {
          "type": "INFO",
          "value": "Specified in the Configuration.xml inside a <code>&lt;scheduler&gt;</code> element. \n          The scheduler element must be a direct child of configuration, not of adapter."
        },
        {
          "type": "TIP",
          "value": "All registered jobs are displayed in the Frank!Console under 'Scheduler'."
        },
        {
          "type": "WARNING",
          "value": "Support for the features described for the 'C' character is not complete."
        }
      ]
    },
    {
      "name": "Adapter",
      "fullName": "org.frankframework.core.Adapter",
      "description": "The Adapter is the central manager in the framework. It has knowledge of both\n {@link Receiver}s as well as the {@link PipeLine} and statistics.\n The Adapter is the class that is responsible for configuring, initializing and\n accessing/activating Receivers, Pipelines, statistics etc.\n <br/>\n An Adapter receives a specific type of messages and processes them. It has {@link Receiver Receivers}\n that receive the messages and a {@link PipeLine} that transforms the incoming messages. Each adapter is part of a {@link Configuration}.\n <br/>\n If an adapter can receive its messages through multiple channels (e.g. RESTful HTTP requests, incoming files, etc),\n each channel appears as a separate {@link Receiver} nested in the adapter. Each {@link Receiver} is also responsible\n for dealing with\n the result of its received messages; the result is the output of the {@link PipeLine}. The result\n consists of the transformed message and a state. The Frank!Framework distinguishes between exit states\n SUCCESS and ERROR. There is also a state REJECTED for messages that are not accepted by the Frank!Framework\n and that are not processed by the {@link PipeLine}. If the exit state is ERROR, the result message may\n not be usable by the calling system. This can be fixed by adding an\n errorMessageFormatter that formats the result message if the state is ERROR.\n <br/><br/>\n Adapters gather statistics about the messages they process.\n <br/>\n Adapters can process messages in parallel. They are thread-safe.",
      "elementNames": ["Adapter"],
      "attributes": [
        {
          "name": "name",
          "mandatory": true,
          "description": "name of the adapter"
        },
        {
          "name": "description",
          "description": "some functional description of the <code>Adapter</code>"
        },
        {
          "name": "autoStart",
          "description": "AutoStart indicates that the adapter should be started when the configuration\n is started.",
          "default": "<code>true</code>",
          "type": "bool"
        },
        {
          "name": "replaceNullMessage",
          "description": "If <code>true</code> a null message is replaced by an empty message",
          "default": "<code>false</code>",
          "type": "bool"
        },
        {
          "name": "messageKeeperSize",
          "description": "number of message displayed in ibisconsole",
          "default": "10",
          "type": "int"
        },
        {
          "name": "msgLogLevel",
          "description": "Defines behaviour for logging messages. Configuration is done in the MSG appender in log4j4ibis.properties.",
          "default": "<code>INFO</code>, unless overridden by property <code>msg.log.level.default</code>",
          "enum": "org.frankframework.core.Adapter.MessageLogLevel"
        },
        {
          "name": "requestReplyLogging",
          "deprecated": {
            "forRemoval": false,
            "since": ""
          },
          "type": "bool"
        },
        {
          "name": "msgLogHidden",
          "description": "If set to <code>true</code>, the length of the message is shown in the msg log instead of the content of the message",
          "default": "<code>false</code>",
          "type": "bool"
        },
        {
          "name": "targetDesignDocument"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "mandatory": true,
          "multiple": true,
          "roleName": "receiver",
          "description": "Receives incoming messages. If an adapter can receive messages through multiple channels, then add a receiver for each channel.",
          "type": "org.frankframework.receivers.Receiver"
        },
        {
          "multiple": false,
          "roleName": "errorMessageFormatter",
          "description": "Formatter for errors that can occur in this adapter.",
          "type": "org.frankframework.core.IErrorMessageFormatter"
        },
        {
          "mandatory": true,
          "multiple": false,
          "roleName": "pipeline",
          "description": "The {@link PipeLine}.",
          "type": "org.frankframework.core.PipeLine"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "Adapterfilter",
      "fullName": "org.frankframework.monitoring.AdapterFilter",
      "description": "Filter on Adapters, used by Triggers.",
      "elementNames": ["Adapterfilter"],
      "attributes": [
        {
          "name": "adapter",
          "description": "Set the name of the Adapter that this AdapterFilter filters on."
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "source",
          "description": "Add the name of a SubObject (such as a Pipe) to be included in the filter."
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Monitoring"
        }
      ]
    },
    {
      "name": "Adios2XmlPipe",
      "fullName": "org.frankframework.extensions.rekenbox.Adios2XmlPipe",
      "description": "Transforms between ascii-ADIOS and an XML representation of ADIOS.\n\n <p>\n Sample xml:<br/>\n <pre><code>&lt;adios rekenbox=&quot;L76HB150&quot;&gt;\n     &lt;rubriek naam=&quot;BER_VERZ_CD&quot; waarde=&quot;COMBIFLEX_BELEGGING&quot; /&gt;\n     &lt;rubriek naam=&quot;INBR_CD&quot; waarde=&quot;NIEUWE_VERZEKERING&quot; /&gt;\n     &lt;rubriek naam=&quot;PENS_DT_BEP_CD&quot;  waarde=&quot;DT_UIT_PENS_LFT&quot; /&gt;\n     &lt;rubriek nummer=&quot;313&quot; naam=&quot;AS_OPSL_PRD_TRM_PRM&quot; index=&quot;3&quot; recordnr=&quot;74&quot; record=&quot;VUT_VERZEKERING&quot; waarde=&quot;52.34&quot; /&gt;\n     ...\n &lt;/adios&gt;</code></pre>\n <br/>\n For input, a 'naam' or a 'nummer'-attribute must be specified. If both are specified, their match is checked.\n On output, 'nummer', 'naam' and 'waarde'-attributes are always present in each rubriek-element.\n Where applicable 'index', 'recordnr', 'record' and 'recordindex' are present, too.\n If sub-records exist, they are present with a 'sub' prefix to all attributes.\n </p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["Adios2XmlPipe"],
      "attributes": [
        {
          "name": "adiosDefinities",
          "description": "sets URL to the pascal file with label-constants generated by the ADIOS-utility.",
          "default": "nnrscons.pas"
        },
        {
          "name": "direction",
          "description": "Transformation direction.",
          "default": "Adios2Xml",
          "enum": "org.frankframework.extensions.rekenbox.Adios2XmlPipe.Direction"
        },
        {
          "name": "rekenbox",
          "description": "Sets name of the rekenbox to be called"
        },
        {
          "name": "rekenboxSessionKey",
          "description": "Name of the SessionKey to retrieve the rekenbox name from"
        },
        {
          "name": "noConversionForwardName",
          "description": "Sets the name of the forward used when no conversion to XML was performed, because the input was already XML.",
          "default": "noconversion"
        }
      ],
      "forwards": [
        {
          "name": "noConversionForwardName",
          "description": "when successful, but no conversion took place"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "Afm2EdiFactSender",
      "fullName": "org.frankframework.extensions.afm.Afm2EdiFactSender",
      "description": "Domparser om AFM-XML berichten om te zetten in edifactberichten (voor de backoffice).",
      "elementNames": ["Afm2EdiFactSender"],
      "attributes": [
        {
          "name": "name",
          "description": "The functional name of the object."
        },
        {
          "name": "destination"
        },
        {
          "name": "postbus"
        },
        {
          "name": "tpnummer"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "Alarm",
      "fullName": "org.frankframework.monitoring.Alarm",
      "description": "A Trigger that starts its life with type = ALARM. The type of the trigger can be changed dynamically.",
      "parent": "org.frankframework.monitoring.Trigger",
      "elementNames": ["AlarmTrigger"]
    },
    {
      "name": "AmazonS3Sender",
      "fullName": "org.frankframework.senders.AmazonS3Sender",
      "description": "Sender to work with the Amazon S3 Filesystem.\n <p>\n     In addition to regular parameters for filesystem senders, it is possible\n     to set custom user-metadata on S3 files by prefixing parameter names with\n     <code>FileAttribute.</code>.\n     This prefix will be not be part of the actual metadata property name.\n </p>\n <p>\n     The string value of these parameters will be used as value of the custom metadata attribute.\n </p>",
      "parent": "org.frankframework.filesystem.AbstractFileSystemSender",
      "elementNames": ["AmazonS3Sender"],
      "attributes": [
        {
          "name": "accessKey",
          "description": "Access key to access to the AWS resources owned by the account"
        },
        {
          "name": "secretKey",
          "description": "Secret key to access to the AWS resources owned by the account"
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain AWS credentials"
        },
        {
          "name": "chunkedEncodingDisabled",
          "description": "Setting this flag will result in disabling chunked encoding for all requests.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "forceGlobalBucketAccessEnabled",
          "description": "Option to enable or disable the usage of multi-region access point ARNs.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "clientRegion",
          "mandatory": true,
          "description": "Name of the AWS region that the client is using.",
          "default": "eu-west-1"
        },
        {
          "name": "bucketName",
          "description": "Name of the bucket to access. The bucketName can also be specified by prefixing it to the object name, separated from it by <code>|</code>"
        },
        {
          "name": "proxyHost",
          "description": "Proxy host"
        },
        {
          "name": "proxyPort",
          "description": "Proxy port",
          "type": "int"
        },
        {
          "name": "serviceEndpoint",
          "description": "The S3 service endpoint, either with or without the protocol. (e.g. https://sns.us-west-1.amazonaws.com or sns.us-west-1.amazonaws.com)"
        },
        {
          "name": "maxConnections",
          "description": "Maximum concurrent connections towards S3",
          "default": "50",
          "type": "int"
        }
      ]
    },
    {
      "name": "AmountOfPagesPipe",
      "fullName": "org.frankframework.extensions.aspose.pipe.AmountOfPagesPipe",
      "description": "Returns the amount of pages of a PDF file.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["AmountOfPagesPipe"],
      "attributes": [
        {
          "name": "charset",
          "description": "Charset to be used to read the input message.\n Defaults to the message's known charset or UTF-8 when unknown."
        }
      ],
      "forwards": [
        {
          "name": "passwordProtected",
          "description": "the File is password protected"
        }
      ]
    },
    {
      "name": "ApiListener",
      "fullName": "org.frankframework.http.rest.ApiListener",
      "description": "Listener that allows a {@link Receiver} to receive messages as a REST webservice.\n Prepends the configured URI pattern with <code>api/</code>. The structure of REST messages is described\n by OpenAPI specifications. The Frank!Framework generates an OpenAPI specification for each ApiListener and\n for all ApiListeners in all configurations combined. You can\n find them in the Frank!Console under main menu item Webservices, heading Available ApiListeners.\n <p>\n The generated OpenAPI specifications have <code>servers</code> and <code>paths</code> objects and\n therefore they document the full URLs of the provided services.\n <p>\n It is possible to automatically generate eTags over the listener result. This can be controlled by globally \n setting the property <code>api.etag.enabled</code> or by setting the attribute <code>updateEtag=\\\"true\\\"</code>.\n When enabled the listener will respond to the <code>If-Match</code>, <code>If-None-Match</code> headers and may return status code 304.\n <p>\n In order to enable eTags for multiple nodes you must configure Memcached to store the eTags.\n The following properties will need to be set:\n <ul>\n <li><code>etag.cache.server=ip or hostname:port</code></li>\n <li><code>etag.cache.type=memcached</code></li>\n </ul>\n In case authentication, is required the following application properties can be used:\n <ul>\n <li><code>etag.cache.username</code></li>\n <li><code>etag.cache.password</code></li>\n <li><code>etag.cache.authalias</code></li>\n </ul>",
      "parent": "org.frankframework.http.PushingListenerAdapter",
      "elementNames": ["ApiListener"],
      "attributes": [
        {
          "name": "method",
          "description": "HTTP method to listen to",
          "default": "GET",
          "enum": "org.frankframework.http.rest.ApiListener.HttpMethod"
        },
        {
          "name": "methods",
          "description": "HTTP method(s) to listen to. Inside XML Configurations: for multiple values, use a comma as separator.",
          "default": "GET",
          "enum": "org.frankframework.http.rest.ApiListener.HttpMethod"
        },
        {
          "name": "uriPattern",
          "mandatory": true,
          "description": "URI pattern to register this listener on, eq. <code>/my-listener/{something}/here</code>"
        },
        {
          "name": "consumes",
          "description": "The required contentType on requests, if it doesn't match a <code>415</code> status (Unsupported Media Type) is returned.",
          "default": "ANY",
          "enum": "org.frankframework.http.rest.MediaTypes"
        },
        {
          "name": "produces",
          "description": "The specified contentType on response. When <code>ANY</code> the response will determine the content-type when it's known and will never calculate it. If no match is found <code>*&#47;*</code> will be used.\n When <code>DETECT</code> the framework attempts to detect the MimeType (as well as charset) when not known.",
          "default": "ANY",
          "enum": "org.frankframework.http.rest.MediaTypes"
        },
        {
          "name": "characterEncoding",
          "description": "The specified character encoding on the response contentType header. NULL or empty\n values will be ignored.",
          "default": "UTF-8"
        },
        {
          "name": "updateEtag",
          "description": "Automatically generate and validate etags",
          "default": "<code>false</code>, can be changed by setting the property <code>api.etag.enabled</code>.",
          "type": "bool"
        },
        {
          "name": "authenticationMethod",
          "description": "Enables security for this listener. If you wish to use the application servers authorization roles [AUTHROLE], you need to enable them globally for all ApiListeners with the <code>servlet.ApiListenerServlet.securityRoles=IbisTester,IbisWebService</code> property",
          "default": "<code>NONE</code>",
          "enum": "org.frankframework.http.rest.ApiListener.AuthenticationMethods"
        },
        {
          "name": "authenticationRoles",
          "description": "Only active when AuthenticationMethod=AUTHROLE. Comma separated list of authorization roles which are granted for this service, eq. <code>IbisTester,IbisObserver</code>"
        },
        {
          "name": "multipartBodyName",
          "description": "Specify the form-part you wish to enter the pipeline",
          "default": "name of the first form-part"
        },
        {
          "name": "messageIdHeader",
          "description": "Name of the header which contains the Message-Id.",
          "default": "Message-Id"
        },
        {
          "name": "correlationIdHeader",
          "description": "Name of the header which contains the Correlation-Id.",
          "default": "Correlation-Id"
        },
        {
          "name": "operationId",
          "description": "Unique string used to identify the operation. The id MUST be unique among all operations described in the OpenApi schema."
        },
        {
          "name": "headerParams",
          "description": "Comma separated list of parameters passed as http header. Parameters will be stored in 'headers' sessionkey."
        },
        {
          "name": "contentDispositionHeaderSessionKey",
          "description": "Session key that provides the <code>Content-Disposition</code> header in the response"
        },
        {
          "name": "requiredIssuer",
          "description": "Issuer to validate JWT"
        },
        {
          "name": "jwksURL",
          "description": "Keysource URL to validate JWT"
        },
        {
          "name": "jwtHeader",
          "description": "Header to extract JWT from",
          "default": "<code>Authorization</code>"
        },
        {
          "name": "requiredClaims",
          "description": "Comma separated list of required claims"
        },
        {
          "name": "exactMatchClaims",
          "description": "Comma separated key value pairs to exactly match with JWT payload. e.g. <code>sub=UnitTest, aud=test</code>"
        },
        {
          "name": "anyMatchClaims",
          "description": "Comma separated key value pairs to one-of match with JWT payload. e.g. <code>appid=a,appid=b</code>"
        },
        {
          "name": "roleClaim",
          "description": "Claim name which specifies the role (maps to <code>IsUserInRolePipe</code>)"
        },
        {
          "name": "principalNameClaim",
          "description": "Claim name which specifies the principal name (maps to <code>GetPrincipalPipe</code>)"
        },
        {
          "name": "responseType",
          "description": "Optional configuration setting to have more control over how to send the response.\n Set this to return data as Multipart formdata or MTOM.\n See {@link HttpEntityType} for all supported values and how to use them.",
          "default": "{@link HttpEntityType#BINARY}.",
          "enum": "org.frankframework.http.HttpEntityType"
        },
        {
          "name": "responseMultipartXmlSessionKey",
          "description": "If response is sent as Multipart ({@link HttpEntityType#FORMDATA} or {@link HttpEntityType#MTOM}) an optional session key can describe the Multipart contents in XML. See {@link org.frankframework.http.HttpSender#setMultipartXmlSessionKey(String)}\n for details on the XML format specification."
        },
        {
          "name": "responseFirstBodyPartName",
          "description": "If response is sent as Multipart ({@link HttpEntityType#FORMDATA} or {@link HttpEntityType#MTOM}), when this option is set the pipeline result message will be prepended as first Multipart Bodypart with\n this name."
        },
        {
          "name": "responseMtomContentTransferEncoding",
          "description": "If the response is sent as {@link HttpEntityType#MTOM}, optionally specify the transfer-encoding of the first part."
        }
      ]
    },
    {
      "name": "ApiPrincipalPipe",
      "fullName": "org.frankframework.http.rest.ApiPrincipalPipe",
      "description": "Pipe to manage the ApiPrincipal handling",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["ApiPrincipalPipe"],
      "attributes": [
        {
          "name": "action"
        },
        {
          "name": "authenticationMethod"
        }
      ]
    },
    {
      "name": "ApiSoapWrapperPipe",
      "fullName": "org.frankframework.extensions.api.ApiSoapWrapperPipe",
      "description": "Extension to SoapWrapperPipe for API Management.\n <p>\n <b>Configuration </b><i>(where deviating from SoapWrapperPipe)</i><b>:</b>\n <table border=\\\"1\\\">\n <tr><th>attributes</th><th>description</th><th>default</th></tr>\n <tr><td>{@link #setSoapHeaderSessionKey(String) soapHeaderSessionKey}</td><td>if direction=<code>wrap</code>: </td><td>soapHeader</td></tr>\n <tr><td>{@link #setSoapHeaderStyleSheet(String) soapHeaderStyleSheet}</td><td>if direction=<code>wrap</code>: </td><td>/xml/xsl/api/soapHeader.xsl</td></tr>\n </table>\n </p><p>\n <b>/xml/xsl/api/soapHeader.xsl:</b>\n <table border=\\\"1\\\">\n <tr><th>element</th><th>level</th><th>value</th></tr>\n <tr><td>MessageHeader</td><td>0</td><td><code>MessageHeader</code> is only created when $conversationId is filled (otherwise skipped)</td></tr>\n <tr><td>&nbsp;</td><td>&nbsp;</td><td>xmlns=$namespace</td></tr>\n <tr><td>From</td><td>1</td><td><code>From</code> is only created when $from_in is filled (otherwise skipped) and it's created with the value of $from_out</td></tr>\n <tr><td>HeaderFields</td><td>1</td><td>&nbsp;</td></tr>\n <tr><td>ConversationId</td><td>2</td><td>$conversationId</td></tr>\n </table>\n <b>Parameters:</b>\n <table border=\\\"1\\\">\n <tr><th>name</th><th>default</th></tr>\n <tr><td>namespace</td><td>\\\"http://api.nn.nl/MessageHeader\\\"</td></tr>\n <tr><td>from_in</td><td>if applicable, copied from the original (received) SOAP Header</td></tr>\n <tr><td>from_out</td><td>property 'instance.name'</td></tr>\n <tr><td>conversationId</td><td>if applicable, copied from the original (received) SOAP Header</td></tr>\n </table>\n </p>",
      "parent": "org.frankframework.soap.SoapWrapperPipe",
      "elementNames": [
        "ApiSoapInputWrapper",
        "ApiSoapOutputWrapper",
        "ApiSoapWrapperPipe"
      ]
    },
    {
      "name": "ApiStreamPipe",
      "fullName": "org.frankframework.extensions.api.ApiStreamPipe",
      "deprecated": {
        "forRemoval": false,
        "since": ""
      },
      "description": "Extension to StreamPipe for API Management.\n <p>\n In {@link StreamPipe} for parameter <code>httpRequest</code> and attribute\n <code>extractFirstStringPart=true</code> the first part is returned to the pipeline.\n In this class the first part is checked. If it contains a 'MessageID' with <a href=\\\"http://www.w3.org/2005/08/addressing\\\">namespace</a>,\n then the message to return to the pipeline is retrieved from the MessageStore.\n </p><p>\n This class is created for applications which can not perform one multipart call with a business request in the first (string) part\n and one or more filestreams in the next (file) parts. Instead of one multipart call, two calls are performed:\n <ol>\n    <li>text/xml call with the business request. The API Management application returns on this call an unique messageId (which is\n     saved in the MessageStore together with the business request)</li>\n    <li>multipart call with in the first (string) part the unique messageId and in the following (file) parts the filestreams</li>\n </ol>\n </p>",
      "parent": "org.frankframework.pipes.StreamPipe",
      "elementNames": ["ApiStreamPipe"],
      "attributes": [
        {
          "name": "jmsRealm"
        }
      ]
    },
    {
      "name": "ApiWsdlXmlValidator",
      "fullName": "org.frankframework.extensions.api.ApiWsdlXmlValidator",
      "description": "Extension to WsdlXmlValidator for API Management.\n\n The SOAP header can only contain the following schema (or it's empty):\n <table border=\\\"1\\\">\n <tr><th>element</th><th>level</th><th>mandatory</th></tr>\n <tr><td>MessageHeader</td><td>0</td><td>yes</td></tr>\n <tr><td>xmlns=\\\"http://api.nn.nl/MessageHeader\\\"</td><td>&nbsp;</td><td>yes</td></tr>\n <tr><td>From</td><td>1</td><td>no</td></tr>\n <tr><td>HeaderFields</td><td>1</td><td>yes</td></tr>\n <tr><td>ConversationId</td><td>2</td><td>yes</td></tr>\n </table>",
      "parent": "org.frankframework.pipes.WsdlXmlValidator",
      "elementNames": [
        "ApiWsdlXmlInputValidator",
        "ApiWsdlXmlOutputValidator",
        "ApiWsdlXmlValidatorPipe"
      ],
      "attributes": [
        {
          "name": "multipart",
          "description": "indicates whether the message is multipart/form-data. If so, the wsdl only represents the first part, other parts are attachments. This attribute is only used for generating the 'real' wsdl which is available in the ibis console (../rest/webservices)",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "AsyncSenderWithListenerPipe",
      "fullName": "org.frankframework.pipes.AsyncSenderWithListenerPipe",
      "description": "Sends a message using an asynchronous {@link ISender sender} and receives a reply from a {@link ICorrelatedPullingListener listener}.",
      "parent": "org.frankframework.pipes.MessageSendingPipe",
      "elementNames": ["AsyncSenderWithListenerPipe"],
      "attributes": [
        {
          "name": "correlationIDStyleSheet",
          "description": "Stylesheet to extract correlationid from message"
        },
        {
          "name": "correlationIDXPath",
          "description": "XPath expression to extract correlationid from message"
        },
        {
          "name": "correlationIDNamespaceDefs",
          "description": "Namespace defintions for correlationIDXPath. Must be in the form of a comma or space separated list of <code>prefix=namespaceUri</code>-definitions"
        },
        {
          "name": "correlationIDSessionKey",
          "description": "Key of a PipelineSession-variable. If specified, the value of the PipelineSession variable is used as input for the XPathExpression or stylesheet, instead of the current input message"
        },
        {
          "name": "labelStyleSheet",
          "description": "Stylesheet to extract label from message"
        },
        {
          "name": "labelXPath",
          "description": "XPath expression to extract label from message"
        },
        {
          "name": "labelNamespaceDefs",
          "description": "Namespace definitions for labelXPath. Must be in the form of a comma or space separated list of <code>prefix=namespaceUri</code>-definitions"
        },
        {
          "name": "auditTrailXPath",
          "description": "XPath expression to extract audit trail from message"
        },
        {
          "name": "auditTrailNamespaceDefs",
          "description": "Namespace defintions for auditTrailXPath. Must be in the form of a comma or space separated list of <code>prefix=namespaceUri</code>-definitions"
        },
        {
          "name": "auditTrailSessionKey",
          "description": "Key of a PipelineSession-variable. If specified, the value of the PipelineSession variable is used as audit trail (instead of the default 'no audit trail)"
        },
        {
          "name": "useInputForExtract",
          "description": "If set <code>true</code>, the input of the Pipe is used to extract audit trail, correlationid and label (instead of the wrapped input)",
          "default": "true",
          "type": "bool"
        }
      ],
      "children": [
        {
          "reintroduced": true,
          "multiple": false,
          "roleName": "messageLog",
          "description": "log of all messages sent",
          "type": "org.frankframework.core.ITransactionalStorage"
        },
        {
          "reintroduced": true,
          "multiple": false,
          "roleName": "inputWrapper",
          "description": "specification of Pipe to wrap or unwrap request messages",
          "type": "org.frankframework.core.IWrapperPipe"
        },
        {
          "reintroduced": true,
          "multiple": false,
          "roleName": "inputValidator",
          "description": "specification of Pipe to validate request messages, or request and response message if configured as mixed mode validator",
          "type": "org.frankframework.core.IValidator"
        },
        {
          "mandatory": true,
          "reintroduced": true,
          "multiple": false,
          "roleName": "sender",
          "description": "The sender that should send the message",
          "type": "org.frankframework.core.ISender"
        },
        {
          "mandatory": true,
          "multiple": false,
          "roleName": "listener",
          "description": "Listener for responses on the request sent",
          "type": "org.frankframework.core.ICorrelatedPullingListener"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "EIP",
          "value": "Endpoint"
        }
      ]
    },
    {
      "name": "Base64Pipe",
      "fullName": "org.frankframework.pipes.Base64Pipe",
      "description": "Pipe that performs base64 encoding and decoding.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["Base64Pipe"],
      "attributes": [
        {
          "name": "direction",
          "default": "ENCODE",
          "enum": "org.frankframework.pipes.Base64Pipe.Direction"
        },
        {
          "name": "charset",
          "description": "Character encoding to be used to when reading input from strings for direction=encode or writing data for direction=decode."
        },
        {
          "name": "lineSeparator",
          "description": "(Only used when direction=encode) Defines separator between lines. Special values: <code>auto</code>: platform default, <code>dos</code>: crlf, <code>unix</code>: lf",
          "default": "auto"
        },
        {
          "name": "lineLength",
          "description": "(Only used when direction=encode) Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). If linelength &lt;= 0, then the output will not be divided into lines",
          "default": "76",
          "type": "int"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "BatchBlobTransformerPipe",
      "fullName": "org.frankframework.jdbc.BatchBlobTransformerPipe",
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "BatchBlobTransformerPipe: Not tested and maintained, please look for alternatives if you use BatchBlobTransformerPipe inform WeAreFrank! that there are no suitable alternatives for your use-case"
      },
      "description": "Pipe that batch-transforms the lines in a BLOB.",
      "parent": "org.frankframework.jdbc.BatchTransformerPipeBase",
      "elementNames": ["BatchBlobTransformerPipe"],
      "attributes": [
        {
          "name": "blobCharset",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "please use attribute 'charset' instead"
          }
        },
        {
          "name": "blobsCompressed",
          "description": "controls whether blobdata is stored compressed in the database",
          "default": "true",
          "type": "bool"
        }
      ]
    },
    {
      "name": "BatchClobTransformerPipe",
      "fullName": "org.frankframework.jdbc.BatchClobTransformerPipe",
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "BatchClobTransformerPipe: Not tested and maintained, please look for alternatives if you use BatchClobTransformerPipe inform WeAreFrank! that there are no suitable alternatives for your use-case"
      },
      "description": "Pipe that batch-transforms the lines in a CLOB.\n\n N.B. the readerFactory is not used by this class.",
      "parent": "org.frankframework.jdbc.BatchTransformerPipeBase",
      "elementNames": ["BatchClobTransformerPipe"]
    },
    {
      "name": "BatchFileTransformerPipe",
      "fullName": "org.frankframework.batch.BatchFileTransformerPipe",
      "description": "Pipe for transforming a (batch)file with records. Records in the file must be separated\n with new line characters.\n You can use the &lt;child&gt; tag to register RecordHandlers, RecordHandlerManagers, ResultHandlers\n and RecordHandlingFlow elements. This is deprecated, however. Since 4.7 one should use &lt;manager&gt;,\n &lt;recordHandler&gt;, &lt;resultHandler&gt; and &lt;flow&gt;\n\n For files containing only a single type of lines, a simpler configuration without managers and flows\n can be specified. A single recordHandler with key=\\\"*\\\" and (optional) a single resultHandler need to be specified.\n Each line will be handled by this recordHandler and resultHandler.",
      "parent": "org.frankframework.batch.StreamTransformerPipe",
      "elementNames": ["BatchFileTransformerPipe"],
      "attributes": [
        {
          "name": "move2dirAfterTransform",
          "description": "Directory in which the transformed file(s) is stored"
        },
        {
          "name": "move2dirAfterError",
          "description": "Directory to which the inputfile is moved in case an error occurs"
        },
        {
          "name": "numberOfBackups",
          "description": "Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept.",
          "default": "5",
          "type": "int"
        },
        {
          "name": "overwrite",
          "description": "If set <code>true</code>, the destination file will be deleted if it already exists",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "delete",
          "description": "If set <code>true</code>, the file processed will be deleted after being processed, and not stored",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "BatchTransformerPipeBase",
      "fullName": "org.frankframework.jdbc.BatchTransformerPipeBase",
      "abstract": true,
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "Not tested and maintained, please look for alternatives if you use this class"
      },
      "description": "abstract base class for JDBC batch transforming pipes.",
      "parent": "org.frankframework.batch.StreamTransformerPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "query",
          "mandatory": true,
          "description": "The SQL query text to be executed each time sendMessage() is called"
        },
        {
          "name": "datasourceName",
          "description": "JNDI name of datasource to be used, can be configured via jmsRealm, too",
          "default": "<code>jdbc.datasource.default</code>"
        },
        {
          "name": "jmsRealm",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "We discourage the use of jmsRealms for datasources. To specify a datasource other then the default, use the datasourceName attribute directly, instead of referring to a realm"
          },
          "description": "loads JNDI (and other) properties from a JmsRealm"
        }
      ]
    },
    {
      "name": "BisJmsListener",
      "fullName": "org.frankframework.extensions.bis.BisJmsListener",
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "Please change to JmsListener combined with BisWrapperPipe"
      },
      "description": "Bis (Business Integration Services) extension of JmsListener.\n <br/>\n Example request:<br/>\n <pre><code>&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;\n  \t&lt;soap:Header&gt;\n  \t\t&lt;bis:MessageHeader xmlns:bis=&quot;http://www.ing.com/CSP/XSD/General/Message_2&quot;&gt;\n  \t\t\t&lt;bis:From&gt;\n  \t\t\t\t&lt;bis:Id&gt;PolicyConversion_01_ServiceAgents_01&lt;/bis:Id&gt;\n  \t\t\t&lt;/bis:From&gt;\n  \t\t\t&lt;bis:HeaderFields&gt;\n  \t\t\t\t&lt;bis:ConversationId&gt;1790257_10000050_04&lt;/bis:ConversationId&gt;\n  \t\t\t\t&lt;bis:MessageId&gt;1790257&lt;/bis:MessageId&gt;\n  \t\t\t\t&lt;bis:Timestamp&gt;2011-03-02T10:26:31.464+01:00&lt;/bis:Timestamp&gt;\n  \t\t\t&lt;/bis:HeaderFields&gt;\n  \t\t&lt;/bis:MessageHeader&gt;\n  \t&lt;/soap:Header&gt;\n \t\t&lt;soap:Body&gt;\n  \t\t&lt;pcr:GetRequest xmlns:pcr=&quot;http://www.ing.com/nl/pcretail/ts/migrationauditdata_01&quot;&gt;\n  \t\t\t&lt;pcr:PolicyDetails&gt;\n  \t\t\t\t&lt;pcr:RVS_PARTY_ID&gt;1790257&lt;/pcr:RVS_PARTY_ID&gt;\n  \t\t\t\t&lt;pcr:RVS_POLICY_NUMBER&gt;10000050&lt;/pcr:RVS_POLICY_NUMBER&gt;\n  \t\t\t\t&lt;pcr:RVS_BRANCH_CODE&gt;04&lt;/pcr:RVS_BRANCH_CODE&gt;\n  \t\t\t&lt;/pcr:PolicyDetails&gt;\n  \t\t&lt;/pcr:GetRequest&gt;\n  \t&lt;/soap:Body&gt;\n &lt;/soap:Envelope&gt;</code></pre>\n <br/>\n The element MessageHeader in the soap header is mandatory.\n <br/>\n Example reply:<br/>\n <pre><code>&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;\n  \t&lt;soap:Header&gt;\n  \t\t&lt;bis:MessageHeader xmlns:bis=&quot;http://www.ing.com/CSP/XSD/General/Message_2&quot;&gt;\n  \t\t\t&lt;bis:From&gt;\n  \t\t\t\t&lt;bis:Id&gt;IJA_DB4CONV&lt;/bis:Id&gt;\n  \t\t\t&lt;/bis:From&gt;\n  \t\t\t&lt;bis:HeaderFields&gt;\n  \t\t\t\t&lt;bis:ConversationId&gt;1790257_10000050_04&lt;/bis:ConversationId&gt;\n  \t\t\t\t&lt;bis:MessageId&gt;rn09ce_0a3b8d2d--33192359_12e588118c1_-612f&lt;/bis:MessageId&gt;\n  \t\t\t\t&lt;bis:ExternalRefToMessageId&gt;1790257&lt;/bis:ExternalRefToMessageId&gt;\n  \t\t\t\t&lt;bis:Timestamp&gt;2011-03-02T10:26:31&lt;/bis:Timestamp&gt;\n  \t\t\t&lt;/bis:HeaderFields&gt;\n  \t\t&lt;/bis:MessageHeader&gt;\n  \t&lt;/soap:Header&gt;\n  \t&lt;soap:Body&gt;\n  \t\t&lt;GetResponse xmlns=&quot;http://www.ing.com/nl/pcretail/ts/migrationcasedata_01&quot;&gt;\n  \t\t\t&lt;CaseData&gt;...&lt;/CaseData&gt;\n  \t\t\t&lt;bis:Result xmlns:bis=&quot;http://www.ing.com/CSP/XSD/General/Message_2&quot;&gt;\n  \t\t\t\t&lt;bis:Status&gt;OK&lt;/bis:Status&gt;\n  \t\t\t&lt;/bis:Result&gt;\n  \t\t&lt;/GetResponse&gt;\n  \t&lt;/soap:Body&gt;\n &lt;/soap:Envelope&gt;</code></pre>\n <br/>\n The elements MessageHeader in the soap header and Result in the soap body are mandatory.\n <br/>\n Example element Result in case of an error reply:<br/>\n <pre><code>&lt;bis:Result xmlns:bis=&quot;http://www.ing.com/CSP/XSD/General/Message_2&quot;&gt;\n  \t&lt;bis:Status&gt;ERROR&lt;/bis:Status&gt;\n  \t&lt;bis:ErrorList&gt;\n  \t\t&lt;bis:Error&gt;\n  \t\t\t&lt;bis:Code&gt;ERR6003&lt;/bis:Code&gt;\n  \t\t\t&lt;bis:Reason&gt;Invalid Request Message&lt;/bis:Reason&gt;\n  \t\t\t&lt;bis:Service&gt;\n  \t\t\t\t&lt;bis:Name&gt;migrationauditdata_01&lt;/bis:Name&gt;\n  \t\t\t\t&lt;bis:Context&gt;1&lt;/bis:Context&gt;\n  \t\t\t\t&lt;bis:Action&gt;\n  \t\t\t\t\t&lt;bis:Name&gt;SetPolicyDetails_Action&lt;/bis:Name&gt;\n  \t\t\t\t\t&lt;bis:Version&gt;1&lt;/bis:Version&gt;\n  \t\t\t\t&lt;/bis:Action&gt;\n  \t\t\t&lt;/bis:Service&gt;\n  \t\t\t&lt;bis:DetailList&gt;\n  \t\t\t\t&lt;bis:Detail&gt;\n  \t\t\t\t\t&lt;bis:Code/&gt;\n  \t\t\t\t\t&lt;bis:Text&gt;Pipe [Validate tibco request] msgId [Test Tool correlation id] got invalid xml according to schema [....&lt;/bis:Text&gt;\n  \t\t\t\t&lt;/bis:Detail&gt;\n  \t\t\t&lt;/bis:DetailList&gt;\n  \t\t&lt;/bis:Error&gt;\n  \t&lt;/bis:ErrorList&gt;\n &lt;/bis:Result&gt;</code></pre>\n <br/>\n <p><b>Configuration:</b>\n <table border=\\\"1\\\">\n <tr><th>attributes</th><th>description</th><th>default</th></tr>\n <tr><td>className</td><td>org.frankframework.extensions.bis.BisSoapJmsListener</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setSoap(boolean) soap}</td><td>when <code>true</code>, messages sent are put in a SOAP envelope</td><td><code>true</code></td></tr>\n <tr><td>{@link #setRequestXPath(String) requestXPath}</td><td>xpath expression to extract the message which is passed to the pipeline. When soap=true the initial message is the content of the soap body. If empty, the content of the soap body is passed (without the root body)</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setRequestNamespaceDefs(String) requestNamespaceDefs}</td><td>namespace defintions for requestXPath. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setMessageHeaderInSoapBody(boolean) messageHeaderInSoapBody}</td><td>when <code>true</code>, the MessageHeader is put in the SOAP body instead of in the SOAP header (first one is the old BIS standard)</td><td><code>false</code></td></tr>\n <tr><td>{@link #setResultInPayload(boolean) resultInPayload}</td><td>when <code>true</code>, the Result is put in the payload (as last child in root tag) instead of in the SOAP body as sibling of the payload (last one is the old BIS standard)</td><td><code>true</code></td></tr>\n <tr><td>{@link #setOmitResult(boolean) omitResult}</td><td>when <code>true</code>, the Result is omitted and instead of Result/Status 'ERROR' a ListenerException is thrown (this functionality will be used during migration from IFSA to TIBCO)</td><td><code>false</code></td></tr>\n <tr><td>{@link #setRemoveRequestNamespaces(boolean) removeRequestNamespaces}</td><td>when set <code>true</code> namespaces (and prefixes) in the request are removed (this functionality will be used during migration from IFSA to TIBCO)</td><td>false</td></tr>\n <tr><td>{@link #setLayByNamespace(boolean) layByNamespace}</td><td>when <code>true</code>, the namespace of the request is laid by and afterwards added to the reply (this functionality will be used during migration from IFSA to TIBCO)</td><td><code>false</code></td></tr>\n <tr><td>{@link #setErrorCodeSessionKey(String) errorCodeSessionKey}</td><td>key of session variable to store error code in (if an error occurs)</td><td>bisErrorCode</td></tr>\n <tr><td>{@link #setErrorTextSessionKey(String) errorTextSessionKey}</td><td>key of session variable to store error text in (if an error occurs). If not specified, the following error text is derived from the error code:\n   <table border=\\\"1\\\">\n   <tr><th>errorCode</th><th>errorText</th></tr>\n   <tr><td>ERR6002</td><td>Service Interface Request Time Out</td></tr>\n   <tr><td>ERR6003</td><td>Invalid Request Message</td></tr>\n   <tr><td>ERR6004</td><td>Invalid Backend system response</td></tr>\n   <tr><td>ERR6005</td><td>Backend system failure response</td></tr>\n   <tr><td>ERR6999</td><td>Unspecified Errors</td></tr>\n  </table></td><td>&nbsp;</td></tr>\n <tr><td>{@link #setErrorReasonSessionKey(String) errorReasonSessionKey}</td><td>key of session variable to store error reason in (if an error occurs)</td><td>bisErrorReason</td></tr>\n <tr><td>{@link #setServiceName(String) serviceName}</td><td>name of the service; used in the error reply</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setActionName(String) actionName}</td><td>name of the operation; used in the error reply</td><td>&nbsp;</td></tr>\n </p>",
      "parent": "org.frankframework.jms.PushingJmsListener",
      "elementNames": ["BisJmsListener"],
      "attributes": [
        {
          "name": "requestXPath"
        },
        {
          "name": "requestNamespaceDefs"
        },
        {
          "name": "messageHeaderInSoapBody",
          "type": "bool"
        },
        {
          "name": "resultInPayload",
          "type": "bool"
        },
        {
          "name": "omitResult",
          "type": "bool"
        },
        {
          "name": "removeRequestNamespaces",
          "type": "bool"
        },
        {
          "name": "layByNamespace",
          "type": "bool"
        },
        {
          "name": "errorCodeSessionKey"
        },
        {
          "name": "errorTextSessionKey"
        },
        {
          "name": "errorReasonSessionKey"
        },
        {
          "name": "serviceName"
        },
        {
          "name": "actionName"
        }
      ]
    },
    {
      "name": "BisJmsSender",
      "fullName": "org.frankframework.extensions.bis.BisJmsSender",
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "Please change to JmsSender combined with BisWrapperPipe"
      },
      "description": "Bis (Business Integration Services) extension of JmsSender.\n <br/>\n For example request and reply, see {@link BisJmsListener}.\n <br/>\n If synchronous=true and one of the following conditions is true a SenderException is thrown:\n - Result/Status in the reply soap body equals 'ERROR'\n - faultcode in the reply soap fault is not empty\n <br/>\n\n <p><b>Configuration:</b>\n <table border=\\\"1\\\">\n <tr><th>attributes</th><th>description</th><th>default</th></tr>\n <tr><td>className</td><td>org.frankframework.extensions.bis.BisSoapJmsSender</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setSoap(boolean) soap}</td><td>when <code>true</code>, messages sent are put in a SOAP envelope</td><td><code>true</code></td></tr>\n <tr><td>{@link #setResponseXPath(String) responseXPath}</td><td>xpath expression to extract the message from the reply which is passed to the pipeline. When soap=true the initial message is the content of the soap body. If empty, the content of the soap body is passed (without the root body)</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setResponseNamespaceDefs(String) responseNamespaceDefs}</td><td>namespace defintions for responseXPath. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setMessageHeaderInSoapBody(boolean) messageHeaderInSoapBody}</td><td>when <code>true</code>, the MessageHeader of the request is put in the SOAP body instead of in the SOAP header (first one is the old BIS standard)</td><td><code>false</code></td></tr>\n <tr><td>{@link #setResultInPayload(boolean) resultInPayload}</td><td>when <code>true</code>, the Result tag in the reply will be put in the payload (as last child in root tag) instead of in the SOAP body as sibling of the payload (last one is the old BIS standard)</td><td><code>true</code></td></tr>\n <tr><td>{@link #setErrorListSessionKey(String) errorListSessionKey}</td><td>key of session variable to store ErrorList in when Result/Status in the reply equals 'ERROR'</td><td>bisErrorList</td></tr>\n <tr><td>{@link #setConversationIdSessionKey(String) conversationIdSessionKey}</td><td>key of session variable in which ConversationId is stored; used in the MessageHeader of the request</td><td>bisConversationId</td></tr>\n <tr><td>{@link #setExternalRefToMessageIdSessionKey(String) externalRefToMessageIdSessionKey}</td><td>key of session variable in which ExternalRefToMessageId is stored; used in the MessageHeader of the request</td><td>bisExternalRefToMessageId</td></tr>\n <tr><td>{@link #setRequestNamespace(String) requestNamespace}</td><td>if not empty, this namespace is added to the request (this functionality will be used during migration from IFSA to TIBCO)</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setRemoveResponseNamespaces(boolean) removeResponseNamespaces}</td><td>when set <code>true</code> namespaces (and prefixes) in the response are removed (this functionality will be used during migration from IFSA to TIBCO)</td><td>false</td></tr>\n </p>",
      "parent": "org.frankframework.jms.JmsSender",
      "elementNames": ["BisJmsSender"],
      "attributes": [
        {
          "name": "responseXPath"
        },
        {
          "name": "responseNamespaceDefs"
        },
        {
          "name": "messageHeaderInSoapBody",
          "type": "bool"
        },
        {
          "name": "resultInPayload",
          "type": "bool"
        },
        {
          "name": "errorListSessionKey"
        },
        {
          "name": "externalRefToMessageIdSessionKey"
        },
        {
          "name": "conversationIdSessionKey"
        },
        {
          "name": "requestNamespace"
        },
        {
          "name": "removeResponseNamespaces",
          "type": "bool"
        }
      ]
    },
    {
      "name": "BisWrapperPipe",
      "fullName": "org.frankframework.extensions.bis.BisWrapperPipe",
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "Please change to EsbSoapWrapperPipe"
      },
      "description": "Pipe to wrap or unwrap a message conformable to the BIS (Business Integration Services) standard.\n <p>\n Example request in case of bis provider:<br/><code><pre>\n\t&lt;soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"&gt;\n\t\t&lt;soap:Header&gt;\n\t\t\t&lt;bis:MessageHeader xmlns:bis=\\\"http://www.ing.com/CSP/XSD/General/Message_2\\\"&gt;\n\t\t\t\t&lt;bis:From&gt;\n\t\t\t\t\t&lt;bis:Id&gt;PolicyConversion_01_ServiceAgents_01&lt;/bis:Id&gt;\n\t\t\t\t&lt;/bis:From&gt;\n\t\t\t\t&lt;bis:HeaderFields&gt;\n\t\t\t\t\t&lt;bis:ConversationId&gt;1790257_10000050_04&lt;/bis:ConversationId&gt;\n\t\t\t\t\t&lt;bis:MessageId&gt;1790257&lt;/bis:MessageId&gt;\n\t\t\t\t\t&lt;bis:Timestamp&gt;2011-03-02T10:26:31.464+01:00&lt;/bis:Timestamp&gt;\n\t\t\t\t&lt;/bis:HeaderFields&gt;\n\t\t\t&lt;/bis:MessageHeader&gt;\n\t\t&lt;/soap:Header&gt;\n\t\t&lt;soap:Body&gt;\n\t\t\t<i>&lt;pcr:GetRequest xmlns:pcr=\\\"http://www.ing.com/nl/pcretail/ts/migrationauditdata_01\\\"&gt;\n\t\t\t\t&lt;pcr:PolicyDetails&gt;\n\t\t\t\t\t&lt;pcr:RVS_PARTY_ID&gt;1790257&lt;/pcr:RVS_PARTY_ID&gt;\n\t\t\t\t\t&lt;pcr:RVS_POLICY_NUMBER&gt;10000050&lt;/pcr:RVS_POLICY_NUMBER&gt;\n\t\t\t\t\t&lt;pcr:RVS_BRANCH_CODE&gt;04&lt;/pcr:RVS_BRANCH_CODE&gt;\n\t\t\t\t&lt;/pcr:PolicyDetails&gt;\n\t\t\t&lt;/pcr:GetRequest&gt;</i>\n\t\t&lt;/soap:Body&gt;\n\t&lt;/soap:Envelope&gt;\n </pre></code><br/>\n The element MessageHeader in the soap header is mandatory.\n </p><p>\n Example response in case of bis requester:<br/><code><pre>\n\t&lt;soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"&gt;\n\t\t&lt;soap:Header&gt;\n\t\t\t&lt;bis:MessageHeader xmlns:bis=\\\"http://www.ing.com/CSP/XSD/General/Message_2\\\"&gt;\n\t\t\t\t&lt;bis:From&gt;\n\t\t\t\t\t&lt;bis:Id&gt;IJA_DB4CONV&lt;/bis:Id&gt;\n\t\t\t\t&lt;/bis:From&gt;\n\t\t\t\t&lt;bis:HeaderFields&gt;\n\t\t\t\t\t&lt;bis:ConversationId&gt;1790257_10000050_04&lt;/bis:ConversationId&gt;\n\t\t\t\t\t&lt;bis:MessageId&gt;rn09ce_0a3b8d2d--33192359_12e588118c1_-612f&lt;/bis:MessageId&gt;\n\t\t\t\t\t&lt;bis:ExternalRefToMessageId&gt;1790257&lt;/bis:ExternalRefToMessageId&gt;\n\t\t\t\t\t&lt;bis:Timestamp&gt;2011-03-02T10:26:31&lt;/bis:Timestamp&gt;\n\t\t\t\t&lt;/bis:HeaderFields&gt;\n\t\t\t&lt;/bis:MessageHeader&gt;\n\t\t&lt;/soap:Header&gt;\n\t\t&lt;soap:Body&gt;\n\t\t\t<i>&lt;GetResponse xmlns=\\\"http://www.ing.com/nl/pcretail/ts/migrationcasedata_01\\\"&gt;</i>\n\t\t\t\t<i>&lt;CaseData&gt;...&lt;/CaseData&gt;</i>\n\t\t\t\t&lt;bis:Result xmlns:bis=\\\"http://www.ing.com/CSP/XSD/General/Message_2\\\"&gt;\n\t\t\t\t\t&lt;bis:Status&gt;OK&lt;/bis:Status&gt;\n\t\t\t\t&lt;/bis:Result&gt;\n\t\t\t<i>&lt;/GetResponse&gt;</i>\n\t\t&lt;/soap:Body&gt;\n\t&lt;/soap:Envelope&gt;\n </pre></code><br/>\n The elements MessageHeader in the soap header and Result in the soap body are mandatory.\n </p><p>\n Example element Result in case of an error response:<br/><code><pre>\n\t&lt;bis:Result xmlns:bis=\\\"http://www.ing.com/CSP/XSD/General/Message_2\\\"&gt;\n\t\t&lt;bis:Status&gt;ERROR&lt;/bis:Status&gt;\n\t\t&lt;bis:ErrorList&gt;\n\t\t\t&lt;bis:Error&gt;\n\t\t\t\t&lt;bis:Code&gt;ERR6003&lt;/bis:Code&gt;\n\t\t\t\t&lt;bis:Reason&gt;Invalid Request Message&lt;/bis:Reason&gt;\n\t\t\t\t&lt;bis:Service&gt;\n\t\t\t\t\t&lt;bis:Name&gt;migrationauditdata_01&lt;/bis:Name&gt;\n\t\t\t\t\t&lt;bis:Context&gt;1&lt;/bis:Context&gt;\n\t\t\t\t\t&lt;bis:Action&gt;\n\t\t\t\t\t\t&lt;bis:Name&gt;SetPolicyDetails_Action&lt;/bis:Name&gt;\n\t\t\t\t\t\t&lt;bis:Version&gt;1&lt;/bis:Version&gt;\n\t\t\t\t\t&lt;/bis:Action&gt;\n\t\t\t\t&lt;/bis:Service&gt;\n\t\t\t\t&lt;bis:DetailList&gt;\n\t\t\t\t\t&lt;bis:Detail&gt;\n\t\t\t\t\t\t&lt;bis:Code/&gt;\n\t\t\t\t\t\t&lt;bis:Text&gt;Pipe [Validate tibco request] msgId [Test Tool correlation id] got invalid xml according to schema [....&lt;/bis:Text&gt;\n\t\t\t\t\t&lt;/bis:Detail&gt;\n\t\t\t\t&lt;/bis:DetailList&gt;\n\t\t\t&lt;/bis:Error&gt;\n\t\t&lt;/bis:ErrorList&gt;\n\t&lt;/bis:Result&gt;\n </pre></code>\n </p><p>\n If direction=unwrap and one of the following conditions is true a PipeRunException is thrown:\n <ul><li>Result/Status in the response soap body equals 'ERROR'</li>\n <li>faultcode in the response soap fault is not empty</li></ul>\n </p>\n <p><b>Configuration:</b>\n <table border=\\\"1\\\">\n <tr><th>attributes</th><th>description</th><th>default</th></tr>\n <tr><td>{@link #setName(String) name}</td><td>name of the Pipe</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setDirection(Direction) direction}</td><td>either <code>wrap</code> or <code>unwrap</code></td><td>wrap</td></tr>\n <tr><td>{@link #setInputXPath(String) inputXPath}</td><td>(only used when direction=unwrap) xpath expression to extract the message which is returned. The initial message is the content of the soap body. If empty, the content of the soap body is passed (without the root body)</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setInputNamespaceDefs(String) inputNamespaceDefs}</td><td>(only used when direction=unwrap) namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setBisMessageHeaderInSoapBody(boolean) bisMessageHeaderInSoapBody}</td><td>when <code>true</code>, the bis message header is put in the SOAP body instead of in the SOAP header (first one is the old bis standard)</td><td><code>false</code></td></tr>\n <tr><td>{@link #setBisMessageHeaderSessionKey(String) bisMessageHeaderSessionKey}</td><td>\n <table>\n <tr><td><code>direction=unwrap</code></td><td>name of the session key to store the bis message header from the request in</td></tr>\n <tr><td><code>direction=wrap</code></td><td>name of the session key the original bis message header from the request is stored in; used to create the bis message header for the response</td></tr>\n </table>\n </td><td>bisMessageHeader</td></tr>\n <tr><td>{@link #setBisResultInPayload(boolean) bisResultInPayload}</td><td>when <code>true</code>, the bis result is put in the payload (as last child in root tag) instead of in the SOAP body as sibling of the payload (last one is the old bis standard)</td><td><code>true</code></td></tr>\n <tr><td>{@link #setBisConversationIdSessionKey(String) bisConversationIdSessionKey}</td><td>(only used when direction=wrap and the original bis message header from the request doesn't exist) key of session variable to retrieve ConversationId for the bis message header from</td><td>bisConversationId</td></tr>\n <tr><td>{@link #setBisExternalRefToMessageIdSessionKey(String) bisExternalRefToMessageIdSessionKey}</td><td>(only used when direction=wrap and the original bis message header from the request doesn't exist) key of session variable to retrieve ExternalRefToMessageId for the bis message header from</td><td>bisExternalRefToMessageId</td></tr>\n <tr><td>{@link #setBisErrorCodeSessionKey(String) bisErrorCodeSessionKey}</td><td>(only used when direction=wrap) key of session variable to store bis error code in (if an error occurs)</td><td>bisErrorCode</td></tr>\n <tr><td>{@link #setBisErrorTextSessionKey(String) bisErrorTextSessionKey}</td><td>(only used when direction=wrap) key of session variable to store bis error text in (if an error occurs). If not specified or no value retrieved, the following error text is derived from the error code:\n   <table border=\\\"1\\\">\n   <tr><th>errorCode</th><th>errorText</th></tr>\n   <tr><td>ERR6002</td><td>Service Interface Request Time Out</td></tr>\n   <tr><td>ERR6003</td><td>Invalid Request Message</td></tr>\n   <tr><td>ERR6004</td><td>Invalid Backend system response</td></tr>\n   <tr><td>ERR6005</td><td>Backend system failure response</td></tr>\n   <tr><td>ERR6999</td><td>Unspecified Errors</td></tr>\n  </table></td><td>bisErrorText</td></tr>\n <tr><td>{@link #setBisErrorReasonSessionKey(String) bisErrorReasonSessionKey}</td><td>(only used when direction=wrap and an error occurs) key of session variable to store bis error reason in</td><td>bisErrorReason</td></tr>\n <tr><td>{@link #setOutputRoot(String) outputRoot}</td><td>(only used when direction=wrap and an error occurs) name of output root element in the SOAP body. If empty, the input message is used in the response</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setOutputNamespace(String) outputNamespace}</td><td>(only used when direction=wrap and an error occurs) namespace of the output root element in the SOAP body</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setBisServiceName(String) bisServiceName}</td><td>(only used when direction=wrap) name of the bis service; used in the bis error response</td><td>&nbsp;</td></tr>\n <tr><td>{@link #setBisActionName(String) bisActionName}</td><td>(only used when direction=wrap) name of the bis operation; used in the bis error response</td><td>&nbsp;</td></tr>\n </table></p>\n <p><b>The following attributes are created for the purpose of the migration from IFSA to TIBCO (and will be removed afterwards):</b>\n <table border=\\\"1\\\">\n <tr><th>attributes</th><th>description</th><th>default</th></tr>\n <tr><td>{@link #setRemoveOutputNamespaces(boolean) removeOutputNamespaces}</td><td>(only used when direction=unwrap) when set <code>true</code> namespaces (and prefixes) in the output are removed</td><td>false</td></tr>\n <tr><td>{@link #setOmitResult(boolean) omitResult}</td><td>(only used when direction=wrap) when <code>true</code>, the Result is omitted and instead of Result/Status 'ERROR' a PipeRunException is thrown</td><td><code>false</code></td></tr>\n <tr><td>{@link #setAddOutputNamespace(boolean) addOutputNamespace}</td><td>(only used when direction=unwrap) when set <code>true</code> the <code>outputNamespace</code> is added to the output root element in the SOAP body</td><td>false</td></tr>\n </table></p>",
      "parent": "org.frankframework.soap.SoapWrapperPipe",
      "elementNames": ["BisInputWrapper", "BisOutputWrapper", "BisWrapperPipe"],
      "attributes": [
        {
          "name": "inputXPath"
        },
        {
          "name": "inputNamespaceDefs"
        },
        {
          "name": "outputRoot"
        },
        {
          "name": "bisMessageHeaderInSoapBody",
          "type": "bool"
        },
        {
          "name": "bisMessageHeaderSessionKey"
        },
        {
          "name": "bisResultInPayload",
          "type": "bool"
        },
        {
          "name": "bisConversationIdSessionKey"
        },
        {
          "name": "bisExternalRefToMessageIdSessionKey"
        },
        {
          "name": "bisErrorCodeSessionKey"
        },
        {
          "name": "bisErrorTextSessionKey"
        },
        {
          "name": "bisErrorReasonSessionKey"
        },
        {
          "name": "bisServiceName"
        },
        {
          "name": "bisActionName"
        },
        {
          "name": "omitResult",
          "type": "bool"
        },
        {
          "name": "addOutputNamespace",
          "type": "bool"
        }
      ]
    },
    {
      "name": "BlobLineIteratingPipe",
      "fullName": "org.frankframework.jdbc.BlobLineIteratingPipe",
      "description": "Pipe that iterates over the lines in a BLOB.",
      "parent": "org.frankframework.jdbc.JdbcIteratingPipeBase",
      "elementNames": ["BlobLineIteratingPipe"]
    },
    {
      "name": "BooleanParameter",
      "fullName": "org.frankframework.parameters.BooleanParameter",
      "parent": "org.frankframework.parameters.AbstractParameter",
      "elementNames": ["BooleanParam"]
    },
    {
      "name": "BytesOutputPipe",
      "fullName": "org.frankframework.pipes.BytesOutputPipe",
      "description": "Output bytes as specified by the input XML.\n\n Actions are taken on every field\n tag found in the input XML. Every field tag should have a type attribute\n that specifies the type of conversion that needs to be done on the string\n specified by the value attribute. A value attribute also needs to be present\n for every field tag. Currently, two types of conversion are supported:\n\n <ul>\n   <li><code>GetBytesFromString</code>, a conversion from string to bytes as specified by java.lang.String.getBytes(String charsetName)</li>\n   <li><code>PackedDecimal</code>, a conversion from string to Packed-decimal</li>\n </ul>\n\n An additional charset attribute is needed for a GetBytesFromString\n conversion. An input XML that would encode the string &quot; TEST 1234 &quot;\n into EBCDIC format would look like:\n\n <pre>\n &lt;fields&gt;\n   &lt;field type=&quot;GetBytesFromString&quot; value=&quot; TEST 1234 &quot; charset=&quot;Cp037&quot;/&gt;\n &lt;/fields&gt;\n </pre>\n\n The Packed-decimal conversion has been implemented according to information\n found in the following resources:\n\n <ul>\n   <li>A description as found at <a href=\\\"http://www.simotime.com/datapk01.htm\\\">http://www.simotime.com/datapk01.htm</a></li>\n   <li>AS400PackedDecimal.java from jtopen_6_1_source.zip downloaded at <a href=\\\"http://jt400.sourceforge.net/\\\">http://jt400.sourceforge.net/</a></li>\n </ul>\n\n Some examples:\n\n <ul>\n   <li>The string +12345 will be translated to three bytes with the following hexadecimal representation: 12 34 5C</li>\n   <li>The string -12345 will be translated to three bytes with the following hexadecimal representation: 12 34 5D</li>\n   <li>The string 12345 will be translated to three bytes with the following hexadecimal representation: 12 34 5F</li>\n   <li>The string 1234 will be translated to three bytes with the following hexadecimal representation: 01 23 4F</li>\n </ul>\n\n The Packed-decimal is prefixed with zeroes when the specified size is bigger\n than the number of decimals. An exception is thrown when the specified size\n is smaller than the number of decimals.\n\n An input XML that would generate a number of Packed-decimals could look like:\n\n <pre>\n &lt;fields&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+12345&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+67890&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+1234&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-12345&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-67890&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-1234&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;12345&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;67890&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;1234&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+1&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-1&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+12&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-12&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+123&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-123&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+1234&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-1234&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+12345&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-12345&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+123456&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-123456&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+1234567&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-1234567&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;+12345678&quot; size=&quot;16&quot;/&gt;\n   &lt;field type=&quot;PackedDecimal&quot; value=&quot;-12345678&quot; size=&quot;16&quot;/&gt;\n &lt;/fields&gt;\n </pre>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["BytesOutputPipe"],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "CheckReloadJob",
      "fullName": "org.frankframework.scheduler.job.CheckReloadJob",
      "description": "Frank!Framework job which periodically looks in the <code>IBISCONFIG</code> table to see if a new {@link Configuration} should be loaded.",
      "parent": "org.frankframework.scheduler.AbstractJobDef",
      "elementNames": ["CheckReloadJob"],
      "notes": [
        {
          "type": "INFO",
          "value": "This is a default job that can be controlled with the property `checkReload.active` and `checkReload.interval`."
        }
      ]
    },
    {
      "name": "ChecksumPipe",
      "fullName": "org.frankframework.pipes.ChecksumPipe",
      "deprecated": {
        "forRemoval": true,
        "since": "8.3.0",
        "description": "Use the HashPipe"
      },
      "description": "This pipe can be used to generate a hash for the given message using an algorithm. With this, you can prove integrity of the message. If you\n need to prove the authenticity of the message as well, please use the {@link HashPipe} which uses an algorithm and a secret to prove both\n integrity and authenticity.\n <p>\n The hash is generated based on the bytes of the given input message or on the bytes read from the file path if @{code inputIsFile} is @{code true}\n <p>\n The supported algorithms are:\n <ul>\n     <li>CRC32</li>\n     <li>Adler32</li>\n     <li>MD5</li>\n     <li>SHA</li>\n     <li>SHA256</li>\n     <li>SHA384</li>\n     <li>SHA512</li>\n </ul>",
      "parent": "org.frankframework.pipes.HashPipe",
      "elementNames": ["ChecksumPipe"],
      "attributes": [
        {
          "name": "inputIsFile",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "Please use fileSystemPipe to read the file first."
          },
          "description": "If set <code>true</code>, the input is assumed to be a filename; otherwise the input itself is used in the calculations.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "type",
          "deprecated": {
            "forRemoval": true,
            "since": "8.3.0",
            "description": "Please use setAlgorithm to set the algorithm"
          },
          "description": "Type of checksum to be calculated",
          "default": "MD5",
          "enum": "org.frankframework.pipes.hash.Algorithm"
        }
      ]
    },
    {
      "name": "CleanupDatabaseJob",
      "fullName": "org.frankframework.scheduler.job.CleanupDatabaseJob",
      "description": "Frank!Framework job to cleanup the <code>IBISSTORE</code> and <code>IBISLOCK</code> tables.\n Find all MessageLogs and Lockers in the current configuration and removes database\n entries which have surpassed their corresponding {@link JdbcTransactionalStorage#getExpiryDateField() MessageLog's ExpiryDateField}. \n \n <h3>Possible cron expressions:</h3>\n <p>\n A \\\"Cron-Expression\\\" is a string comprised of 6 or 7 fields separated by\n white space. The 6 mandatory and 1 optional fields are as follows:<br/>\n </p>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Field Name</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Values</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Special Characters</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Seconds</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Minutes</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Hours</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-23</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-31</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-12 or JAN-DEC</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-Week</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-7 or SUN-SAT</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C #</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Year (Optional)</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">>empty, 1970-2099</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n </table>\n </p>\n\n <p>The '*' character is used to specify all values. For example, \\\"*\\\" in\n the minute field means \\\"every minute\\\".</p>\n\n <p>The '?' character is allowed for the day-of-month and day-of-week fields.\n It is used to specify 'no specific value'. This is useful when you need\n to specify something in one of the two fields, but not the other. See the\n examples below for clarification.</p>\n\n <p>The '-' character is used to specify ranges For example \\\"10-12\\\" in the\n hour field means \\\"the hours 10, 11 and 12\\\".</p>\n\n <p>The ',' character is used to specify additional values. For example\n \\\"MON,WED,FRI\\\" in the day-of-week field means \\\"the days Monday,\n Wednesday, and Friday\\\".</p>\n\n <p>The '/' character is used to specify increments. For example \\\"0/15\\\" in\n the seconds field means \\\"the seconds 0, 15, 30, and 45\\\".  And \\\"5/15\\\" in\n the seconds field means \\\"the seconds 5, 20, 35, and 50\\\".  You can also\n specify '/' after the '*' character - in this case '*' is equivalent to\n having '0' before the '/'.</p>\n\n <p>The 'L' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"last\\\", but it has different meaning in each of\n the two fields.  For example, the value \\\"L\\\" in the  day-of-month field means\n \\\"the last day of the month\\\" - day 31 for  January, day 28 for February on\n non-leap years.  If used in the day-of-week field by itself, it simply\n means \\\"7\\\" or \\\"SAT\\\". But if used in the day-of-week field after another value,\n it means \\\"the last xxx day of the month\\\" - for example \\\"6L\\\" means\n \\\"the last Friday of the month\\\".  When using the 'L' option, it is\n important not to specify lists, or ranges of values, as you'll get confusing\n results.</p>\n\n <p>The '#' character is allowed for the day-of-week field.  This character\n is used to specify \\\"the nth\\\" XX day of the month.  For example, the value\n of \\\"6#3\\\" in the day-of-week field means the third Friday of the month\n (day 6 = Friday and \\\"#3\\\" = the 3rd one in the month). Other\n examples: \\\"2#1\\\" = the first Monday of the month and  \\\"4#5\\\" = the fifth\n Wednesday of the month.  Note that if you specify \\\"#5\\\" and there is not 5 of\n the given day-of-week in the month, then no firing will occur that month.</p>\n\n <p>The 'C' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"calendar\\\".  This means values are\n calculated against the associated calendar, if any.  If no calendar is\n associated, then it is equivalent to having an all-inclusive calendar.\n A value of \\\"5C\\\" in the day-of-month field means \\\"the first day included by\n the calendar on or after the 5th\\\".  A value of \\\"1C\\\" in the day-of-week field\n means \\\"the first day included by the calendar on or after Sunday\\\".</p>\n\n <p>The legal characters and the names of months and days of the week are not\n case sensitive.</p>\n\n <p>Here are some full examples:<br/>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Expression</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Meaning</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0 12 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 12pm (noon) every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? 2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day during the year 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 * 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:59pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14,18 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0-5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:05pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 10,44 14 ? 3 WED\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 2:10pm and at 2:44pm every Wednesday in the month of March.</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * MON-FRI\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 15 * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the 15th day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 L * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L 2002-2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on every last friday of every month during the years 2002, 2003, 2004 and 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6#3\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the third Friday of every month</td>\n   </tr>\n </table>\n </p>\n\n <p>Pay attention to the effects of '?' and '*' in the day-of-week and\n day-of-month fields!</p>",
      "parent": "org.frankframework.scheduler.AbstractJobDef",
      "elementNames": ["CleanupDatabaseJob"],
      "attributes": [
        {
          "name": "queryTimeout",
          "description": "The number of seconds the database driver will wait for a statement to execute. If the limit is exceeded, a TimeoutException is thrown. 0 means no timeout",
          "default": "0",
          "type": "int"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "This is a default job that can be controlled with the property `cleanup.database.active` and `cleanup.database.cron`."
        },
        {
          "type": "INFO",
          "value": "Support for specifying both a day-of-week and a day-of-month\n          value is not complete (you'll need to use the '?' character in on of these fields)."
        },
        {
          "type": "INFO",
          "value": "Be careful when setting fire times between mid-night and 1:00 AM -\n          \"daylight savings\" can cause a skip or a repeat depending on whether\n          the time moves back or jumps forward."
        },
        {
          "type": "INFO",
          "value": "Specified in the Configuration.xml inside a <code>&lt;scheduler&gt;</code> element. \n          The scheduler element must be a direct child of configuration, not of adapter."
        },
        {
          "type": "TIP",
          "value": "All registered jobs are displayed in the Frank!Console under 'Scheduler'."
        },
        {
          "type": "WARNING",
          "value": "Support for the features described for the 'C' character is not complete."
        }
      ]
    },
    {
      "name": "CleanupFileSystemJob",
      "fullName": "org.frankframework.scheduler.job.CleanupFileSystemJob",
      "description": "Frank!Framework job to empty files in a given directory that have been\n stale (untouched) for the given <code>retention</code> duration.\n See {@link DirectoryCleaner} for more info.\n \n <h3>Possible cron expressions:</h3>\n <p>\n A \\\"Cron-Expression\\\" is a string comprised of 6 or 7 fields separated by\n white space. The 6 mandatory and 1 optional fields are as follows:<br/>\n </p>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Field Name</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Values</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Special Characters</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Seconds</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Minutes</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Hours</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-23</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-31</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-12 or JAN-DEC</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-Week</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-7 or SUN-SAT</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C #</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Year (Optional)</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">>empty, 1970-2099</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n </table>\n </p>\n\n <p>The '*' character is used to specify all values. For example, \\\"*\\\" in\n the minute field means \\\"every minute\\\".</p>\n\n <p>The '?' character is allowed for the day-of-month and day-of-week fields.\n It is used to specify 'no specific value'. This is useful when you need\n to specify something in one of the two fields, but not the other. See the\n examples below for clarification.</p>\n\n <p>The '-' character is used to specify ranges For example \\\"10-12\\\" in the\n hour field means \\\"the hours 10, 11 and 12\\\".</p>\n\n <p>The ',' character is used to specify additional values. For example\n \\\"MON,WED,FRI\\\" in the day-of-week field means \\\"the days Monday,\n Wednesday, and Friday\\\".</p>\n\n <p>The '/' character is used to specify increments. For example \\\"0/15\\\" in\n the seconds field means \\\"the seconds 0, 15, 30, and 45\\\".  And \\\"5/15\\\" in\n the seconds field means \\\"the seconds 5, 20, 35, and 50\\\".  You can also\n specify '/' after the '*' character - in this case '*' is equivalent to\n having '0' before the '/'.</p>\n\n <p>The 'L' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"last\\\", but it has different meaning in each of\n the two fields.  For example, the value \\\"L\\\" in the  day-of-month field means\n \\\"the last day of the month\\\" - day 31 for  January, day 28 for February on\n non-leap years.  If used in the day-of-week field by itself, it simply\n means \\\"7\\\" or \\\"SAT\\\". But if used in the day-of-week field after another value,\n it means \\\"the last xxx day of the month\\\" - for example \\\"6L\\\" means\n \\\"the last Friday of the month\\\".  When using the 'L' option, it is\n important not to specify lists, or ranges of values, as you'll get confusing\n results.</p>\n\n <p>The '#' character is allowed for the day-of-week field.  This character\n is used to specify \\\"the nth\\\" XX day of the month.  For example, the value\n of \\\"6#3\\\" in the day-of-week field means the third Friday of the month\n (day 6 = Friday and \\\"#3\\\" = the 3rd one in the month). Other\n examples: \\\"2#1\\\" = the first Monday of the month and  \\\"4#5\\\" = the fifth\n Wednesday of the month.  Note that if you specify \\\"#5\\\" and there is not 5 of\n the given day-of-week in the month, then no firing will occur that month.</p>\n\n <p>The 'C' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"calendar\\\".  This means values are\n calculated against the associated calendar, if any.  If no calendar is\n associated, then it is equivalent to having an all-inclusive calendar.\n A value of \\\"5C\\\" in the day-of-month field means \\\"the first day included by\n the calendar on or after the 5th\\\".  A value of \\\"1C\\\" in the day-of-week field\n means \\\"the first day included by the calendar on or after Sunday\\\".</p>\n\n <p>The legal characters and the names of months and days of the week are not\n case sensitive.</p>\n\n <p>Here are some full examples:<br/>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Expression</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Meaning</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0 12 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 12pm (noon) every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? 2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day during the year 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 * 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:59pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14,18 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0-5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:05pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 10,44 14 ? 3 WED\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 2:10pm and at 2:44pm every Wednesday in the month of March.</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * MON-FRI\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 15 * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the 15th day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 L * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L 2002-2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on every last friday of every month during the years 2002, 2003, 2004 and 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6#3\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the third Friday of every month</td>\n   </tr>\n </table>\n </p>\n\n <p>Pay attention to the effects of '?' and '*' in the day-of-week and\n day-of-month fields!</p>",
      "parent": "org.frankframework.scheduler.AbstractJobDef",
      "elementNames": ["CleanupFileSystemJob"],
      "children": [
        {
          "multiple": true,
          "roleName": "directoryCleaner",
          "type": "org.frankframework.util.DirectoryCleaner"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "Support for specifying both a day-of-week and a day-of-month\n          value is not complete (you'll need to use the '?' character in on of these fields)."
        },
        {
          "type": "INFO",
          "value": "Be careful when setting fire times between mid-night and 1:00 AM -\n          \"daylight savings\" can cause a skip or a repeat depending on whether\n          the time moves back or jumps forward."
        },
        {
          "type": "INFO",
          "value": "Specified in the Configuration.xml inside a <code>&lt;scheduler&gt;</code> element. \n          The scheduler element must be a direct child of configuration, not of adapter."
        },
        {
          "type": "TIP",
          "value": "All registered jobs are displayed in the Frank!Console under 'Scheduler'."
        },
        {
          "type": "WARNING",
          "value": "Support for the features described for the 'C' character is not complete."
        }
      ]
    },
    {
      "name": "Clearing",
      "fullName": "org.frankframework.monitoring.Clearing",
      "description": "A Trigger that starts its life with type = CLEARING. The type of the trigger can be changed dynamically.",
      "parent": "org.frankframework.monitoring.Trigger",
      "elementNames": ["ClearingTrigger"]
    },
    {
      "name": "ClobLineIteratingPipe",
      "fullName": "org.frankframework.jdbc.ClobLineIteratingPipe",
      "description": "Pipe that iterates over the lines in a CLOB.",
      "parent": "org.frankframework.jdbc.JdbcIteratingPipeBase",
      "elementNames": ["ClobLineIteratingPipe"]
    },
    {
      "name": "CmisEventListener",
      "fullName": "org.frankframework.extensions.cmis.CmisEventListener",
      "parent": "org.frankframework.http.PushingListenerAdapter",
      "elementNames": ["CmisEventListener"],
      "attributes": [
        {
          "name": "eventListener"
        }
      ]
    },
    {
      "name": "CmisSender",
      "fullName": "org.frankframework.extensions.cmis.CmisSender",
      "description": "Sender to obtain information from and write to a CMIS application.\n\n <p>\n When <code>action=get</code> the input (xml string) indicates the id of the document to get. This input is mandatory.\n </p>\n <p>\n <b>Example:</b>\n <pre><code>&lt;cmis&gt;\n     &lt;id&gt;documentId&lt;/id&gt;\n &lt;/cmis&gt;</code></pre>\n </p>\n <p>\n When <code>action=delete</code> the input (xml string) indicates the id of the document to get. This input is mandatory.\n </p>\n <p>\n <b>Example:</b>\n <pre><code>&lt;cmis&gt;\n     &lt;id&gt;documentId&lt;/id&gt;\n &lt;/cmis&gt;</code></pre>\n </p>\n <p>\n When <code>action=create</code> the input (xml string) indicates document properties to set. This input is optional.\n </p>\n <p>\n <b>Example:</b>\n <pre><code>&lt;cmis&gt;\n     &lt;name&gt;Offerte&lt;/name&gt;\n     &lt;objectTypeId&gt;NNB_Geldlening&lt;/objectTypeId&gt;\n     &lt;mediaType&gt;application/pdf&lt;/mediaType&gt;\n     &lt;properties&gt;\n         &lt;property name=&quot;ArrivedAt&quot; type=&quot;datetime&quot; formatString=&quot;yyyy-MM-dd'T'HH:mm:ss.SSSz&quot;&gt;2014-11-27T16:43:01.268+0100&lt;/property&gt;\n         &lt;property name=&quot;ArrivedBy&quot;&gt;HDN&lt;/property&gt;\n         &lt;property name=&quot;DocumentType&quot;&gt;Geldlening&lt;/property&gt;\n     &lt;/properties&gt;\n &lt;/cmis&gt;</code></pre>\n </p>\n\n <p>\n <table border=\\\"1\\\">\n <tr><th>attributes</th><th>description</th><th>default</th></tr>\n <tr><td>name</td><td>mandatory property \\\"cmis:name\\\". If not set the sender attribute fileNameSessionKey is used</td><td>\\\"[unknown]\\\"</td></tr>\n <tr><td>objectTypeId</td><td>mandatory property \\\"cmis:objectTypeId\\\"</td><td>\\\"cmis:document\\\"</td></tr>\n <tr><td>mediaType</td><td>the MIME type of the document to store</td><td>\\\"application/octet-stream\\\"</td></tr>\n <tr><td>property</td><td>custom document property to set. Possible attributes:\n <table border=\\\"1\\\">\n <tr><th>name</th><th>description</th><th>default</th></tr>\n <tr><td>type</td><td>\n <ul>\n <li><code>string</code>: renders the value</li>\n <li><code>datetime</code>: converts the value to a Date, by default using formatString <code>yyyy-MM-dd HH:mm:ss</code></li>\n </ul>\n </td><td>string</td></tr>\n <tr><td>formatString</td><td>used in combination with <code>datetime</code></td><td>yyyy-MM-dd HH:mm:ss</td></tr>\n </table></td><td>&nbsp;</td></tr>\n </table>\n </p>\n <p>\n When <code>action=find</code> the input (xml string) indicates the query to perform.\n </p>\n <p>\n <b>Example:</b>\n <pre><code>&lt;query&gt;\n    &lt;statement&gt;select * from cmis:document&lt;/statement&gt;\n    &lt;maxItems&gt;10&lt;/maxItems&gt;\n    &lt;skipCount&gt;0&lt;/skipCount&gt;\n    &lt;searchAllVersions&gt;true&lt;/searchAllVersions&gt;\n    &lt;includeAllowableActions&gt;true&lt;/includeAllowableActions&gt;\n &lt;/query</code></pre>\n </p>\n <p>\n When <code>action=update</code> the input (xml string) indicates document properties to update.\n </p>\n <p>\n <b>Example:</b>\n <pre><code>&lt;cmis&gt;\n    &lt;id&gt;123456789&lt;/id&gt;\n    &lt;properties&gt;\n       &lt;property name=&quot;ArrivedAt&quot; type=&quot;datetime&quot; formatString=&quot;yyyy-MM-dd'T'HH:mm:ss.SSSz&quot;&gt;2014-11-27T16:43:01.268+0100&lt;/property&gt;\n       &lt;property name=&quot;ArrivedBy&quot;&gt;HDN&lt;/property&gt;\n       &lt;property name=&quot;DocumentType&quot;&gt;Geldlening&lt;/property&gt;\n    &lt;/properties&gt;\n &lt;/cmis&gt;</code></pre>\n </p>\n\n <p>\n <table border=\\\"1\\\">\n <tr><th>attributes</th><th>description</th><th>default</th></tr>\n <tr><td>id</td><td>mandatory property \\\"cmis:objectId\\\" which indicates the document to update</td><td>&nbsp;</td></tr>\n <tr><td>property</td><td>custom document property to update. See <code>action=create</code> for possible attributes</td><td>&nbsp;</td></tr>\n </table>\n </p>",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["CmisSender"],
      "attributes": [
        {
          "name": "action",
          "mandatory": true,
          "description": "Specifies action to perform",
          "enum": "org.frankframework.extensions.cmis.CmisSender.CmisAction"
        },
        {
          "name": "maxConnections",
          "description": "The maximum number of concurrent connections",
          "default": "10",
          "type": "int"
        },
        {
          "name": "timeout",
          "description": "READ_TIMEOUT timeout in MS.\n Defaults to 10000, inherited from {@link AbstractHttpSession#setTimeout(int) HttpSender#setTimeout}.",
          "default": "10000",
          "type": "int"
        },
        {
          "name": "url",
          "description": "URL to connect to"
        },
        {
          "name": "repository",
          "description": "Repository ID"
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain credentials for authentication to host"
        },
        {
          "name": "username",
          "description": "Username used in authentication to host"
        },
        {
          "name": "password",
          "description": "Password used in authentication to host"
        },
        {
          "name": "bindingType",
          "mandatory": true,
          "description": "BindingType CMIS protocol to use",
          "enum": "org.frankframework.extensions.cmis.CmisSessionBuilder.BindingTypes"
        },
        {
          "name": "fileSessionKey",
          "description": "If <code>action=create</code> the sessionKey that contains the file to use. If <code>action=get</code> and <code>getProperties=true</code> the sessionKey to store the result in"
        },
        {
          "name": "filenameSessionKey",
          "description": "If <code>action=create</code> the session key that contains the name of the file to use. If not set, the value of the property <code>filename</code> from the input message is used"
        },
        {
          "name": "defaultMediaType",
          "description": "If <code>action=create</code> the mime type used to store the document when it's not set in the input message by a property",
          "default": "'application/octet-stream'"
        },
        {
          "name": "getProperties",
          "description": "(Only used when <code>action=get</code>). If true, the content of the document is put to <code>FileSessionKey</code> and all document properties are put in the result as a xml string",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "getDocumentContent",
          "description": "(Only used when <code>action=get</code>). If true, the attachment for the document is the sender result or, if set, stored in <code>fileSessionKey</code>. If false, only the properties are returned",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "useRootFolder",
          "description": "(Only used when <code>action=create</code>). If true, the document is created in the root folder of the repository. Otherwise the document is created in the repository",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "resultOnNotFound",
          "deprecated": {
            "forRemoval": true,
            "since": "7.9.0",
            "description": "configure forward 'notFound' instead"
          },
          "description": "(Only used when <code>action=get</code>) result returned when no document was found for the given id (e.g. '[not_found]'). If empty then 'notFound' is returned as forward name"
        },
        {
          "name": "keepSession",
          "description": "If true, the session is not closed at the end and it will be used in the next call",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "overrideEntryPointWSDL",
          "description": "Override entrypoint WSDL by reading it from the classpath, overrides url attribute"
        },
        {
          "name": "keystore",
          "description": "Resource url to keystore or certificate. If none specified, the JVMs default keystore will be used."
        },
        {
          "name": "keystoreType",
          "description": "Type of keystore",
          "default": "pkcs12",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "keystoreAuthAlias",
          "description": "Authentication alias used to obtain keystore password"
        },
        {
          "name": "keystorePassword",
          "description": "Default password to access keystore"
        },
        {
          "name": "keystoreAlias",
          "description": "Alias to obtain specific certificate or key in keystore"
        },
        {
          "name": "keystoreAliasAuthAlias",
          "description": "Authentication alias to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keystoreAliasPassword",
          "description": "Default password to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keyManagerAlgorithm",
          "description": "Key manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "truststore",
          "description": "Resource url to truststore. If none specified, the JVMs default truststore will be used."
        },
        {
          "name": "truststoreType",
          "description": "Type of truststore",
          "default": "jks",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "truststoreAuthAlias",
          "description": "Authentication alias used to obtain truststore password"
        },
        {
          "name": "truststorePassword",
          "description": "Default password to access truststore"
        },
        {
          "name": "trustManagerAlgorithm",
          "description": "Trust manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "verifyHostname",
          "unsafe": true,
          "description": "If <code>true</code>, the hostname in the certificate will be checked against the actual hostname of the peer",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "allowSelfSignedCertificates",
          "unsafe": true,
          "description": "If <code>true</code>, self signed certificates are accepted",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "ignoreCertificateExpiredException",
          "unsafe": true,
          "description": "If <code>true</code>, CertificateExpiredExceptions are ignored",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "proxyHost",
          "description": "Proxy host url"
        },
        {
          "name": "proxyPort",
          "description": "Proxy host port",
          "default": "80",
          "type": "int"
        },
        {
          "name": "proxyAuthAlias",
          "description": "Alias used to obtain credentials for authentication to proxy"
        },
        {
          "name": "proxyUsername",
          "description": "Proxy Username"
        },
        {
          "name": "proxyPassword",
          "description": "Proxy Password"
        }
      ],
      "parameters": [
        {
          "name": "authAlias",
          "description": "overrides authAlias specified by the attribute <code>authAlias</code>"
        },
        {
          "name": "username",
          "description": "overrides username specified by the attribute <code>username</code>"
        },
        {
          "name": "password",
          "description": "overrides password specified by the attribute <code>password</code>"
        }
      ],
      "forwards": [
        {
          "name": "notFound",
          "description": "if the requested object could not be found for actions GET, UPDATE and DELETE"
        }
      ]
    },
    {
      "name": "CommandSender",
      "fullName": "org.frankframework.senders.CommandSender",
      "description": "Sender that executes either its input or a fixed line, with all parametervalues appended, as a command.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["CommandSender"],
      "attributes": [
        {
          "name": "command",
          "description": "The command to be executed. Note: Executing a command in WAS requires &lt;&lt;ALL FILES&gt;&gt; execute permission to avoid that provide the absolute path of the command. Absolute path can be found with the following command 'which -a {commandName}'"
        },
        {
          "name": "timeout",
          "description": "The number of seconds to execute a command. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited",
          "default": "0",
          "type": "int"
        },
        {
          "name": "commandWithArguments",
          "description": "In case the command that will be executed contains arguments then this flag should be set to true",
          "default": "false",
          "type": "bool"
        }
      ],
      "parametersDescription": "All parameters present are appended as arguments to the command."
    },
    {
      "name": "CompareIntegerPipe",
      "fullName": "org.frankframework.pipes.CompareIntegerPipe",
      "description": "Pipe that compares the two integer values.\n If one of the parameters is missing then the input message will be used as the missing operand.\n This pipe can be used in combination with {@link IncreaseIntegerPipe} to construct loops.",
      "parent": "org.frankframework.pipes.AbstractPipe",
      "elementNames": ["CompareIntegerPipe"],
      "parameters": [
        {
          "name": "operand1",
          "description": "The first operand, holds v1."
        },
        {
          "name": "operand2",
          "description": "The second operand, holds v2."
        }
      ],
      "forwards": [
        {
          "name": "lessthan",
          "description": "operand1 &lt; operand2"
        },
        {
          "name": "greaterthan",
          "description": "operand1 &gt; operand2"
        },
        {
          "name": "equals",
          "description": "operand1 = operand2"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "EIP",
          "value": "Router"
        }
      ]
    },
    {
      "name": "CompareStringPipe",
      "fullName": "org.frankframework.pipes.CompareStringPipe",
      "description": "Pipe that lexicographically compares two strings, that must NOT be empty.",
      "parent": "org.frankframework.pipes.AbstractPipe",
      "elementNames": ["CompareStringPipe"],
      "attributes": [
        {
          "name": "xml",
          "description": "when set <code>true</code> the string values to compare are considered to be xml strings and before the actual compare both xml strings are transformed to a canonical form",
          "default": "false",
          "type": "bool"
        }
      ],
      "parameters": [
        {
          "name": "operand1",
          "description": "The first operand, holds v1. Defaults to input message"
        },
        {
          "name": "operand2",
          "description": "The second operand, holds v2. Defaults to input message"
        },
        {
          "name": "ignorepatterns",
          "description": "(optional) contains a xml table with references to substrings which have to be ignored during the comparison. This xml table has the following layout:\n <br/>\n <pre><code>&lt;ignores&gt;\n \t   &lt;ignore&gt;\n \t       &lt;after&gt;...&lt;/after&gt;\n \t       &lt;before&gt;...&lt;/before&gt;\n \t   &lt;/ignore&gt;\n \t   &lt;ignore&gt;\n \t       &lt;after&gt;...&lt;/after&gt;\n \t       &lt;before&gt;...&lt;/before&gt;\n \t   &lt;/ignore&gt;\n &lt;/ignores&gt;</code></pre>\n <br/>\n Substrings between \"after\" and \"before\" are ignored"
        }
      ],
      "forwards": [
        {
          "name": "lessthan",
          "description": "operand1 &lt; operand2"
        },
        {
          "name": "greaterthan",
          "description": "operand1 &gt; operand2"
        },
        {
          "name": "equals",
          "description": "operand1 = operand2"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "EIP",
          "value": "Router"
        }
      ]
    },
    {
      "name": "CompressPipe",
      "fullName": "org.frankframework.pipes.CompressPipe",
      "description": "Pipe to zip or unzip a message or file.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["CompressPipe"],
      "attributes": [
        {
          "name": "compress",
          "description": "if <code>true</code> the pipe compresses, otherwise it decompress",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "filenamePattern",
          "deprecated": {
            "forRemoval": true,
            "since": "8.1",
            "description": "Please use a LocalFileSystemPipe with filename parameter (and optionally a pattern)"
          },
          "description": "required if result is a file, the pattern for the result filename. Can be set with variables e.g. {file}.{ext}.zip in this example the {file} and {ext} variables are resolved with sessionKeys with the same name"
        },
        {
          "name": "messageIsContent",
          "description": "flag indicates whether the message is the content or the path to a file with the contents. for multiple files use ';' as delimiter",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "outputDirectory",
          "deprecated": {
            "forRemoval": true,
            "since": "8.1",
            "description": "Please use resultIsContent=true in combination with a LocalFileSystemPipe"
          },
          "description": "required if result is a file, the directory in which to store the result file"
        },
        {
          "name": "resultIsContent",
          "description": "flag indicates whether the result must be written to the message or to a file (filename = message)",
          "default": "true when outputDirectory is not set.",
          "type": "bool"
        },
        {
          "name": "zipEntryPattern",
          "deprecated": {
            "forRemoval": true,
            "since": "8.1",
            "description": "Please use parameter zipEntryPattern (in combination with the pattern attribute)"
          },
          "description": "the pattern for the zipentry name in case a zipfile is read or written"
        },
        {
          "name": "fileFormat",
          "enum": "org.frankframework.pipes.CompressPipe.FileFormat"
        }
      ]
    },
    {
      "name": "Configuration",
      "fullName": "org.frankframework.configuration.Configuration",
      "description": "Container of {@link Adapter Adapters} that belong together.\n A configuration may be deployed independently from other configurations.\n Names of nested elements like {@link Adapter Adapters}, {@link Receiver Receivers}, listeners and senders\n can be reused in other configurations.\n <br/><br/>\n Configurations are shown in the Frank!Console along with their {@link Adapter Adapters},\n {@link Receiver Receivers}, listeners and senders. The Adapter Status page of the Frank!Console\n has a tab for each configuration that only shows information\n about that configuration. See the Frank!Manual for details.",
      "elementNames": ["Configuration"],
      "attributes": [
        {
          "name": "autoStart",
          "description": "If the Configuration should automatically start all {@link Adapter Adapters} and {@link IJob Scheduled Jobs}.",
          "type": "bool"
        },
        {
          "name": "name",
          "description": "Configurations should be wired through Spring, which in turn should call {@link #setBeanName(String)}.\n Once the ConfigurationContext has a name it should not be changed anymore, hence\n {@link AbstractRefreshableConfigApplicationContext#setBeanName(String) super.setBeanName(String)} only sets the name once.\n If not created by Spring, the setIdCalled flag in AbstractRefreshableConfigApplicationContext wont be set, allowing the name to be updated.\n\n The DisplayName will always be updated, which is purely used for logging purposes."
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "module",
          "description": "Wrapper element to help split up large configuration files into smaller valid XML files. It may be used as root tag when an XML file contains multiple adapters and/or jobs. The Module element itself does not influence the behavior of Frank configurations.",
          "type": "Module"
        },
        {
          "multiple": true,
          "roleName": "include",
          "description": "Include the referenced Module in this configuration",
          "type": "org.frankframework.configuration.Include"
        },
        {
          "multiple": true,
          "roleName": "adapter",
          "description": "Add adapter.",
          "type": "org.frankframework.core.Adapter"
        },
        {
          "multiple": false,
          "roleName": "scheduler",
          "description": "Container for jobs scheduled for periodic execution.",
          "type": "org.frankframework.configuration.ScheduleManager"
        },
        {
          "deprecated": true,
          "multiple": true,
          "roleName": "job",
          "description": "Add an {@link IJob job} for scheduling at the configuration.\n The configuration will create an {@link IJob AdapterJob} instance and a JobDetail with the\n information from the parameters, after checking the\n parameters of the job. (basically, it checks whether the adapter and the\n receiver are registered.\n <p>See the <a href=\"https://www.quartz-scheduler.org/\">Quartz scheduler</a> documentation</p>",
          "type": "org.frankframework.scheduler.job.IJob"
        },
        {
          "multiple": false,
          "roleName": "sapSystems",
          "type": "org.frankframework.configuration.extensions.SapSystems"
        },
        {
          "multiple": false,
          "roleName": "jmsRealms",
          "type": "org.frankframework.jms.JmsRealmFactory"
        },
        {
          "deprecated": true,
          "multiple": true,
          "roleName": "jmsRealm",
          "type": "org.frankframework.jms.JmsRealm"
        },
        {
          "multiple": false,
          "roleName": "monitoring",
          "description": "Container for monitor objects",
          "type": "org.frankframework.monitoring.MonitorManager"
        },
        {
          "multiple": false,
          "roleName": "sharedResources",
          "type": "org.frankframework.configuration.SharedResources"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "CounterSwitchPipe",
      "fullName": "org.frankframework.pipes.CounterSwitchPipe",
      "description": "Selects an exitState, based on the number of received messages by this pipe.\n\n The exitState is the difference (subtraction) between the <code>divisor</code> and\n the remainder of [number of received messages] modulus <code>divisor</code>.\n This will always be an integer between 1 and <code>divisor</code>, inclusive.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["CounterSwitchPipe"],
      "attributes": [
        {
          "name": "divisor",
          "default": "2",
          "type": "int"
        }
      ],
      "forwards": [
        {
          "name": "*",
          "description": "the exitState, based on the number of received messages"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Router"
        }
      ]
    },
    {
      "name": "CredentialCheckingPipe",
      "fullName": "org.frankframework.pipes.CredentialCheckingPipe",
      "description": "Pipe to check the the CredentialFactory (for testing only).",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["CredentialCheckingPipe"],
      "attributes": [
        {
          "name": "authAlias"
        },
        {
          "name": "targetPassword"
        },
        {
          "name": "targetUserid"
        },
        {
          "name": "defaultPassword"
        },
        {
          "name": "defaultUserid"
        }
      ]
    },
    {
      "name": "CrlPipe",
      "fullName": "org.frankframework.pipes.CrlPipe",
      "description": "Pipe that reads a CRL from an input stream and transforms it to an XML.\n The stream is closed after reading.\n\n Example configuration:\n <pre><code>&lt;pipe name=&quot;Read input CSV file&quot;\n                 className=&quot;org.frankframework.pipes.FixedResultPipe&quot;&gt;\n \t\t&lt;param name=&quot;filename&quot; sessionKey=&quot;filePathName&quot;/&gt;\n \t\t&lt;forward name=&quot;success&quot; path=&quot;Process each Line&quot; /&gt;\n \t&lt;/pipe&gt;\n \t&lt;pipe\n \t\tname=&quot;Read issuer&quot;\n \t\tclassName=&quot;org.frankframework.pipes.FixedResultPipe&quot;\n \t\tfilename=&quot;dir/issuer.cer&quot;\n \t\tstoreResultInSessionKey=&quot;issuer&quot;&gt;\n \t\t&lt;forward name=&quot;success&quot; path=&quot;Read CRL&quot; /&gt;\n \t&lt;/pipe&gt;\n \t&lt;pipe\n \t\tname=&quot;Read CRL&quot;\n \t\tclassName=&quot;org.frankframework.pipes.FixedResultPipe&quot;\n \t\tfileName=&quot;dir/CRL.crl&quot;&gt;\n \t\t&lt;forward name=&quot;success&quot; path=&quot;Transform CRL&quot; /&gt;\n \t&lt;/pipe&gt;\n \t&lt;pipe\n \t\tname=&quot;Transform CRL&quot;\n \t\tclassName=&quot;org.frankframework.pipes.CrlPipe&quot;\n \t\tissuerSessionKey=&quot;issuer&quot;&gt;\n \t\t&lt;forward name=&quot;success&quot; path=&quot;EXIT&quot; /&gt;\n \t&lt;/pipe&gt;</code></pre>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["CrlPipe"],
      "attributes": [
        {
          "name": "issuerSessionKey",
          "description": "Name of the sessionKey that holds the certificate of the issuer who signed the CRL."
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "CsvParserPipe",
      "fullName": "org.frankframework.pipes.CsvParserPipe",
      "description": "Reads a message in CSV format, and turns it into XML.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["CsvParserPipe"],
      "attributes": [
        {
          "name": "fileContainsHeader",
          "description": "Specifies if the first line should be treated as header or as data",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "fieldNames",
          "description": "Comma separated list of header names. If set, then <code>fileContainsHeader</code> defaults to false. If not set, headers are taken from the first line"
        },
        {
          "name": "fieldSeparator",
          "description": "Character that separates fields",
          "default": ","
        },
        {
          "name": "headerCase",
          "description": "When set, character casing will be changed for the header",
          "enum": "org.frankframework.pipes.CsvParserPipe.HeaderCase"
        },
        {
          "name": "prettyPrint",
          "description": "Format the XML output in easy legible way",
          "type": "bool"
        },
        {
          "name": "useControlCodes",
          "description": "Enables the ASCII <code>(RS) Record Separator</code> and <code>(US) Unit Separator</code> Control Code field delimiters.\n May not be used in combination with attribute <code>fieldSeparator</code>.\n See <a href=\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Field_separators\">WIKI Control Codes</a>.",
          "type": "bool"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "DataSonnetPipe",
      "fullName": "org.frankframework.pipes.DataSonnetPipe",
      "description": "<p>\n Using <code>.jsonnet</code> transformation files, the DataSonnetPipe uses JSonnet at it's core to transform files\n from and to different file formats specified by supported {@link DataSonnetOutputType outputTypes}.\n </p>\n <p>\n The pipe input message will be set to the JSON object called <code>payload</code>.\n It's required for the input message to have a correct MimeType, else the text will be interpreted as a String.\n </p>\n <p>\n Input message (JSON) format:\n <pre><code>{\n   &quot;userId&quot; : &quot;123&quot;,\n   &quot;name&quot; : &quot;DataSonnet&quot;\n }</code></pre>\n \n Jsonnet stylesheet:\n <pre><code>{\n   &quot;uid&quot;: payload.userId,\n   &quot;uname&quot;: payload.name,\n }</code></pre>\n Produces the following JSON output:\n <pre><code>{\n   &quot;uid&quot;: &quot;123&quot;,\n   &quot;uname&quot;: &quot;DataSonnet&quot;\n }</code></pre>\n </p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["DataSonnetPipe"],
      "attributes": [
        {
          "name": "styleSheetName",
          "description": "Location of stylesheet to apply to the input message"
        },
        {
          "name": "outputType",
          "description": "Output file format, DataSonnet is semi-capable of converting the converted JSON to a different format.",
          "enum": "org.frankframework.pipes.DataSonnetPipe.DataSonnetOutputType"
        },
        {
          "name": "computeMimeType",
          "description": "Compute mimetype when unknown. Requires more compute",
          "type": "bool"
        }
      ],
      "parametersDescription": "All parameters are added to the <code>.jsonnet</code> stylesheet, parameter names must be unique.",
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "DateParameter",
      "fullName": "org.frankframework.parameters.DateParameter",
      "parent": "org.frankframework.parameters.AbstractParameter",
      "elementNames": ["DateParam"],
      "attributes": [
        {
          "name": "type",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "use element DateParameter with attribute formatType instead"
          },
          "enum": "org.frankframework.parameters.ParameterType"
        },
        {
          "name": "formatString",
          "description": "Used in combination with types <code>DATE</code>, <code>TIME</code>, <code>DATETIME</code> and <code>TIMESTAMP</code> to parse the raw parameter string data into an object of the respective type",
          "default": "depends on type"
        },
        {
          "name": "formatType",
          "enum": "org.frankframework.parameters.DateParameter.DateFormatType"
        }
      ]
    },
    {
      "name": "DelayPipe",
      "fullName": "org.frankframework.pipes.DelayPipe",
      "description": "Pipe that sleeps for a specified time, which defaults to 5000 msecs.\n Usefull for testing purposes.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["DelayPipe"],
      "attributes": [
        {
          "name": "delayTime",
          "description": "The time <i>in milliseconds</i> the thread will be put to sleep",
          "default": "5000",
          "type": "int"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "DelaySender",
      "fullName": "org.frankframework.senders.DelaySender",
      "description": "Sender that sleeps for a specified time, which defaults to 5000 msecs.\n Useful for testing purposes.",
      "parent": "org.frankframework.senders.AbstractSender",
      "elementNames": ["DelaySender"],
      "attributes": [
        {
          "name": "delayTime",
          "description": "The time <i>in milliseconds</i> the thread will be put to sleep",
          "default": "5000 [ms]",
          "type": "int"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ]
    },
    {
      "name": "DelphiStringRecordReaderFactory",
      "fullName": "org.frankframework.batch.DelphiStringRecordReaderFactory",
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "Warning: non-maintained functionality."
      },
      "description": "{@link IReaderFactory} that provides a reader that reads Delphi records containing Strings.",
      "elementNames": ["DelphiStringRecordReaderFactory"],
      "attributes": [
        {
          "name": "separator",
          "description": "separator placed between each string read",
          "default": "|"
        },
        {
          "name": "stringLength",
          "description": "the maximum length of each string. each string is preceded by a one byte length indication.",
          "default": "50",
          "type": "int"
        },
        {
          "name": "stringsPerRecord",
          "description": "the number of strings read for each record. 0 means file consists of one logical record",
          "default": "0",
          "type": "int"
        },
        {
          "name": "separatorReplacement",
          "description": "replacement character, used when separator is found in string read",
          "default": "_"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "DirectQuerySender",
      "fullName": "org.frankframework.jdbc.DirectQuerySender",
      "description": "QuerySender that interprets the input message as a query, possibly with attributes.\n Messages are expected to contain sql-text.",
      "parent": "org.frankframework.jdbc.AbstractJdbcQuerySender",
      "elementNames": ["DirectQuerySender"],
      "parametersDescription": "All parameters present are applied to the query to be executed.",
      "notes": [
        {
          "type": "INFO",
          "value": "Please note that the default value of <code>trimSpaces</code> is `true`"
        }
      ]
    },
    {
      "name": "DirectWrapperPipe",
      "fullName": "org.frankframework.extensions.esb.DirectWrapperPipe",
      "description": "Kind of extension to EsbSoapWrapperPipe for real time destinations.",
      "parent": "org.frankframework.pipes.TimeoutGuardPipe",
      "elementNames": ["DirectWrapperPipe"],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "DirectoryCleaner",
      "fullName": "org.frankframework.util.DirectoryCleaner",
      "description": "Cleans up a directory.",
      "elementNames": ["DirectoryCleaner"],
      "attributes": [
        {
          "name": "directory",
          "description": "directory to be cleaned up"
        },
        {
          "name": "retention",
          "description": "Minimum amount of time (with suffix 'd', 'h', 'm' or 's') that must have passed before a file will be deleted.\n You may only use one suffix!",
          "default": "30d"
        },
        {
          "name": "subdirectories",
          "description": "when <code>true</code>, files in subdirectories will be deleted, too",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "deleteEmptySubdirectories",
          "description": "when <code>true</code>, empty subdirectories will be deleted, too",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "notExistWarn",
          "description": "when set <code>true</code>, send warnings to logging and console about not existing directories",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "DirectoryListener",
      "fullName": "org.frankframework.receivers.DirectoryListener",
      "description": "Listener that looks for files in a LocalFileSystem. The DirectoryListener keeps track of the file process by storing it in different folders. The application may create the folders if you (a) set the <code>root</code> attribute and (b) set the attribute <code>createFolders</code> to true.\n \n The attribute <code>messageType</code> dictates what information of the file is passed to the pipeline. This may be the name, canonical path, the entire file, or the file's metadata.\n\n <p>\n Example usage:<br>\n <pre><code>\n &lt;DirectoryListener\n \tname=\\\"directoryListener\\\"\n \tmessageType=\\\"info\\\"\n \troot=\\\"${rootdirectory}\\\"\n \tinputFolder=\\\"in\\\"\n \tinProcessFolder=\\\"inProcess\\\"\n \terrorFolder=\\\"error\\\"\n \tcreateFolders=\\\"true\\\"\n /&gt;\n </code></pre>\n\n </p>\n\n {@link IPullingListener listener} that looks in a {@link IBasicFileSystem FileSystem} for files.\n When a file is found, it is moved to an in-process folder, so that it isn't found more than once.\n <br/>\n The information specified by {@link #setMessageType(IMessageType)} is then passed to the pipeline.",
      "parent": "org.frankframework.filesystem.AbstractFileSystemListener",
      "elementNames": ["DirectoryListener"],
      "attributes": [
        {
          "name": "root",
          "description": "Optional base folder, that serves as root for all other folders"
        },
        {
          "name": "messageType",
          "description": "Determines the contents of the message that is sent to the pipeline. The value of the attribute matching the searchKey is returned when using <code>ATTRIBUTE</code>",
          "default": "PATH",
          "enum": "org.frankframework.filesystem.AbstractFileSystemListener.MessageType"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "To avoid problems with duplicate filenames in folders like the <code>errorFolder</code> or <code>processedFolder</code>,\n you should configure either <code>overwrite=&quot;true&quot;</code>, configure <code>numberOfBackups</code> to a value larger than 0, or\n configure an <code>inProcessFolder</code> and <code>fileTimeSensitive=&quot;true&quot;</code>.\n These options can be used together as well."
        },
        {
          "type": "WARNING",
          "value": "In addition to the above, prior to release 9.0 it was not sufficient to configure <code>inProcessFolder</code> and <code>fileTimeSensitive</code>\n to avoid potential duplicate filename errors. Prior to release 9.0, it is recommended to configure <code>numberOfBackups</code> to avoid these issues."
        }
      ]
    },
    {
      "name": "DomainTransformerPipe",
      "fullName": "org.frankframework.pipes.DomainTransformerPipe",
      "description": "Pipe that performs domain transforming on the basis of a database table.\n\n Every string which equals \\\"%![DT{<code>label</code>,<code>valueIn</code>,<code>type</code>}]\\\" will be replaced by <code>valueOut</code>.\n\n The field <code>type</code>, which is optional, indicates the format of <code>valueIn</code>. Currently the following types are supported:\n\n <ul>\n   <li><code>string</code> (default): the methode setString() is used</li>\n   <li><code>number</code>: the method setDouble() is used </li>\n </ul>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["DomainTransformerPipe"],
      "attributes": [
        {
          "name": "jmsRealm",
          "deprecated": {
            "forRemoval": true,
            "since": "7.8.0"
          }
        },
        {
          "name": "datasourceName"
        },
        {
          "name": "tableName",
          "description": "the name of the table that contains the mapping",
          "default": "mapping"
        },
        {
          "name": "labelField",
          "description": "the name of the column labels are stored in",
          "default": "label"
        },
        {
          "name": "valueInField",
          "description": "the name of the column source values are stored in",
          "default": "valuein"
        },
        {
          "name": "valueOutField",
          "description": "the name of the column destination values are stored in",
          "default": "valueout"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "DummyTransactionalStorage",
      "fullName": "org.frankframework.jdbc.DummyTransactionalStorage",
      "deprecated": {
        "forRemoval": true,
        "since": "7.8.0",
        "description": "It is no longer necessary to use the DummyTransactionalStorage"
      },
      "description": "Class for a messageLog element to be used in combination with a\n {@link MessageStoreSender} who's messages are processed by a\n {@link MessageStoreListener}.",
      "parent": "org.frankframework.jdbc.JdbcTransactionalStorage",
      "elementNames": ["DummyErrorStorage", "DummyMessageLog"]
    },
    {
      "name": "EchoPipe",
      "fullName": "org.frankframework.pipes.EchoPipe",
      "description": "Returns simply the input message.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["EchoPipe"],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "EchoSender",
      "fullName": "org.frankframework.senders.EchoSender",
      "description": "Echos input to output.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["EchoSender"],
      "attributes": [
        {
          "name": "synchronous",
          "description": "hack to allow to introduce a correlationid",
          "default": "true",
          "type": "bool"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "EhCache",
      "fullName": "org.frankframework.cache.EhCache",
      "description": "General Cache provider.\n\n N.B. the default values shown can be overridden using properties in appConstants. The property names are found by prefixing the attribute name with <code>cache.default.</code>.",
      "parent": "org.frankframework.cache.AbstractCacheAdapter",
      "elementNames": ["EhCache"],
      "attributes": [
        {
          "name": "maxElementsInMemory",
          "description": "The maximum number of elements in memory, before they are evicted",
          "default": "100",
          "type": "int"
        },
        {
          "name": "memoryStoreEvictionPolicy",
          "description": "Either <code>LRU</code>=Least Recent Use,<code>LFU</code>=Least Frequent Use or <code>FIFO</code>=First In - First Out",
          "default": "LRU"
        },
        {
          "name": "eternal",
          "description": "If <code>true</code>, the elements in the cache are eternal, i.e. never expire",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "timeToLiveSeconds",
          "description": "The amount of time <i>in seconds</i> to live for an element from its creation date",
          "default": "36000",
          "type": "int"
        },
        {
          "name": "timeToIdleSeconds",
          "description": "The amount of time <i>in seconds</i> to live for an element from its last accessed or modified date",
          "default": "36000",
          "type": "int"
        },
        {
          "name": "overflowToDisk",
          "description": "If <code>true</code>, the elements that are evicted from memory are spooled to disk",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "maxElementsOnDisk",
          "description": "The maximum number of elements on disk, before they are removed",
          "default": "10000",
          "type": "int"
        },
        {
          "name": "diskPersistent",
          "description": "If <code>true</code>, the cache is stored on disk and survives configuration reloads & JVM restarts.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "diskExpiryThreadIntervalSeconds",
          "description": "How often to run the disk store expiry thread",
          "default": "600",
          "type": "int"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "ErrorMessageFormatter",
      "fullName": "org.frankframework.errormessageformatters.ErrorMessageFormatter",
      "description": "This class wraps an error in an XML string.\n <p>\n Sample xml:\n <pre><code>&lt;errorMessage&gt;\n    &lt;message timestamp=&quot;Mon Oct 13 12:01:57 CEST 2003&quot;\n             originator=&quot;NN IOS AdapterFramework(set from 'application.name' and 'application.version')&quot;\n             message=&quot;message describing the error that occurred&quot;&gt;\n    &lt;location class=&quot;org.frankframework.pipes.XmlSwitch&quot; name=&quot;ServiceSwitch&quot;/&gt;\n    &lt;details&gt;detailed information of the error&lt;/details&gt;\n    &lt;originalMessage messageId=&quot;...&quot; receivedTime=&quot;Mon Oct 27 12:10:18 CET 2003&quot; &gt;\n        &lt;![CDATA[contents of message for which the error occurred]]&gt;\n    &lt;/originalMessage&gt;\n &lt;/errorMessage&gt;</code></pre>",
      "elementNames": ["ErrorMessageFormatter"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "EsbJmsListener",
      "fullName": "org.frankframework.extensions.esb.EsbJmsListener",
      "description": "ESB (Enterprise Service Bus) extension of JmsListener.",
      "parent": "org.frankframework.jms.PushingJmsListener",
      "elementNames": ["EsbJmsListener"],
      "attributes": [
        {
          "name": "messageProtocol",
          "mandatory": true,
          "description": "protocol of ESB service to be called",
          "enum": "org.frankframework.extensions.esb.EsbJmsListener.MessageProtocol"
        },
        {
          "name": "copyAEProperties",
          "description": "if true, all JMS properties in the request starting with \"ae_\" are copied to the reply.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "forceMessageIdAsCorrelationId",
          "description": "if messageProtocol=RR, default value is: true",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "useReplyTo",
          "description": "if messageProtocol=FF, default value is: false",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "xPathLoggingKeys",
          "description": "Comma separated list of all XPath keys that need to be logged. (overrides <code>msg.log.keys</code> property)"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "EsbJmsSender",
      "fullName": "org.frankframework.extensions.esb.EsbJmsSender",
      "description": "ESB (Enterprise Service Bus) extension of JmsSender.",
      "parent": "org.frankframework.jms.JmsSender",
      "elementNames": ["EsbJmsSender"],
      "attributes": [
        {
          "name": "messageProtocol",
          "description": "protocol of ESB service to be called",
          "enum": "org.frankframework.extensions.esb.EsbJmsSender.MessageProtocol"
        },
        {
          "name": "timeout",
          "description": "receiver timeout, in milliseconds",
          "default": "20000 (20s)",
          "type": "int"
        },
        {
          "name": "timeOut",
          "deprecated": {
            "forRemoval": false,
            "since": "8.1",
            "description": "Use attribute timeout instead"
          },
          "description": "receiver timeout, in milliseconds.",
          "default": "20000 (20s)",
          "type": "int"
        },
        {
          "name": "deliveryMode",
          "description": "if messageProtocol=<code>RR</code> then <code>deliveryMode</code> defaults to <code>NON_PERSISTENT</code>",
          "default": "not set by application",
          "enum": "org.frankframework.jms.JMSFacade.DeliveryMode"
        },
        {
          "name": "replyTimeout",
          "description": "if messageProtocol=<code>RR</code> then <code>replyTimeout</code> defaults to <code>timeout</code>",
          "default": "5000",
          "type": "int"
        },
        {
          "name": "synchronous",
          "description": "if messageProtocol=<code>RR</code> then <code>synchronous</code> defaults to <code>true</code>",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "soapAction",
          "description": "if messageProtocol=<code>RR</code> then if <code>soapAction</code> is empty then it is derived from the element MessageHeader/To/Location in the SOAP header of the input message (if $messagingLayer='P2P' then '$applicationFunction' else '$operationName_$operationVersion)"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "EsbJmsTransactionalStorage",
      "fullName": "org.frankframework.extensions.esb.EsbJmsTransactionalStorage",
      "description": "ESB (Enterprise Service Bus) extension of JmsTransactionalStorage.\n\n <p>\n Depending on the <code>type</code> of the <code>TransactionalStorage</code>\n one of the following messages is sent:\n <ul>\n <li><code>errorStore</code>:\n ESB.Infrastructure.US.Log.BusinessLog.2.ExceptionLog.1.Action</li>\n <li><code>messageLog</code>:\n ESB.Infrastructure.US.Log.BusinessLog.2.AuditLog.1.Action</li>\n </ul>\n </p>\n <p>\n <b>Configuration </b><i>(where deviating from\n JmsTransactionalStorage)</i><b>:</b>\n <table border=\\\"1\\\">\n <tr>\n <th>attributes</th>\n <th>description</th>\n <th>default</th>\n </tr>\n </table>\n </p>",
      "parent": "org.frankframework.jms.JmsTransactionalStorage",
      "elementNames": ["EsbJmsErrorStorage", "EsbJmsMessageLog"],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "EsbSoapValidator",
      "fullName": "org.frankframework.extensions.esb.EsbSoapValidator",
      "description": "XmlValidator that will automatically add the SOAP envelope XSD and the ESB XSD (e.g. a CommonMessageHeader.xsd)\n to the set of XSDs used for validation.",
      "parent": "org.frankframework.soap.SoapValidator",
      "elementNames": [
        "EsbSoapInputValidator",
        "EsbSoapOutputValidator",
        "EsbSoapValidatorPipe"
      ],
      "attributes": [
        {
          "name": "direction",
          "enum": "org.frankframework.extensions.esb.EsbSoapValidator.Direction"
        },
        {
          "name": "mode",
          "enum": "org.frankframework.extensions.esb.EsbSoapWrapperPipe.Mode"
        },
        {
          "name": "cmhVersion",
          "description": "Only used when <code>mode=reg</code>!</b> Sets the Common Message Header version. 1 or 2",
          "default": "1",
          "type": "int"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "EsbSoapWrapperPipe",
      "fullName": "org.frankframework.extensions.esb.EsbSoapWrapperPipe",
      "description": "Extension to SoapWrapperPipe for separate modes.\n\n <p><b>Configuration </b><i>(where deviating from SoapWrapperPipe)</i><b>:</b>\n <table border=\\\"1\\\">\n <tr><th>attributes</th><th>description</th><th>default</th></tr>\n <tr><td>{@link #setMode(Mode) mode}</td><td>either <code>i2t</code> (ifsa2tibco), <code>reg</code> (regular) or <code>bis</code> (Business Integration Services)</td><td>reg</td></tr>\n <tr><td>{@link #setCmhVersion(int) cmhVersion}</td><td>(only used when <code>mode=reg</code>) Common Message Header version (1 or 2)</td><td>1 when <code>mode=reg</code>, 0 otherwise</td></tr>\n <tr><td>{@link #setSoapHeaderSessionKey(String) soapHeaderSessionKey}</td><td>if direction=<code>unwrap</code>: </td><td>soapHeader</td></tr>\n <tr><td>{@link #setSoapHeaderStyleSheet(String) soapHeaderStyleSheet}</td><td>if direction=<code>wrap</code> and mode=<code>i2t</code>:</td><td>/xml/xsl/esb/soapHeader.xsl</td></tr>\n <tr><td></td><td>if direction=<code>wrap</code> and mode=<code>reg</code>:</td><td>TODO (for now identical to the \\\"<code>i2t</code>\\\" SOAP Header)</td></tr>\n <tr><td></td><td>if direction=<code>wrap</code> and mode=<code>bis</code>:</td><td>/xml/xsl/esb/bisSoapHeader.xsl</td></tr>\n <tr><td>{@link #setSoapBodyStyleSheet(String) soapBodyStyleSheet}</td><td>if direction=<code>wrap</code> and mode=<code>reg</code>:</td><td>/xml/xsl/esb/soapBody.xsl</td></tr>\n <tr><td></td><td>if direction=<code>wrap</code> and mode=<code>bis</code>:</td><td>/xml/xsl/esb/bisSoapBody.xsl</td></tr>\n <tr><td>{@link #setAddOutputNamespace(boolean) addOutputNamespace}</td><td>(only used when <code>direction=wrap</code>) when <code>true</code>, <code>outputNamespace</code> is automatically set using the parameters (if $messagingLayer='P2P' then 'http://nn.nl/XSD/$businessDomain/$applicationName/$applicationFunction' else is serviceContext is not empty 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceContext/$serviceContextVersion/$operationName/$operationVersion' else 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceVersion/$operationName/$operationVersion')</td><td><code>false</code></td></tr>\n <tr><td>{@link #setRetrievePhysicalDestination(boolean) retrievePhysicalDestination}</td><td>(only used when <code>direction=wrap</code>) when <code>true</code>, the physical destination is retrieved from the queue instead of using the parameter <code>destination</code></td><td><code>true</code></td></tr>\n <tr><td>{@link #setUseFixedValues(boolean) useFixedValues}</td><td>If <code>true</code>, the fields CorrelationId, MessageId and Timestamp will have a fixed value (for testing purposes only)</td><td><code>false</code></td></tr>\n <tr><td>{@link #setFixResultNamespace(boolean) fixResultNamespace}</td><td>(only used when <code>direction=wrap</code>) when <code>true</code> and the Result tag already exists, the namespace is changed</td><td><code>false</code></td></tr>\n <tr><td>{@link #setP2pAlias(String) p2pAlias}</td><td>When the messagingLayer part of the destination has this value interpret it as P2P</td><td><code></code></td></tr>\n <tr><td>{@link #setEsbAlias(String) esbAlias}</td><td>When the messagingLayer part of the destination has this value interpret it as ESB</td><td><code></code></td></tr>\n </table></p>\n <p>\n <b>/xml/xsl/esb/soapHeader.xsl:</b>\n <table border=\\\"1\\\">\n <tr><th>element</th><th>level</th><th>value</th></tr>\n <tr><td>MessageHeader</td><td>0</td><td>&nbsp;</td></tr>\n <tr><td>&nbsp;</td><td>&nbsp;</td><td>xmlns=$namespace</td></tr>\n <tr><td>From</td><td>1</td><td>&nbsp;</td></tr>\n <tr><td>Id</td><td>2</td><td>$fromId</td></tr>\n <tr><td>To</td><td>1</td><td>&nbsp;</td></tr>\n <tr><td>Location</td><td>2</td><td>if $messagingLayer='P2P' then<br/>&nbsp;$messagingLayer.$businessDomain.$applicationName.$applicationFunction.$paradigm<br/>else if $serviceContext is not empty then<br/>&nbsp;$messagingLayer.$businessDomain.$serviceLayer.$serviceName.$serviceContext.$serviceContextVersion.$operationName.$operationVersion.$paradigm<br/>else<br/>&nbsp;$messagingLayer.$businessDomain.$serviceLayer.$serviceName.$serviceVersion.$operationName.$operationVersion.$paradigm</td></tr>\n <tr><td>HeaderFields</td><td>1</td><td>&nbsp;</td></tr>\n <tr><td>CPAId</td><td>2</td><td>$cpaId</td></tr>\n <tr><td>ConversationId</td><td>2</td><td>$conversationId</td></tr>\n <tr><td>CorrelationId</td><td>2</td><td>$correlationId (if empty then skip this element)</td></tr>\n <tr><td>MessageId</td><td>2</td><td>$messageId</td></tr>\n <tr><td>ExternalRefToMessageId</td><td>2</td><td>$externalRefToMessageId (if empty then skip this element)</td></tr>\n <tr><td>Timestamp</td><td>2</td><td>$timestamp</td></tr>\n <tr><td>TransactionId</td><td>2</td><td>$transactionId (only used when $mode=reg and $cmhVersion=2; if empty then skip this element)</td></tr>\n <tr><td>Service</td><td>1</td><td>&nbsp;</td></tr>\n <tr><td>Name</td><td>2</td><td>$serviceName</td></tr>\n <tr><td>Context</td><td>2</td><td>$serviceContext</td></tr>\n <tr><td>Action</td><td>2</td><td>&nbsp;</td></tr>\n <tr><td>Paradigm</td><td>3</td><td>$paradigm</td></tr>\n <tr><td>Name</td><td>3</td><td>$operationName</td></tr>\n <tr><td>Version</td><td>3</td><td>$operationVersion</td></tr>\n </table>\n <b>Parameters:</b>\n <table border=\\\"1\\\">\n <tr><th>name</th><th>default</th></tr>\n <tr><td>mode</td><td>copied from <code>mode</code></td></tr>\n <tr><td>cmhVersion</td><td>copied from <code>cmhVersion</code></td></tr>\n <tr><td>namespace</td><td>\\\"http://nn.nl/XSD/Generic/MessageHeader/2\\\" (only when $mode=reg and $cmhVersion=2)<br/>\\\"http://nn.nl/XSD/Generic/MessageHeader/1\\\" (otherwise)</td></tr>\n <tr><td>businessDomain</td><td>&nbsp;</td></tr>\n <tr><td>serviceName</td><td>&nbsp;</td></tr>\n <tr><td>serviceContext</td><td>&nbsp;</td></tr>\n <tr><td>service(Context)Version</td><td>1</td></tr>\n <tr><td>operationName</td><td>&nbsp;</td></tr>\n <tr><td>operationVersion</td><td>1</td></tr>\n <tr><td>paradigm</td><td>&nbsp;</td></tr>\n <tr><td>applicationName</td><td>&nbsp;</td></tr>\n <tr><td>applicationFunction</td><td>&nbsp;</td></tr>\n <tr><td>messagingLayer</td><td>ESB</td></tr>\n <tr><td>serviceLayer</td><td>&nbsp;</td></tr>\n <tr><td>destination</td><td>if not empty this parameter contains the preceding parameters as described in 'Location' in the table above</td></tr>\n <tr><td>fromId</td><td>property 'instance.name'</td></tr>\n <tr><td>cpaId</td><td>if applicable, copied from the original (received) SOAP Header, else 'n/a'</td></tr>\n <tr><td>conversationId</td><td>if applicable, copied from the original (received) SOAP Header, else parameter pattern '{hostname}_{uid}'</td></tr>\n <tr><td>messageId</td><td>parameter pattern '{hostname}_{uid}'</td></tr>\n <tr><td>correlationId</td><td>if $paradigm equals 'Response' then copied from MessageId in the original (received) SOAP Header</td></tr>\n <tr><td>externalRefToMessageId</td><td>if applicable, copied from the original (received) SOAP Header</td></tr>\n <tr><td>timestamp</td><td>parameter pattern '{now,date,yyyy-MM-dd'T'HH:mm:ss}'</td></tr>\n <tr><td>transactionId</td><td>if applicable, copied from the original (received) SOAP Header</td></tr>\n </table>\n </p>\n <p>\n <b>/xml/xsl/esb/bisSoapHeader.xsl:</b>\n <table border=\\\"1\\\">\n <tr><th>element</th><th>level</th><th>value</th></tr>\n <tr><td>MessageHeader</td><td>0</td><td>&nbsp;</td></tr>\n <tr><td>&nbsp;</td><td>&nbsp;</td><td>xmlns=$namespace</td></tr>\n <tr><td>From</td><td>1</td><td>&nbsp;</td></tr>\n <tr><td>Id</td><td>2</td><td>$fromId</td></tr>\n <tr><td>HeaderFields</td><td>1</td><td>&nbsp;</td></tr>\n <tr><td>ConversationId</td><td>2</td><td>$conversationId</td></tr>\n <tr><td>MessageId</td><td>2</td><td>$messageId</td></tr>\n <tr><td>ExternalRefToMessageId</td><td>2</td><td>$externalRefToMessageId (if empty then skip this element)</td></tr>\n <tr><td>Timestamp</td><td>2</td><td>$timestamp</td></tr>\n </table>\n <b>Parameters:</b>\n <table border=\\\"1\\\">\n <tr><th>name</th><th>default</th></tr>\n <tr><td>namespace</td><td>\\\"http://www.ing.com/CSP/XSD/General/Message_2\\\"</td></tr>\n <tr><td>fromId</td><td>property 'instance.name'</td></tr>\n <tr><td>conversationId</td><td>if applicable, copied from the original (received) SOAP Header, else parameter pattern '{hostname}_{uid}'</td></tr>\n <tr><td>messageId</td><td>parameter pattern '{hostname}_{uid}'</td></tr>\n <tr><td>externalRefToMessageId</td><td>if applicable, copied from MessageId in the original (received) SOAP Header</td></tr>\n <tr><td>timestamp</td><td>parameter pattern '{now,date,yyyy-MM-dd'T'HH:mm:ss}'</td></tr>\n </table>\n </p>\n <p>\n <b>/xml/xsl/esb/soapBody.xsl:</b>\n <table border=\\\"1\\\">\n <tr><th>element</th><th>level</th><th>value</th></tr>\n <tr><td>[Payload]</td><td>0</td><td>if $errorCode is empty then the complete payload will be copied and if not already existing a Result tag will be added<br/>else only the root tag will be copied</td></tr>\n <tr><td>Result</td><td>1</td><td>this element will be the last child in the copied root tag (only applicable for $paradigm 'Response'); if $errorCode is empty and a Result tag already exists then skip this element including its child elements</td></tr>\n <tr><td>&nbsp;</td><td>&nbsp;</td><td>xmlns=$namespace</td></tr>\n <tr><td>Status</td><td>2</td><td>if $errorCode is empty then 'OK'<br/>else 'ERROR'</td></tr>\n <tr><td>ErrorList</td><td>2</td><td>if $errorCode is empty then skip this element including its child elements</td></tr>\n <tr><td>Error</td><td>3</td><td>&nbsp;</td></tr>\n <tr><td>Code</td><td>4</td><td>$errorCode</td></tr>\n <tr><td>Reason</td><td>4</td><td>if $errorReason is not empty then $errorReason<br/>else it will be derived from $errorCode:\n   <table border=\\\"1\\\">\n   <tr><th>errorCode</th><th>errorText</th></tr>\n   <tr><td>ERR6002</td><td>Service Interface Request Time Out</td></tr>\n   <tr><td>ERR6003</td><td>Invalid Request Message</td></tr>\n   <tr><td>ERR6004</td><td>Invalid Backend system response</td></tr>\n   <tr><td>ERR6005</td><td>Backend system failure response</td></tr>\n   <tr><td>ERR6999</td><td>Unspecified Errors</td></tr>\n  </table>\n </td></tr>\n <tr><td>Service</td><td>4</td><td>&nbsp;</td></tr>\n <tr><td>Name</td><td>5</td><td>$serviceName</td></tr>\n <tr><td>Context</td><td>5</td><td>$serviceContext</td></tr>\n <tr><td>Action</td><td>5</td><td>&nbsp;</td></tr>\n <tr><td>Paradigm</td><td>6</td><td>$paradigm</td></tr>\n <tr><td>Name</td><td>6</td><td>$operationName</td></tr>\n <tr><td>Version</td><td>6</td><td>$operationVersion</td></tr>\n <tr><td>DetailList</td><td>4</td><td>if $errorDetailCode is empty then skip this element including its child elements</td></tr>\n <tr><td>Detail</td><td>5</td><td>&nbsp;</td></tr>\n <tr><td>Code</td><td>6</td><td>$errorDetailCode</td></tr>\n <tr><td>Text</td><td>6</td><td>$errorDetailText (if empty then skip this element)</td></tr>\n </table>\n <b>Parameters:</b>\n <table border=\\\"1\\\">\n <tr><th>name</th><th>default</th></tr>\n <tr><td>mode</td><td>copied from <code>mode</code></td></tr>\n <tr><td>cmhVersion</td><td>copied from <code>cmhVersion</code></td></tr>\n <tr><td>namespace</td><td>\\\"http://nn.nl/XSD/Generic/MessageHeader/2\\\" (only when $mode=reg and $cmhVersion=2)<br/>\\\"http://nn.nl/XSD/Generic/MessageHeader/1\\\" (otherwise)</td></tr>\n <tr><td>errorCode</td><td>&nbsp;</td></tr>\n <tr><td>errorReason</td><td>&nbsp;</td></tr>\n <tr><td>errorDetailCode</td><td>&nbsp;</td></tr>\n <tr><td>errorDetailText</td><td>&nbsp;</td></tr>\n <tr><td>serviceName</td><td>&nbsp;</td></tr>\n <tr><td>serviceContext</td><td>&nbsp;</td></tr>\n <tr><td>operationName</td><td>&nbsp;</td></tr>\n <tr><td>operationVersion</td><td>1</td></tr>\n <tr><td>paradigm</td><td>&nbsp;</td></tr>\n <tr><td>fixResultNamespace</td><td>false</td></tr>\n </table>\n </p>\n <p>\n <b>/xml/xsl/esb/bisSoapBody.xsl:</b>\n <table border=\\\"1\\\">\n <tr><th>element</th><th>level</th><th>value</th></tr>\n <tr><td>[Payload]</td><td>0</td><td>if $errorCode is empty then the complete payload will be copied and if not already existing a Result tag will be added<br/>else only the root tag will be copied</td></tr>\n <tr><td>Result</td><td>1</td><td>this element will be the last child in the copied root tag (only applicable for $paradigm 'Response' and 'Reply'); if $errorCode is empty and a Result tag already exists then skip this element including its child elements</td></tr>\n <tr><td>&nbsp;</td><td>&nbsp;</td><td>xmlns=$namespace</td></tr>\n <tr><td>Status</td><td>2</td><td>if $errorCode is empty then 'OK'<br/>else 'ERROR'</td></tr>\n <tr><td>ErrorList</td><td>2</td><td>if $errorCode is empty then skip this element including its child elements</td></tr>\n <tr><td>Error</td><td>3</td><td>&nbsp;</td></tr>\n <tr><td>Code</td><td>4</td><td>$errorCode</td></tr>\n <tr><td>Reason</td><td>4</td><td>if $errorReason is not empty then $errorReason<br/>else it will be derived from $errorCode:\n   <table border=\\\"1\\\">\n   <tr><th>errorCode</th><th>errorText</th></tr>\n   <tr><td>ERR6002</td><td>Service Interface Request Time Out</td></tr>\n   <tr><td>ERR6003</td><td>Invalid Request Message</td></tr>\n   <tr><td>ERR6004</td><td>Invalid Backend system response</td></tr>\n   <tr><td>ERR6005</td><td>Backend system failure response</td></tr>\n   <tr><td>ERR6999</td><td>Unspecified Errors</td></tr>\n  </table>\n </td></tr>\n <tr><td>Service</td><td>4</td><td>&nbsp;</td></tr>\n <tr><td>Name</td><td>5</td><td>$serviceName</td></tr>\n <tr><td>Context</td><td>5</td><td>$serviceContext</td></tr>\n <tr><td>Action</td><td>5</td><td>&nbsp;</td></tr>\n <tr><td>Name</td><td>6</td><td>$operationName</td></tr>\n <tr><td>Version</td><td>6</td><td>$operationVersion</td></tr>\n <tr><td>DetailList</td><td>4</td><td>if $errorDetailCode is empty then skip this element including its child elements</td></tr>\n <tr><td>Detail</td><td>5</td><td>&nbsp;</td></tr>\n <tr><td>Code</td><td>6</td><td>$errorDetailCode</td></tr>\n <tr><td>Text</td><td>6</td><td>$errorDetailText (if empty then skip this element)</td></tr>\n </table>\n <b>Parameters:</b>\n <table border=\\\"1\\\">\n <tr><th>name</th><th>default</th></tr>\n <tr><td>namespace</td><td>\\\"http://www.ing.com/CSP/XSD/General/Message_2\\\"</td></tr>\n <tr><td>errorCode</td><td>&nbsp;</td></tr>\n <tr><td>errorReason</td><td>&nbsp;</td></tr>\n <tr><td>errorDetailCode</td><td>&nbsp;</td></tr>\n <tr><td>errorDetailText</td><td>&nbsp;</td></tr>\n <tr><td>serviceName</td><td>&nbsp;</td></tr>\n <tr><td>serviceContext</td><td>&nbsp;</td></tr>\n <tr><td>operationName</td><td>&nbsp;</td></tr>\n <tr><td>operationVersion</td><td>1</td></tr>\n <tr><td>paradigm</td><td>&nbsp;</td></tr>\n </table>\n </p>",
      "parent": "org.frankframework.soap.SoapWrapperPipe",
      "elementNames": [
        "EsbSoapInputWrapper",
        "EsbSoapOutputWrapper",
        "EsbSoapWrapperPipe"
      ],
      "attributes": [
        {
          "name": "mode",
          "default": "REG",
          "enum": "org.frankframework.extensions.esb.EsbSoapWrapperPipe.Mode"
        },
        {
          "name": "cmhVersion",
          "description": "<b>Only used when <code>mode=reg</code>!</b> Sets the Common Message Header version. 1 or 2",
          "default": "1",
          "type": "int"
        },
        {
          "name": "addOutputNamespace",
          "description": "(only used when <code>direction=wrap</code>) when <code>true</code>, <code>outputNamespace</code> is automatically set using the parameters (if $messagingLayer='P2P' then 'http://nn.nl/XSD/$businessDomain/$applicationName/$applicationFunction' else is serviceContext is not empty 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceContext/$serviceContextVersion/$operationName/$operationVersion' else 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceVersion/$operationName/$operationVersion')",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "retrievePhysicalDestination",
          "description": "(only used when <code>direction=wrap</code>) when <code>true</code>, the physical destination is retrieved from the queue instead of using the parameter <code>destination</code>",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "useFixedValues",
          "description": "If <code>true</code>, the fields CorrelationId, MessageId and Timestamp will have a fixed value (for testing purposes only)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "fixResultNamespace",
          "description": "(only used when <code>direction=wrap</code>) when <code>true</code> and the Result tag already exists, the namespace is changed",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "p2pAlias",
          "description": "When the messagingLayer part of the destination has this value interpret it as P2P"
        },
        {
          "name": "esbAlias",
          "description": "When the messagingLayer part of the destination has this value interpret it as ESB"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "EscapePipe",
      "fullName": "org.frankframework.pipes.EscapePipe",
      "description": "Pipe that performs translations between special characters and their xml equivalents.\n <p>When direction=cdata2text all cdata nodes are converted to text nodes without any other translations.</p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["EscapePipe"],
      "attributes": [
        {
          "name": "substringStart",
          "description": "substring to start translation"
        },
        {
          "name": "substringEnd",
          "description": "substring to end translation"
        },
        {
          "name": "direction",
          "enum": "org.frankframework.pipes.EscapePipe.Direction"
        },
        {
          "name": "encodeSubstring",
          "description": "when set <code>true</code> special characters in <code>substringstart</code> and <code>substringend</code> are first translated to their xml equivalents",
          "default": "false",
          "type": "bool"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "EtagHandlerPipe",
      "fullName": "org.frankframework.pipes.EtagHandlerPipe",
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "Please configure eTag caching on the ApiListener"
      },
      "description": "Pipe to manage RESTFUL etag caching",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["EtagHandlerPipe"],
      "attributes": [
        {
          "name": "action",
          "enum": "org.frankframework.pipes.EtagHandlerPipe.EtagAction"
        },
        {
          "name": "uriPattern"
        },
        {
          "name": "restPath"
        }
      ]
    },
    {
      "name": "ExceptionPipe",
      "fullName": "org.frankframework.pipes.ExceptionPipe",
      "description": "Pipe that throws an exception, based on the input message.\n <br/>\n The `success` forward is only used when the (deprecated) attribute `throwException` has been set to `false`, otherwise the (default) `exception` forward will be used.",
      "parent": "org.frankframework.pipes.AbstractPipe",
      "elementNames": ["ExceptionPipe"],
      "attributes": [
        {
          "name": "throwException",
          "deprecated": {
            "forRemoval": true,
            "since": "9.0",
            "description": "The {@literal success} forward and {@literal throwException} attribute should not be used anymore"
          },
          "description": "When <code>true</code>, a PipeRunException is thrown. Otherwise, the output is only logged as an error (and no rollback is performed).",
          "default": "true",
          "type": "bool"
        }
      ],
      "forwards": [
        {
          "name": "success",
          "description": "success Forward is deprecated and will be removed. Invoked when `throwException` is false"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Errorhandling"
        }
      ],
      "notes": [
        {
          "type": "WARNING",
          "value": "The attribute `throwException` has been deprecated and thus the `success` forward will be removed along with the `throwException` attribute."
        }
      ]
    },
    {
      "name": "ExchangeFileSystemSender",
      "fullName": "org.frankframework.senders.ExchangeFileSystemSender",
      "description": "Implementation of a {@link AbstractFileSystemSender} that enables to manipulate messages in an Exchange folder.",
      "parent": "org.frankframework.filesystem.AbstractFileSystemSender",
      "elementNames": ["ExchangeFileSystemSender"],
      "attributes": [
        {
          "name": "mailAddress",
          "description": "The mail address of the mailbox connected to (also used for auto discovery)"
        },
        {
          "name": "clientId",
          "description": "Client ID that represents a registered application in Azure AD which could be found at Azure AD -> App Registrations -> MyApp -> Overview."
        },
        {
          "name": "clientSecret",
          "description": "Client secret that belongs to registered application in Azure AD which could be found at Azure AD -> App Registrations -> MyApp -> Certificates and Secrets"
        },
        {
          "name": "tenantId",
          "description": "Tenant ID that represents the tenant in which the registered application exists within Azure AD which could be found at Azure AD -> App Registrations -> MyApp -> Overview."
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain client ID and secret or username and password for authentication to Exchange mail server.\n If the attribute tenantId is empty, the deprecated Basic Authentication method is used.\n If the attribute tenantId is not empty, the username and password are treated as the client ID and secret."
        },
        {
          "name": "baseFolder",
          "description": "Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used"
        },
        {
          "name": "replyAddressFields",
          "description": "Comma separated list of fields to try as response address",
          "default": "<code>replyTo,from,sender,Return-Path</code>"
        },
        {
          "name": "proxyHost",
          "description": "proxy host"
        },
        {
          "name": "proxyPort",
          "description": "proxy port",
          "default": "8080",
          "type": "int"
        },
        {
          "name": "proxyUsername",
          "description": "proxy username"
        },
        {
          "name": "proxyPassword",
          "description": "proxy password"
        },
        {
          "name": "proxyAuthAlias",
          "description": "proxy authAlias"
        },
        {
          "name": "proxyDomain",
          "description": "proxy domain"
        },
        {
          "name": "keystore",
          "description": "Resource url to keystore or certificate. If none specified, the JVMs default keystore will be used."
        },
        {
          "name": "keystoreType",
          "description": "Type of keystore",
          "default": "pkcs12",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "keystoreAuthAlias",
          "description": "Authentication alias used to obtain keystore password"
        },
        {
          "name": "keystorePassword",
          "description": "Default password to access keystore"
        },
        {
          "name": "keyManagerAlgorithm",
          "description": "Key manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "keystoreAlias",
          "description": "Alias to obtain specific certificate or key in keystore"
        },
        {
          "name": "keystoreAliasAuthAlias",
          "description": "Authentication alias to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keystoreAliasPassword",
          "description": "Default password to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "truststore",
          "description": "Resource url to truststore. If none specified, the JVMs default truststore will be used."
        },
        {
          "name": "truststoreType",
          "description": "Type of truststore",
          "default": "jks",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "truststoreAuthAlias",
          "description": "Authentication alias used to obtain truststore password"
        },
        {
          "name": "truststorePassword",
          "description": "Default password to access truststore"
        },
        {
          "name": "trustManagerAlgorithm",
          "description": "Trust manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "verifyHostname",
          "description": "If <code>true</code>, the hostname in the certificate will be checked against the actual hostname of the peer",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "allowSelfSignedCertificates",
          "description": "If <code>true</code>, self signed certificates are accepted",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "ignoreCertificateExpiredException",
          "description": "If <code>true</code>, CertificateExpiredExceptions are ignored",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "ExchangeFolderSender",
      "fullName": "org.frankframework.senders.ExchangeFolderSender",
      "deprecated": {
        "forRemoval": true,
        "since": "",
        "description": "please use the 'ExchangeFileSystemSender' instead"
      },
      "description": "Implementation of a {@link AbstractFileSystemSender} that enables to manipulate messages in an Exchange folder.",
      "parent": "org.frankframework.senders.ExchangeFileSystemSender",
      "elementNames": ["ExchangeFolderSender"]
    },
    {
      "name": "ExchangeMailListener",
      "fullName": "org.frankframework.receivers.ExchangeMailListener",
      "description": "Microsoft Exchange Implementation of a mailbox based filesystem.",
      "parent": "org.frankframework.filesystem.AbstractFileSystemListener",
      "elementNames": ["ExchangeMailListener"],
      "attributes": [
        {
          "name": "mailAddress",
          "description": "The mail address of the mailbox connected to (also used for auto discovery)"
        },
        {
          "name": "clientId",
          "description": "Client ID that represents a registered application in Azure AD which could be found at Azure AD -> App Registrations -> MyApp -> Overview."
        },
        {
          "name": "clientSecret",
          "description": "Client secret that belongs to registered application in Azure AD which could be found at Azure AD -> App Registrations -> MyApp -> Certificates and Secrets"
        },
        {
          "name": "tenantId",
          "description": "Tenant ID that represents the tenant in which the registered application exists within Azure AD which could be found at Azure AD -> App Registrations -> MyApp -> Overview."
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain client ID and secret or username and password for authentication to Exchange mail server.\n If the attribute tenantId is empty, the deprecated Basic Authentication method is used.\n If the attribute tenantId is not empty, the username and password are treated as the client ID and secret."
        },
        {
          "name": "baseFolder",
          "description": "Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used"
        },
        {
          "name": "replyAddressFields",
          "description": "Comma separated list of fields to try as response address",
          "default": "<code>replyTo,from,sender,Return-Path</code>"
        },
        {
          "name": "proxyHost",
          "description": "proxy host"
        },
        {
          "name": "proxyPort",
          "description": "proxy port",
          "default": "8080",
          "type": "int"
        },
        {
          "name": "proxyUsername",
          "description": "proxy username"
        },
        {
          "name": "proxyPassword",
          "description": "proxy password"
        },
        {
          "name": "proxyAuthAlias",
          "description": "proxy authAlias"
        },
        {
          "name": "proxyDomain",
          "description": "proxy domain"
        },
        {
          "name": "keystore",
          "description": "Resource url to keystore or certificate. If none specified, the JVMs default keystore will be used."
        },
        {
          "name": "keystoreType",
          "description": "Type of keystore",
          "default": "pkcs12",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "keystoreAuthAlias",
          "description": "Authentication alias used to obtain keystore password"
        },
        {
          "name": "keystorePassword",
          "description": "Default password to access keystore"
        },
        {
          "name": "keyManagerAlgorithm",
          "description": "Key manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "keystoreAlias",
          "description": "Alias to obtain specific certificate or key in keystore"
        },
        {
          "name": "keystoreAliasAuthAlias",
          "description": "Authentication alias to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keystoreAliasPassword",
          "description": "Default password to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "truststore",
          "description": "Resource url to truststore. If none specified, the JVMs default truststore will be used."
        },
        {
          "name": "truststoreType",
          "description": "Type of truststore",
          "default": "jks",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "truststoreAuthAlias",
          "description": "Authentication alias used to obtain truststore password"
        },
        {
          "name": "truststorePassword",
          "description": "Default password to access truststore"
        },
        {
          "name": "trustManagerAlgorithm",
          "description": "Trust manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "verifyHostname",
          "description": "If <code>true</code>, the hostname in the certificate will be checked against the actual hostname of the peer",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "allowSelfSignedCertificates",
          "description": "If <code>true</code>, self signed certificates are accepted",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "ignoreCertificateExpiredException",
          "description": "If <code>true</code>, CertificateExpiredExceptions are ignored",
          "default": "false",
          "type": "bool"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ]
    },
    {
      "name": "ExecuteQueryJob",
      "fullName": "org.frankframework.scheduler.job.ExecuteQueryJob",
      "description": "Scheduled job to execute JDBC Queries using a {@link FixedQuerySender}.\n \n <h3>Possible cron expressions:</h3>\n <p>\n A \\\"Cron-Expression\\\" is a string comprised of 6 or 7 fields separated by\n white space. The 6 mandatory and 1 optional fields are as follows:<br/>\n </p>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Field Name</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Values</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Special Characters</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Seconds</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Minutes</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Hours</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-23</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-31</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-12 or JAN-DEC</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-Week</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-7 or SUN-SAT</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C #</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Year (Optional)</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">>empty, 1970-2099</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n </table>\n </p>\n\n <p>The '*' character is used to specify all values. For example, \\\"*\\\" in\n the minute field means \\\"every minute\\\".</p>\n\n <p>The '?' character is allowed for the day-of-month and day-of-week fields.\n It is used to specify 'no specific value'. This is useful when you need\n to specify something in one of the two fields, but not the other. See the\n examples below for clarification.</p>\n\n <p>The '-' character is used to specify ranges For example \\\"10-12\\\" in the\n hour field means \\\"the hours 10, 11 and 12\\\".</p>\n\n <p>The ',' character is used to specify additional values. For example\n \\\"MON,WED,FRI\\\" in the day-of-week field means \\\"the days Monday,\n Wednesday, and Friday\\\".</p>\n\n <p>The '/' character is used to specify increments. For example \\\"0/15\\\" in\n the seconds field means \\\"the seconds 0, 15, 30, and 45\\\".  And \\\"5/15\\\" in\n the seconds field means \\\"the seconds 5, 20, 35, and 50\\\".  You can also\n specify '/' after the '*' character - in this case '*' is equivalent to\n having '0' before the '/'.</p>\n\n <p>The 'L' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"last\\\", but it has different meaning in each of\n the two fields.  For example, the value \\\"L\\\" in the  day-of-month field means\n \\\"the last day of the month\\\" - day 31 for  January, day 28 for February on\n non-leap years.  If used in the day-of-week field by itself, it simply\n means \\\"7\\\" or \\\"SAT\\\". But if used in the day-of-week field after another value,\n it means \\\"the last xxx day of the month\\\" - for example \\\"6L\\\" means\n \\\"the last Friday of the month\\\".  When using the 'L' option, it is\n important not to specify lists, or ranges of values, as you'll get confusing\n results.</p>\n\n <p>The '#' character is allowed for the day-of-week field.  This character\n is used to specify \\\"the nth\\\" XX day of the month.  For example, the value\n of \\\"6#3\\\" in the day-of-week field means the third Friday of the month\n (day 6 = Friday and \\\"#3\\\" = the 3rd one in the month). Other\n examples: \\\"2#1\\\" = the first Monday of the month and  \\\"4#5\\\" = the fifth\n Wednesday of the month.  Note that if you specify \\\"#5\\\" and there is not 5 of\n the given day-of-week in the month, then no firing will occur that month.</p>\n\n <p>The 'C' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"calendar\\\".  This means values are\n calculated against the associated calendar, if any.  If no calendar is\n associated, then it is equivalent to having an all-inclusive calendar.\n A value of \\\"5C\\\" in the day-of-month field means \\\"the first day included by\n the calendar on or after the 5th\\\".  A value of \\\"1C\\\" in the day-of-week field\n means \\\"the first day included by the calendar on or after Sunday\\\".</p>\n\n <p>The legal characters and the names of months and days of the week are not\n case sensitive.</p>\n\n <p>Here are some full examples:<br/>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Expression</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Meaning</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0 12 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 12pm (noon) every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? 2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day during the year 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 * 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:59pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14,18 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0-5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:05pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 10,44 14 ? 3 WED\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 2:10pm and at 2:44pm every Wednesday in the month of March.</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * MON-FRI\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 15 * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the 15th day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 L * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L 2002-2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on every last friday of every month during the years 2002, 2003, 2004 and 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6#3\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the third Friday of every month</td>\n   </tr>\n </table>\n </p>\n\n <p>Pay attention to the effects of '?' and '*' in the day-of-week and\n day-of-month fields!</p>",
      "parent": "org.frankframework.scheduler.AbstractJobDef",
      "elementNames": ["ExecuteQueryJob"],
      "attributes": [
        {
          "name": "query",
          "mandatory": true,
          "description": "The SQL query text to be executed."
        },
        {
          "name": "datasourceName",
          "description": "JNDI name of datasource to be used.",
          "default": "<code>jdbc.datasource.default</code>"
        },
        {
          "name": "queryTimeout",
          "description": "The number of seconds the database driver will wait for a statement to execute. If the limit is exceeded, a TimeoutException is thrown. 0 means no timeout",
          "default": "0",
          "type": "int"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "Support for specifying both a day-of-week and a day-of-month\n          value is not complete (you'll need to use the '?' character in on of these fields)."
        },
        {
          "type": "INFO",
          "value": "Be careful when setting fire times between mid-night and 1:00 AM -\n          \"daylight savings\" can cause a skip or a repeat depending on whether\n          the time moves back or jumps forward."
        },
        {
          "type": "INFO",
          "value": "Specified in the Configuration.xml inside a <code>&lt;scheduler&gt;</code> element. \n          The scheduler element must be a direct child of configuration, not of adapter."
        },
        {
          "type": "TIP",
          "value": "All registered jobs are displayed in the Frank!Console under 'Scheduler'."
        },
        {
          "type": "WARNING",
          "value": "Support for the features described for the 'C' character is not complete."
        }
      ]
    },
    {
      "name": "Exit",
      "fullName": "org.frankframework.core.PipeLineExit",
      "description": "The Exit of a Pipeline that specifies the end state of a PipeLine. The state is returned to the receiver as well as\n the optionally specified http status code. Each Exit should have a unique name. See {@link PipeLineExits Exits}\n for examples.\n <br/><br/>\n When a Pipeline doesn't have an Exits element configured it will be initialized with one Exit having name <code>READY</code> and\n state <code>SUCCESS</code>.\n <br/><br/>\n The name of an Exit can be referenced by the <code>path</code> attribute of a Forward within a Pipe.",
      "elementNames": ["Exit"],
      "attributes": [
        {
          "name": "name",
          "mandatory": true,
          "description": "The name of the Exit that can be referenced by a {@link PipeForward}'s <code>path</code> attribute. When a Pipeline doesn't have an Exits\n element configured it will be initialized with one Exit having name <code>READY</code> (and state {@link PipeLine.ExitState#SUCCESS SUCCESS})"
        },
        {
          "name": "path",
          "deprecated": {
            "forRemoval": true,
            "since": "7.8.0",
            "description": "The attribute 'path' has been renamed to: 'name'"
          }
        },
        {
          "name": "state",
          "mandatory": true,
          "description": "The state of the Pipeline that is returned to the Receiver for this Exit. When a Pipeline doesn't have an Exits\n element configured it will be initialized with one Exit having state {@link PipeLine.ExitState#SUCCESS SUCCESS} (and name <code>READY</code>)",
          "enum": "org.frankframework.core.PipeLine.ExitState"
        },
        {
          "name": "code",
          "description": "HTTP statusCode e.g. <code>500</code>",
          "default": "200",
          "type": "int"
        },
        {
          "name": "responseRoot",
          "description": "Configures the responseRoot in the OpenAPI schema for this exit. If not set, the responseRoot value of the validator will be used. If that contains multiple (comma separated) values, the first will be used for the exits with state <code>SUCCESS</code>, the last for the other exits."
        },
        {
          "name": "empty",
          "description": "If using RestListener and set to <code>true</code>, this removes the output and shows a blank page, the output is still logged in the ladybug testtool",
          "default": "<code>false</code>",
          "type": "bool"
        },
        {
          "name": "skipWrapping",
          "description": "If set to <code>true</code>, the output will not be wrapped by the OutputWrapper.",
          "default": "<code>false</code>",
          "type": "bool"
        },
        {
          "name": "skipValidation",
          "description": "If set to <code>true</code>, the output will not be validated or transformed by the validator.",
          "default": "<code>false</code>",
          "type": "bool"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "Exits",
      "fullName": "org.frankframework.core.PipeLineExits",
      "description": "Pipeline exit container in which all (required) {@link PipeLineExit Exit}s must be defined.\n Multiple exits may be provided each with their unique name.\n <br/><br/>\n If no exits are specified, a default one is created with name=\\\"READY\\\" and state=\\\"SUCCESS\\\".\n <br/><br/>\n <b>example:</b>\n <pre><code>&lt;Exits&gt;\n    &lt;Exit name=&quot;&lt;code&gt;READY&lt;/code&gt;&quot; state=&quot;&lt;code&gt;SUCCESS&lt;/code&gt;&quot; /&gt;\n    &lt;Exit name=&quot;Created&quot; state=&quot;ERROR&quot; code=&quot;201&quot; empty=&quot;true&quot; /&gt;\n    &lt;Exit name=&quot;NotModified&quot; state=&quot;ERROR&quot; code=&quot;304&quot; empty=&quot;true&quot; /&gt;\n    &lt;Exit name=&quot;BadRequest&quot; state=&quot;ERROR&quot; code=&quot;400&quot; empty=&quot;true&quot; /&gt;\n    &lt;Exit name=&quot;NotAuthorized&quot; state=&quot;ERROR&quot; code=&quot;401&quot; empty=&quot;true&quot; /&gt;\n    &lt;Exit name=&quot;NotAllowed&quot; state=&quot;ERROR&quot; code=&quot;403&quot; empty=&quot;true&quot; /&gt;\n    &lt;Exit name=&quot;Teapot&quot; state=&quot;SUCCESS&quot; code=&quot;418&quot; /&gt;\n    &lt;Exit name=&quot;ServerError&quot; state=&quot;ERROR&quot; code=&quot;500&quot; /&gt;\n &lt;/Exits&gt;</code></pre>",
      "elementNames": ["Exits"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "mandatory": true,
          "multiple": true,
          "roleName": "exit",
          "description": "PipeLine exits.",
          "type": "org.frankframework.core.PipeLineExit"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "FieldPositionRecordHandlerManager",
      "fullName": "org.frankframework.batch.FieldPositionRecordHandlerManager",
      "description": "Manager that decides the handlers based on the content of a field in the specified\n position in a record. The fields in the record are separated by a separator.\n The value of the specified field is taken as key in the flow-table.",
      "parent": "org.frankframework.batch.RecordHandlerManager",
      "elementNames": ["FieldPositionChild", "FieldPositionManager"],
      "attributes": [
        {
          "name": "fieldNr",
          "description": "position of field that identifies the recordtype (position of first field is 1)",
          "type": "int"
        },
        {
          "name": "separator",
          "description": "separator that separates the fields in the record"
        }
      ]
    },
    {
      "name": "FileHandler",
      "fullName": "org.frankframework.util.FileHandler",
      "deprecated": {
        "forRemoval": true,
        "since": "7.8"
      },
      "description": "FileHandler, available as {@link FileSender} and {@link FilePipe}, allows to write to or read from a file.\n\n <p>\n Actions take place on the file specified by the fileName attribute (or when\n not available the fileNameSessionKey, when fileNameSessionKey is empty too\n the input of the pipe is used as file name). When a directory is not\n specified, the fileName is expected to include the directory.\n </p>\n\n <p>\n When a file needs to be created and both the fileName and the directory are\n not specified a temporary file is created as specified by the\n java.io.File.createTempFile method using the string \\\"ibis\\\" as a\n prefix and a suffix as specified bij the writeSuffix attribute. If only\n the directory is specified, the temporary file is created the same way except\n that the temporary file is created in the specified directory.\n </p>\n\n <p>\n The pipe also support base64 en- and decoding.\n </p>\n\n <table border=\\\"1\\\">\n <p><b>Parameters:</b>\n <tr><th>name</th><th>type</th><th>remarks</th></tr>\n <tr><td></td>writeSuffix<td><i>String</i></td><td>When a parameter with name writeSuffix is present, it is used instead of the writeSuffix specified by the attribute</td></tr>\n </table>\n </p>",
      "elementNames": [],
      "attributes": [
        {
          "name": "charset",
          "description": "the charset to be used when transforming a string to a byte array and/or the other way around",
          "default": "the value of the system property file.encoding"
        },
        {
          "name": "outputType",
          "description": "either <code>string</code>, <code>bytes</code>, <code>stream</code> or <code>base64</code>",
          "default": "string"
        },
        {
          "name": "fileSource",
          "description": "either <code>filesystem</code> or <code>classpath</code> (classpath will only work for actions 'read' and 'info' and for 'info' only when resources are available as a file (i.e. doesn't work for resources in jar files and war files which are deployed without being extracted by the application server))",
          "default": "filesystem"
        },
        {
          "name": "actions",
          "description": "Sets actions the pipe has to perform. Possible action values:\n <ul>\n   <li>write: create a new file and write input to it</li>\n   <li>write_append: create a new file if it does not exist, otherwise append to existing file; then write input to it</li>\n   <li>create: create a new file, but do not write anything to it</li>\n   <li>read: read from file</li>\n   <li>delete: delete the file</li>\n   <li>read_delete: read the contents, then delete (when outputType is stream the file is deleted after the stream is read)</li>\n   <li>encode: encode base64</li> <li>decode: decode base64</li>\n   <li>list: returns the files and directories in the directory that satisfy the specified filter (see {@link Dir2Xml}). If a directory is not specified, the fileName is expected to include the directory</li>\n   <li>info: returns information about the file</li>\n </ul>"
        },
        {
          "name": "directory",
          "description": "Sets the directory in which the file resides or has to be created"
        },
        {
          "name": "writeSuffix",
          "description": "Sets suffix of the file that is written (only used if filename and filenamesession are not set)"
        },
        {
          "name": "fileName",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "attribute 'fileName' is replaced with 'filename'"
          }
        },
        {
          "name": "filename",
          "description": "Sets filename of the file that is written"
        },
        {
          "name": "fileNameSessionKey",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "attribute 'fileNameSessionKey' is replaced with 'filenameSessionKey'"
          }
        },
        {
          "name": "filenameSessionKey",
          "description": "Sets filenameSessionKey the session key that contains the name of the file to be created (only used if filename is not set)"
        },
        {
          "name": "testExists",
          "description": "test if the specified directory exists at configure()",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "createDirectory",
          "description": "when set to <code>true</code>, the directory to read from or write to is created if it does not exist",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "writeLineSeparator",
          "description": "when set to <code>true</code>, a line separator is written after the content is written",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "testCanWrite",
          "description": "when set to <code>true</code>, a test is performed to find out if a temporary file can be created and deleted in the specified directory (only used if directory is set and combined with the action write, write_append or create)",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "skipBOM",
          "description": "when set to <code>true</code>, a possible bytes order mark (bom) at the start of the file is skipped (only used for the action read and encoding uft-8)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "deleteEmptyDirectory",
          "description": "(only used when actions=delete) when set to <code>true</code>, the directory from which a file is deleted is also deleted when it contains no other files",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "streamResultToServlet",
          "description": "(only used when outputtype=stream) if set, the result is streamed to the httpservletresponse object",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "FileLineIteratorPipe",
      "fullName": "org.frankframework.pipes.FileLineIteratorPipe",
      "deprecated": {
        "forRemoval": true,
        "since": "7.8.0",
        "description": "Please use StreamLineIteratorPipe"
      },
      "description": "Sends a message to a Sender for each line of the file that the input message refers to.",
      "parent": "org.frankframework.pipes.StreamLineIteratorPipe",
      "elementNames": ["FileLineIteratorPipe"],
      "attributes": [
        {
          "name": "move2dirAfterTransform",
          "description": "Directory where input file is moved to in case of a successful transformation"
        },
        {
          "name": "move2dirAfterError",
          "description": "Directory where input file is moved to in case an error occurred"
        },
        {
          "name": "charset",
          "description": "Default charset attribute",
          "default": "UTF-8"
        }
      ]
    },
    {
      "name": "FilePipe",
      "fullName": "org.frankframework.pipes.FilePipe",
      "deprecated": {
        "forRemoval": true,
        "since": "7.6.0",
        "description": "Please use LocalFileSystemPipe instead, or when retrieving files from the classpath use the FixedResultPipe"
      },
      "description": "<p>See {@link FileHandler}</p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["FilePipe"],
      "attributes": [
        {
          "name": "charset"
        },
        {
          "name": "outputType"
        },
        {
          "name": "actions"
        },
        {
          "name": "fileSource"
        },
        {
          "name": "directory"
        },
        {
          "name": "writeSuffix"
        },
        {
          "name": "filename"
        },
        {
          "name": "filenameSessionKey"
        },
        {
          "name": "createDirectory",
          "type": "bool"
        },
        {
          "name": "writeLineSeparator",
          "type": "bool"
        },
        {
          "name": "testExists",
          "type": "bool"
        },
        {
          "name": "testCanWrite",
          "type": "bool"
        },
        {
          "name": "skipBOM",
          "type": "bool"
        },
        {
          "name": "deleteEmptyDirectory",
          "type": "bool"
        },
        {
          "name": "streamResultToServlet",
          "type": "bool"
        }
      ]
    },
    {
      "name": "FileSender",
      "fullName": "org.frankframework.senders.FileSender",
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "Please use LocalFileSystemSender instead, or when retrieving files from the classpath use the FixedResultSender"
      },
      "description": "<p>See {@link FileHandler}</p>",
      "parent": "org.frankframework.util.FileHandler",
      "elementNames": ["FileSender"],
      "attributes": [
        {
          "name": "name",
          "description": "The functional name of the object."
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ]
    },
    {
      "name": "FileSystemSenderWithAttachments",
      "fullName": "org.frankframework.filesystem.FileSystemSenderWithAttachments",
      "deprecated": {
        "forRemoval": false,
        "since": ""
      },
      "description": "FileSystem Sender extension to handle Attachments.",
      "parent": "org.frankframework.filesystem.AbstractFileSystemSender",
      "elementNames": ["FileSystemSenderWithAttachmentsSender"]
    },
    {
      "name": "FilenameSwitch",
      "fullName": "org.frankframework.pipes.FilenameSwitch",
      "deprecated": {
        "forRemoval": true,
        "since": "7.6.0",
        "description": "Please replace with XmlSwitch with an xpathExpression or serviceSelectionStylesheetFilename"
      },
      "description": "Selects an exitState, based on the last (filename) part of the path that is the input.\n\n <p><b>Exits:</b>\n <table border=\\\"1\\\">\n <tr><th>state</th><th>condition</th></tr>\n <tr><td>&lt;filenname part of the path&gt;</td><td>default</td></tr>\n </table>\n </p>",
      "parent": "org.frankframework.pipes.AbstractPipe",
      "elementNames": ["FilenameSwitchPipe"],
      "attributes": [
        {
          "name": "notFoundForwardName",
          "description": "forward returned when the forward or pipename derived from the filename that was the input could not be found."
        },
        {
          "name": "toLowercase",
          "description": "convert the result to lowercase, before searching for a corresponding forward",
          "default": "true",
          "type": "bool"
        }
      ]
    },
    {
      "name": "FixedErrorMessage",
      "fullName": "org.frankframework.errormessageformatters.FixedErrorMessage",
      "deprecated": {
        "forRemoval": true,
        "since": "7.7.0",
        "description": "Use FixedErrorMessageFormatter instead"
      },
      "parent": "org.frankframework.errormessageformatters.FixedErrorMessageFormatter",
      "elementNames": ["FixedErrorMessageErrorMessageFormatter"]
    },
    {
      "name": "FixedErrorMessageFormatter",
      "fullName": "org.frankframework.errormessageformatters.FixedErrorMessageFormatter",
      "description": "ErrorMessageFormatter that returns a fixed message with replacements.",
      "elementNames": ["FixedErrorMessageFormatter"],
      "attributes": [
        {
          "name": "returnString",
          "description": "returned message"
        },
        {
          "name": "filename",
          "description": "name of the file containing the result message"
        },
        {
          "name": "replaceFrom"
        },
        {
          "name": "replaceTo"
        },
        {
          "name": "styleSheetName"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "FixedForwardPipe",
      "fullName": "org.frankframework.pipes.FixedForwardPipe",
      "abstract": true,
      "description": "Provides a base-class for a Pipe that always has the same forward.\n Ancestor classes should call <code>super.configure()</code> in their <code>configure()</code>-methods.",
      "parent": "org.frankframework.pipes.AbstractPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "skipOnEmptyInput",
          "description": "If set, the processing continues directly at the forward of this pipe, without executing the pipe itself, if the input is empty",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "ifParam",
          "description": "If set, this pipe is only executed when the value of parameter with name <code>ifParam</code> equals <code>ifValue</code> (otherwise this pipe is skipped)"
        },
        {
          "name": "ifValue",
          "description": "See <code>ifParam</code>"
        },
        {
          "name": "onlyIfSessionKey",
          "description": "Key of session variable to check if action must be executed. The pipe is only executed if the session variable exists and is not null"
        },
        {
          "name": "onlyIfValue",
          "description": "Value of session variable 'onlyIfSessionKey' to check if action must be executed. The pipe is only executed if the session variable has the specified value"
        },
        {
          "name": "unlessSessionKey",
          "description": "Key of session variable to check if action must be executed. The pipe is not executed if the session variable exists and is not null"
        },
        {
          "name": "unlessValue",
          "description": "Value of session variable 'unlessSessionKey' to check if action must be executed. The pipe is not executed if the session variable has the specified value"
        }
      ],
      "forwards": [
        {
          "name": "success",
          "description": "successful processing of the message of the pipe"
        }
      ]
    },
    {
      "name": "FixedPositionRecordHandlerManager",
      "fullName": "org.frankframework.batch.FixedPositionRecordHandlerManager",
      "description": "Manager that decides the handlers based on the content of a field in the specified\n position in a record. The fields in the record are of a fixed length.\n The data beween the start position and end position is taken as key in the flow-table.",
      "parent": "org.frankframework.batch.RecordHandlerManager",
      "elementNames": ["FixedPositionChild", "FixedPositionManager"],
      "attributes": [
        {
          "name": "startPosition",
          "description": "Start position of the field in the record that identifies the recordtype (first character is 0)",
          "default": "0",
          "type": "int"
        },
        {
          "name": "endPosition",
          "description": "If endposition &gt;= 0 then this field contains the endPosition of the recordtype field in the record; All characters beyond this position are ignored. Else, if endPosition &lt; 0 then it depends on the length of the recordkey in the flow",
          "default": "-1",
          "type": "int"
        }
      ]
    },
    {
      "name": "FixedQuerySender",
      "fullName": "org.frankframework.jdbc.FixedQuerySender",
      "description": "QuerySender that assumes a fixed query, possibly with attributes.",
      "parent": "org.frankframework.jdbc.AbstractJdbcQuerySender",
      "elementNames": ["FixedQuerySender"],
      "attributes": [
        {
          "name": "query",
          "mandatory": true,
          "description": "The SQL query text to be executed each time sendMessage() is called"
        },
        {
          "name": "batchSize",
          "description": "When set larger than 0 and used as a child of an IteratingPipe, then the database calls are made in batches of this size. Only for queryType=other.",
          "default": "0",
          "type": "int"
        }
      ],
      "parametersDescription": "All parameters present are applied to the query to be executed.",
      "notes": [
        {
          "type": "INFO",
          "value": "See {@link DB2XMLWriter} for ResultSet!"
        },
        {
          "type": "INFO",
          "value": "Please note that the default value of <code>trimSpaces</code> is `true`"
        }
      ]
    },
    {
      "name": "FixedResultPipe",
      "fullName": "org.frankframework.pipes.FixedResultPipe",
      "description": "This Pipe opens and returns a file from the classpath. The filename is a mandatory parameter to use. You can\n provide this by using the <code>filename</code> attribute or with a <code>param</code> element to be able to\n use a sessionKey for instance.\n\n <h2>Migrating from deprecated features</h2>\n The FixedResultPipe was a jack of all trades. You could use it to read a file (only text) and/or use\n a 'resultString' to find / replace values in. The following migrations are available:\n\n <h3>For using a 'resultString'</h3>\n You can use the {@link EchoPipe} for a static value. This looked like this before:\n\n <pre><code>&lt;pipe name=&quot;HelloWorld&quot; className=&quot;org.frankframework.pipes.FixedResult&quot; returnString=&quot;Hello World&quot;&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;EXIT&quot;/&gt;\n &lt;/pipe&gt;</code></pre>\n Becomes:\n <pre><code>&lt;pipe name=&quot;HelloWorld&quot; className=&quot;org.frankframework.pipes.EchoPipe&quot; getInputFromFixedValue=&quot;Hello World&quot;&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;EXIT&quot;/&gt;\n &lt;/pipe&gt;</code></pre>\n\n <h3>For replacing a value</h3>\n You can use the {@link ReplacerPipe} to replace a value in multiple ways. First, when you need to replace a placeholder with a parameter.\n This looked like:\n <pre><code>&lt;pipe name=&quot;make unique message&quot; className=&quot;org.frankframework.pipes.FixedResultPipe&quot;\n     returnString=&quot;&amp;lt;msg mid=&amp;quot;MID&amp;quot; action=&amp;quot;ACTION&amp;quot; /&amp;gt;&quot; replaceFixedParams=&quot;true&quot;&gt;\n     &lt;param name=&quot;MID&quot; sessionKey=&quot;mid&quot; /&gt;\n     &lt;param name=&quot;ACTION&quot; xpathExpression=&quot;request/@action&quot; /&gt;\n &lt;/pipe&gt;</code></pre>\n\n And can now be written like this (note the ?{..} syntax):\n <pre><code>&lt;pipe name=&quot;make unique message&quot; className=&quot;org.frankframework.pipes.ReplacerPipe&quot;\n     getInputFromFixedValue=&quot;&amp;lt;msg mid=&amp;quot;?{MID}&amp;quot; action=&amp;quot;?{ACTION}&amp;quot; /&amp;gt;&quot;&gt;\n     &lt;param name=&quot;MID&quot; sessionKey=&quot;mid&quot; /&gt;\n     &lt;param name=&quot;ACTION&quot; xpathExpression=&quot;request/@action&quot; /&gt;\n &lt;/pipe&gt;</code></pre>\n\n When you need to replace a fixed value use the ReplacerPipe with find and replace. This looked like this:\n <pre><code>&lt;FixedResultPipe name=&quot;InputValidateError&quot;\n     filename=&quot;ManageFileSystem/xml/ErrorMessage.xml&quot;\n     replaceFrom=&quot;%reasonCode&quot; replaceTo=&quot;NOT_WELL_FORMED_XML&quot;&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;EXIT&quot; /&gt;\n &lt;/FixedResultPipe&gt;</code></pre>\n\n And now should be solved like this:\n <pre><code>&lt;FixedResultPipe name=&quot;InputValidateError&quot;\n     filename=&quot;ManageFileSystem/xml/ErrorMessage.xml&quot;&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;replaceReasonCode&quot; /&gt;\n &lt;/FixedResultPipe&gt;\n &lt;ReplacerPipe name=&quot;replaceReasonCode&quot;\n     find=&quot;%reasonCode&quot;\n     replace=&quot;NOT_WELL_FORMED_XML&quot;&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;EXIT&quot; /&gt;\n &lt;/ReplacerPipe&gt;</code></pre>\n This is also an example of now using two pipes to achieve the same result. Each pipe has its own responsibility.\n\n <h2>More complex configurations</h2>\n In some cases, a combination of the above is needed to achieve what worked before. In some cases, FixedResultPipe\n was also used to store information in the session. For example, a port of configuration in the JMS listener sender configuration looked like this:\n <pre><code>&lt;CompareStringPipe name=&quot;compareIdAndCid&quot; &gt;\n     &lt;param name=&quot;operand1&quot; sessionKey=&quot;id&quot;/&gt;\n     &lt;param name=&quot;operand2&quot; sessionKey=&quot;cid&quot;/&gt;\n     &lt;forward name=&quot;equals&quot; path=&quot;IdAndCidSame&quot; /&gt;\n     &lt;forward name=&quot;lessthan&quot; path=&quot;IdAndCidDifferent&quot; /&gt;\n     &lt;forward name=&quot;greaterthan&quot; path=&quot;IdAndCidDifferent&quot; /&gt;\n &lt;/CompareStringPipe&gt;\n &lt;FixedResultPipe name=&quot;IdAndCidSame&quot; returnString=&quot;true&quot; storeResultInSessionKey=&quot;IdAndCidSame&quot;&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;displayKeys&quot; /&gt;\n &lt;/FixedResultPipe&gt;\n &lt;FixedResultPipe name=&quot;IdAndCidDifferent&quot; returnString=&quot;false&quot; storeResultInSessionKey=&quot;IdAndCidSame&quot;&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;displayKeys&quot; /&gt;\n &lt;/FixedResultPipe&gt;\n\n &lt;pipe name=&quot;displayKeys&quot; className=&quot;org.frankframework.pipes.FixedResultPipe&quot;\n     returnString=&quot;branch [BRANCH] Orignal Id [MID] cid [CID] id=cid [SAME]&quot; replaceFixedParams=&quot;true&quot;&gt;\n     &lt;param name=&quot;BRANCH&quot; sessionKey=&quot;originalMessage&quot; xpathExpression=&quot;*&amp;#47;@branch&quot; /&gt;\n     &lt;param name=&quot;MID&quot; sessionKey=&quot;id&quot; /&gt;\n     &lt;param name=&quot;CID&quot; sessionKey=&quot;cid&quot; /&gt;\n     &lt;param name=&quot;SAME&quot; sessionKey=&quot;IdAndCidSame&quot; /&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;EXIT&quot; /&gt;\n &lt;/pipe&gt;</code></pre>\n\n Was rewritten to the following:\n <pre><code>&lt;CompareStringPipe name=&quot;compareIdAndCid&quot; &gt;\n     &lt;param name=&quot;operand1&quot; sessionKey=&quot;id&quot;/&gt;\n     &lt;param name=&quot;operand2&quot; sessionKey=&quot;cid&quot;/&gt;\n     &lt;forward name=&quot;equals&quot; path=&quot;IdAndCidSame&quot; /&gt;\n     &lt;forward name=&quot;lessthan&quot; path=&quot;IdAndCidDifferent&quot; /&gt;\n     &lt;forward name=&quot;greaterthan&quot; path=&quot;IdAndCidDifferent&quot; /&gt;\n &lt;/CompareStringPipe&gt;\n\n &lt;PutInSessionPipe name=&quot;IdAndCidSame&quot; value=&quot;true&quot; sessionKey=&quot;IdAndCidSame&quot;&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;putOriginalMessageInSession&quot; /&gt;\n &lt;/PutInSessionPipe&gt;\n &lt;PutInSessionPipe name=&quot;IdAndCidDifferent&quot; value=&quot;false&quot; sessionKey=&quot;IdAndCidSame&quot;&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;putOriginalMessageInSession&quot; /&gt;\n &lt;/PutInSessionPipe&gt;\n\n &lt;PutInSessionPipe name=&quot;putOriginalMessageInSession&quot; sessionKey=&quot;incomingMessage&quot;/&gt;\n\n &lt;pipe name=&quot;displayKeys&quot; className=&quot;org.frankframework.pipes.ReplacerPipe&quot;\n     getInputFromFixedValue=&quot;branch [?{BRANCH}] Original Id [?{MID}] cid [?{CID}] id=cid [?{SAME}]&quot;&gt;\n     &lt;param name=&quot;BRANCH&quot; sessionKey=&quot;originalMessage&quot; xpathExpression=&quot;*&amp;#47;@branch&quot; /&gt;\n     &lt;param name=&quot;MID&quot; sessionKey=&quot;id&quot; /&gt;\n     &lt;param name=&quot;CID&quot; sessionKey=&quot;cid&quot; /&gt;\n     &lt;param name=&quot;SAME&quot; sessionKey=&quot;IdAndCidSame&quot; /&gt;\n     &lt;forward name=&quot;success&quot; path=&quot;EXIT&quot; /&gt;\n &lt;/pipe&gt;</code></pre>\n <p>\n\n <h2>The features/documentation of the deprecated features</h2>\n Produces a fixed result that does not depend on the input message. It may return the contents of a file\n when <code>filename</code> or <code>filenameSessionKey</code> is specified. Otherwise, the\n value of attribute <code>returnString</code> is returned.\n <br/><br/>\n Using parameters and the attributes of this pipe, it is possible to substitute values. This pipe\n performs the following steps:\n <ol>\n <li>During execution, this pipe first obtains a string based on attributes <code>returnString</code>, <code>filename</code> or <code>filenameSessionKey</code>.</li>\n <li>The resulting string is transformed according to attributes <code>replaceFrom</code> and <code>replaceTo</code> if set.\n Please note that the plain value of attribute <code>replaceFrom</code> is matched, no <code>?{...}</code> here.</li>\n\n <li>The resulting string is substituted based on the parameters of this pipe. This step depends on attribute <code>replaceFixedParams</code>.\n Assume that there is a parameter with name <code>xyz</code>. If <code>replaceFixedParams</code> is <code>false</code>, then\n each occurrence of <code>?{xyz}</code> is replaced by the parameter's value. Otherwise, the text <code>xyz</code>\n is substituted. See {@link Parameter} to see how parameter values are determined.</li>\n\n <li>If attribute <code>substituteVars</code> is <code>true</code>, then expressions <code>${...}</code> are substituted using\n system properties, pipelinesession variables and application properties. Please note that\n no <code>${...}</code> patterns are left if the initial string came from attribute <code>returnString</code>, because\n any <code>${...}</code> pattern in attribute <code>returnString</code> is substituted when the configuration is loaded.</li>\n <li>If attribute <code>styleSheetName</code> is set, then the referenced XSLT stylesheet is applied to the resulting string.</li>\n </ol>\n <br/>\n Many attributes of this pipe reference file names. If a file is referenced by a relative path, the path\n is relative to the configuration's root directory.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["FixedResultPipe"],
      "attributes": [
        {
          "name": "substituteVars",
          "deprecated": {
            "forRemoval": true,
            "since": "8.2",
            "description": "substituteVars is scheduled for removal. Please use the ReplacerPipe"
          },
          "description": "Should values between ${ and } be resolved. If true, the search order of replacement values is:\n system properties (1), PipelineSession variables (2), application properties (3).",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "filename",
          "description": "Name of the file containing the result message."
        },
        {
          "name": "filenameSessionKey",
          "deprecated": {
            "forRemoval": true,
            "since": "8.2",
            "description": "fileNameSessionKey is scheduled for removal. Please use a <param> if you need a session value"
          },
          "description": "Name of the session key containing the file name of the file containing the result message."
        },
        {
          "name": "returnString",
          "deprecated": {
            "forRemoval": true,
            "since": "8.2",
            "description": "returnString is scheduled for removal. Please use the ReplacerPipe or EchoPipe if you need to control the output string"
          },
          "description": "Returned message."
        },
        {
          "name": "replaceFrom",
          "deprecated": {
            "forRemoval": true,
            "since": "8.2",
            "description": "replaceFrom is scheduled for removal. Please use the ReplacerPipe"
          },
          "description": "If set, every occurrence of this attribute's value is replaced by the value of <code>replaceTo</code>."
        },
        {
          "name": "replaceTo",
          "deprecated": {
            "forRemoval": true,
            "since": "8.2",
            "description": "replaceTo is scheduled for removal. Please use the ReplacerPipe"
          },
          "description": "See <code>replaceFrom</code>."
        },
        {
          "name": "styleSheetName",
          "deprecated": {
            "forRemoval": true,
            "since": "8.2",
            "description": "styleSheetName is scheduled for removal. Please use the XsltPipe"
          },
          "description": "File name of XSLT stylesheet to apply."
        },
        {
          "name": "replaceFixedParams",
          "deprecated": {
            "forRemoval": true,
            "since": "8.2",
            "description": "replaceFixedParams is scheduled for removal. Please use the ReplacerPipe"
          },
          "description": "When set <code>true</code>, parameter replacement matches <code>name-of-parameter</code>, not <code>?{name-of-parameter}</code>",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "useOldSubstitutionStartDelimiter",
          "deprecated": {
            "forRemoval": true,
            "since": "8.1",
            "description": "please use ?{key} instead where possible so it's clear when to use properties and when to use session variables"
          },
          "type": "bool"
        }
      ],
      "parametersDescription": "Used for substitution. For a parameter named <code>xyz</code>, the string <code>?{xyz}</code> or\n <code>xyz</code> (if <code>replaceFixedParams</code> is true) is substituted by the parameter's value.",
      "forwards": [
        {
          "name": "filenotfound",
          "description": "the configured file was not found (when this forward isn't specified an exception will be thrown)"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "FixedResultSender",
      "fullName": "org.frankframework.senders.FixedResultSender",
      "description": "FixedResultSender, same behaviour as {@link FixedResultPipe}, but now as a ISender.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["FixedResultSender"],
      "attributes": [
        {
          "name": "substituteVars",
          "description": "should values between ${ and } be resolved from the pipelinesession",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "filename",
          "description": "Name of the file containing the result message"
        },
        {
          "name": "returnString",
          "description": "returned message"
        },
        {
          "name": "replaceFrom"
        },
        {
          "name": "replaceTo"
        },
        {
          "name": "styleSheetName"
        }
      ],
      "parametersDescription": "Any parameters defined on the sender will be used for replacements. Each occurrence of <code>${name-of-parameter}</code> in the file fileName will be replaced by its corresponding value-of-parameter. This works only with files, not with values supplied in attribute {@link #setReturnString(String) returnString}.",
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "Flow",
      "fullName": "org.frankframework.batch.RecordHandlingFlow",
      "description": "The flow contains the handlers to handle records of a specific type.\n Each flow is registered to a manager using the recordHandlerManagerRef.",
      "elementNames": ["Flow"],
      "attributes": [
        {
          "name": "recordKey",
          "description": "Key under which this flow is registered in the manager"
        },
        {
          "name": "nextRecordHandlerManagerRef",
          "description": "Name of the manager to be used after handling this record"
        },
        {
          "name": "recordHandlerRef",
          "description": "Name of the recordHandler to be used to transform records of the type specified in the key (optional)"
        },
        {
          "name": "recordHandlerManagerRef",
          "description": "Name of the manager to which this flow must be added"
        },
        {
          "name": "resultHandlerRef",
          "description": "Name of the resultHandler to be used to handle the transformed result"
        },
        {
          "name": "openBlockBeforeLine",
          "description": "Instructs the resultHandler to start a new block before the parsed line is processed"
        },
        {
          "name": "closeBlockBeforeLine",
          "description": "Instructs the resultHandler to end the specified block before the parsed line is processed"
        },
        {
          "name": "openBlockAfterLine",
          "description": "Instructs the resultHandler to start a new block after the parsed line is processed"
        },
        {
          "name": "closeBlockAfterLine",
          "description": "Instructs the resultHandler to end the specified block after the parsed line is processed"
        },
        {
          "name": "autoCloseBlock",
          "description": "If <code>true</code>, any open block of this type (and other nested open 'autoClose' block) is closed before a new one of the same type is opened. At a forced close, nested blocks are closed too (since 4.9)",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "openBlockBeforeLineNumber",
          "description": "If &gt;0 the <code>openBlockBeforeLine</code> instruction is only performed when the current line number is a multiple of this value",
          "default": "0",
          "type": "int"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Batch"
        }
      ]
    },
    {
      "name": "ForEachAttachmentPipe",
      "fullName": "org.frankframework.filesystem.ForEachAttachmentPipe",
      "parent": "org.frankframework.pipes.IteratingPipe",
      "elementNames": ["ForEachAttachmentPipe"],
      "attributes": [
        {
          "name": "onlyProperties",
          "description": "comma separated list of attachment properties to list"
        },
        {
          "name": "excludeProperties",
          "description": "comma separated list of attachment properties not to list. When specified, 'onlyProperties' is ignored"
        }
      ]
    },
    {
      "name": "ForEachChildElementPipe",
      "fullName": "org.frankframework.pipes.ForEachChildElementPipe",
      "description": "Sends a message to a Sender for each child element of the input XML.\n Input can be a String containing XML, a filename (set processFile true), an InputStream or a Reader.",
      "parent": "org.frankframework.pipes.StringIteratorPipe",
      "elementNames": ["ForEachChildElementPipe"],
      "attributes": [
        {
          "name": "processFile",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "Please add a LocalFileSystemPipe with action=read in front of this pipe instead"
          },
          "description": "When set <code>true</code>, the input is assumed to be the name of a file to be processed. Otherwise, the input itself is transformed. The character encoding will be read from the XML declaration",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "containerElement",
          "description": "Element name (not an XPath-expression), qualified via attribute <code>namespaceDefs</code>, used to determine the 'root' of elements to be iterated over, i.e. the root of the set of child elements.\n When empty, the pipe will iterate over each direct child element of the root"
        },
        {
          "name": "targetElement",
          "description": "Element name (not an XPath-expression), qualified via attribute <code>namespaceDefs</code>, used to determine the type of elements to be iterated over, i.e. the element name of each of the child elements.\n When empty, the pipe will iterate over any direct child element of the root or specified containerElement"
        },
        {
          "name": "elementXPathExpression",
          "description": "XPath-expression used to determine the set of elements to be iterated over, i.e. the set of child elements. When empty, the effective value is \\/*\\/*, i.e. the pipe will iterate over each direct child element of the root.\n Be aware that memory consumption appears to increase with file size when this attribute is used. When possible, use containerElement and/or targetElement instead."
        },
        {
          "name": "xsltVersion",
          "description": "If set to <code>2</code> or <code>3</code> a Saxon (net.sf.saxon) XSLT processor 2.0 or 3.0 will be used, supporting XPath 2.0 or 3.0 respectively, otherwise an XSLT processor 1.0 (org.apache.xalan), supporting XPath 1.0. N.B. Be aware that setting this other than 1 might cause the input file being read as a whole in to memory, as XSLT Streaming is currently only supported by the XSLT Processor that is used for xsltVersion=1",
          "default": "1",
          "type": "int"
        },
        {
          "name": "removeNamespaces",
          "description": "If set <code>true</code> namespaces (and prefixes) are removed from the items just before forwarding them to the sender. N.B. This takes place <strong>after</strong> the transformation for <code>elementXPathExpression</code> if that is specified",
          "type": "bool"
        }
      ],
      "parametersDescription": "all parameters will be applied to the xslt if an elementXPathExpression is specified",
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "ForPipe",
      "fullName": "org.frankframework.pipes.ForPipe",
      "description": "ForPipe is a wrapper to use another pipe a fixed number of times. This can be accomplished by something like:\n\n <pre><code>&lt;ForPipe name=&quot;forPipe&quot; startAt=&quot;0&quot; stopAt=&quot;10&quot;&gt;\n \t\t \t&lt;Forward name=&quot;stop&quot; path=&quot;EXIT&quot; /&gt;\n \t\t \t&lt;Forward name=&quot;continue&quot; path=&quot;echoPipe&quot;/&gt;\n \t\t&lt;/ForPipe&gt;\n\n \t\t&lt;EchoPipe name=&quot;echoPipe&quot; getInputFromSessionKey=&quot;forPipe.iteration&quot;&gt;\n \t\t \t&lt;Forward name=&quot;success&quot; path=&quot;forPipe&quot;/&gt;\n \t\t&lt;/EchoPipe&gt;</code></pre>\n <p>\n This should call the echoPipe for i=0 until i=10.\n <p>",
      "parent": "org.frankframework.pipes.AbstractPipe",
      "elementNames": ["ForPipe"],
      "attributes": [
        {
          "name": "startAt",
          "description": "Starts counting at this value.",
          "default": "0",
          "type": "int"
        },
        {
          "name": "stopAt",
          "description": "Break from the loop when incrementSessionKey equals this value.",
          "type": "int"
        }
      ],
      "forwards": [
        {
          "name": "stop",
          "description": "exit for loop"
        },
        {
          "name": "continue",
          "description": "continue in for loop"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Iterator"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "After completing the for loop, the sessionKey containing the for loop iteration state, will be removed."
        },
        {
          "type": "INFO",
          "value": "The default format for the session key is \"pipeName-iteration\""
        }
      ]
    },
    {
      "name": "Forward",
      "fullName": "org.frankframework.core.PipeForward",
      "description": "Appears inside a pipe and defines what pipe or exit to execute next. When the\n execution of a pipe is done, the pipe looks up the next pipe or exit to execute.\n This pipe or exit is searched based on a key that describes what happened during\n pipe execution. For example a {@link FixedResultPipe} searches for key\n <code>filenotfound</code> if it tried to read a file that did not exist,\n preventing it from producing the desired output message. If there was\n no error, the {@link FixedResultPipe} searches for key <code>success</code>.\n <br/><br/>\n Each <code>&lt;Forward&gt;</code> tag is used to link a search key (<code>name</code> attribute)\n to a pipe or exit to execute next (<code>path</code> attribute). The forward's <code>path</code>\n attribute references the target pipe or exit by its <code>name</code> attribute, see\n {@link AbstractPipe} and {@link PipeLineExit}. For most pipes and most keys, the next\n pipe is executed if no forward is found. By default, the pipes in a pipeline are executed consecutively.",
      "elementNames": ["Forward"],
      "attributes": [
        {
          "name": "name",
          "mandatory": true,
          "description": "the <code>name</code> is a symbolic reference to a <code>path</code>.<br/>"
        },
        {
          "name": "path",
          "mandatory": true,
          "description": "The name of the next Pipe or Exit. When the Pipeline doesn't have an Exits element configured it will be\n initialized with one Exit having name READY and state SUCCESS"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "FrankListener",
      "fullName": "org.frankframework.receivers.FrankListener",
      "description": "Listener to receive messages sent by the {@link org.frankframework.senders.FrankSender}, for situations where\n calling an {@link Adapter} directly is not desired. This could be because message / error logging is required for messages\n sent to the subadapter.\n <br/>\n See the {@link org.frankframework.senders.FrankSender} documentation for more information.",
      "elementNames": ["FrankListener"],
      "attributes": [
        {
          "name": "name",
          "description": "Name of the listener by which it can be found by the {@link org.frankframework.senders.FrankSender}. If this\n is not configured, the name will default to the name of the {@link org.frankframework.core.Adapter}.\n The name of the <code>FrankListener</code> must be unique across the configuration."
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "FrankSender",
      "fullName": "org.frankframework.senders.FrankSender",
      "description": "Sender to send a message to another Frank! Adapter, or an external program running in the same JVM as the Frank!Framework.\n <p>\n Sends a message to another Frank!Framework-adapter in the same Frank!Framework instance, or an external program running in\n the same JVM as the Frank!Framework. If the callee exits with an <code>&lt;Exit/&gt;</code> that has state {@link PipeLine.ExitState#ERROR},\n an error is considered to happen in the caller which means that the <code>exception</code> forward is followed if it is present.\n </p>\n <p>\n Returns <code>exit.code</code> as forward name to the {@link SenderPipe}, provided that <code>exit.code</code> can be parsed as integer.\n For example, if the called adapter has an exit state with code\n <code>2</code>, then the {@link SenderPipe} supports a forward with name <code>2</code>\n that is followed when the called adapter exits with the mentioned exit. This does not work if the code is for example <code>c2</code>.\n </p>\n <p>\n A FrankSender makes a call to either an {@link Adapter} or an external program by setting the {@link #scope}. By default the scope is <code>ADAPTER</code>.\n </p>\n <p/>\n\n <h3>Configuration of the Adapter to be called</h3>\n <p>\n A call to another Adapter in the same Frank!Framework instance is preferably made using the combination\n of a FrankSender configured with the name of the adapter.\n </p>\n <h4>Configuring FrankSender and Adapter</h4>\n <ul>\n   <li>Define a {@link SenderPipe} with a FrankSender</li>\n   <li>Set the attribute <code>target</code> to <i>targetAdapterName</i></li>\n   <li>If the adapter is in another Configuration deployed in the same Frank!Framework instance, then set <code>target</code> to <code>targetConfigurationName/targetAdapterName</code> (note the slash-separator between Configuration name and Adapter name).</li>\n </ul>\n In the Adapter to be called:\n <ul>\n   <li>The adapter does not need to have a dedicated receiver configured to be called from a FrankSender.</li>\n   <li>The adapter will run in the same transaction as the calling adapter.</li>\n   <li>If the called adapter does not to run in its own transaction, set the transaction attributes on the {@link PipeLine} attribute of this adapter\n   or on the {@link SenderPipe} that contains this <code>FrankSender</code>.</li>\n </ul>\n\n <h4>Configuring FrankSender with FrankListener</h4>\n <ul>\n   <li>Define a {@link SenderPipe} with a FrankSender</li>\n   <li>In the target adapter, define a {@link org.frankframework.receivers.Receiver} with a {@link FrankListener}</li>\n   <li>Give a unique name to the listener: {@link FrankListener#setName(String)}. If the name is not set, the name of the {@link Adapter} will be used.</li>\n   <li>Set the {@link #setScope(Scope)} to <code>LISTENER</code> and the {@link #setTarget(String)} to the listener name as per previous point</li>\n   <li>If the listener is in a different configuration, prefix the listener name with the name of the configuration and a slash (<code>/</code>) as separator between configuration and listener name</li>\n </ul>\n\n <h4>Configuring FrankSender and Remote Application</h4>\n <p>\n <em>NB:</em> Please make sure that the IbisServiceDispatcher-1.4.jar or newer is present on the class path of the server. For more information, see:\n </p>\n <ul>\n     <li>Define a {@link SenderPipe} with a FrankSender</li>\n     <li>Set the attribute <code>scope</code> to either <code>JVM</code> for a Java application, or to <code>DLL</code> for code loaded from a DLL</li>\n     <li>Set the attribute <code>target</code> to the service-name the other application used to register itself</li>\n </ul>\n <p>\n In the other application:\n <ul>\n     <li>Implement the interface <code>nl.nn.adapterframework.dispatcher.RequestProcessor</code> from the IbisServiceDispatcher library</li>\n     <li>Register the instance with the <code>nl.nn.adapterframework.dispatcher.DispatcherManager</code> obtained via the <code>nl.nn.adapterframework.dispatcher.DispatcherManagerFactory</code></li>\n     <li>See the implementation code of the <code>JavaListener</code> in the Frank!Framework for an example</li>\n </ul>\n </p>\n <p>\n See also the repository of the IbisServiceDispatcher:\n  <a href=\\\"https://github.com/frankframework/servicedispatcher\\\">https://github.com/frankframework/servicedispatcher</a>\n </p>\n \n <h4>Using FrankSender to call an adapter from Larva tests</h4>\n <p>\n You can configure a FrankSender in Larva property files to use the FrankSender to invoke an adapter to test. When doing this, keep the following in mind:\n <ul>\n     <li>If you leave the default scope as <code>ADAPTER</code>, then the <code>target</code> property needs to have both configuration name and adapter name, separated by a <code>/</code> character</li>\n     <li>When scope is left as default, the receiver and JavaListener are skipped and no transaction is started unless it is set on the adapter's <code>PipeLine</code></li>\n     <li>If you do need a transaction and the adapter has a JavaListener that has {@link org.frankframework.receivers.JavaListener#setServiceName(String)} defined, you can use the FrankSender with scope <code>JVM</code>\n     and set the <code>target</code> attribute to the <code>serviceName</code> attribute of the <code>JavaListener</code>.</li>\n </ul>\n </p>\n\n <h3>Migrating Existing Configurations</h3>\n <p>\n When one adapter (named A) needs to call another adapter (named B) like a subroutine, you will usually have an {@link IbisLocalSender} or an {@link IbisJavaSender}\n in adapter A, and a {@link org.frankframework.receivers.JavaListener} in adapter B.\n </p>\n <p>\n     <em>NB:</em> For the example it is assumed that all adapters are defined in the same configuration.\n </p>\n\n <h4>Example of Existing Configuration</h4>\n The existing configuration might look like this in the calling adapter:\n <pre><code>&lt;module&gt;\n     &lt;adapter name=&quot;Adapter A&quot;&gt;\n         &lt;receiver name=&quot;Adapter A Receiver&quot;&gt;\n             &lt;listener name=&quot;Adapter A Listener&quot;\n                 className=&quot;org.frankframework...&quot; etc/&gt;\n         &lt;/receiver&gt;\n  \t   &lt;pipeline firstPipe=&quot;...&quot;&gt;\n  \t       &lt;pipe name=&quot;send&quot; className=&quot;org.frankframework.pipes.SenderPipe&quot;&gt;\n  \t           &lt;sender className=&quot;org.frankframework.senders.IbisJavaSender&quot;\n  \t               serviceName=&quot;service-Adapter-B&quot; /&gt;\n                 &lt;forward name=&quot;success&quot; path=&quot;...&quot; /&gt;\n  \t       &lt;/pipe&gt;\n         &lt;/pipeline&gt;\n     &lt;/adapter&gt;\n &lt;/module&gt;</code></pre>\n\n Or like using the modern XML XSD and an IbisLocalSender instead:\n <pre><code>&lt;Module&gt;\n     &lt;Adapter name=&quot;Adapter A&quot;&gt;\n         &lt;Receiver name=&quot;Adapter A Receiver&quot;&gt;\n             ... Listener setup and other configuration\n         &lt;/Receiver&gt;\n         &lt;Pipeline&gt;\n             &lt;SenderPipe name=&quot;send&quot;&gt;\n                 &lt;IbisLocalSender name=&quot;call Adapter B&quot;\n                     javaListener=&quot;Adapter B Listener&quot;/&gt;\n                 &lt;Forward name=&quot;success&quot; path=&quot;EXIT&quot; /&gt;\n             &lt;/SenderPipe&gt;\n         &lt;/Pipeline&gt;\n     &lt;/Adapter&gt;\n &lt;/Module&gt;</code></pre>\n\n In the receiving adapter B the listener would have been configured like this:\n <pre><code>&lt;Module&gt;\n     &lt;Adapter name=&quot;adapter B&quot;&gt;\n         &lt;Receiver name=&quot;Receiver B&quot;&gt;\n             &lt;JavaListener name=&quot;Adapter B Listener&quot; serviceName=&quot;service-Adapter-B&quot;/&gt;\n         &lt;/Receiver&gt;\n         &lt;Pipeline&gt;\n             ...\n         &lt;/Pipeline&gt;\n     &lt;/Adapter&gt;\n &lt;/Module&gt;</code></pre>\n <p/>\n\n <h4>Rewritten Example Configuration With FrankSender</h4>\n This example shows the most simple way of using the FrankSender to call another adapter with least amount of overhead.\n\n <pre><code>&lt;Module&gt;\n     &lt;Adapter name=&quot;Adapter A&quot;&gt;\n         &lt;Receiver name=&quot;Adapter A Receiver&quot;&gt;\n             ... Listener setup and other configuration\n         &lt;/Receiver&gt;\n         &lt;Pipeline&gt;\n             &lt;SenderPipe name=&quot;send&quot;&gt;\n                 &lt;!-- when scope=&quot;ADAPTER&quot;, then target is directly the name of the adapter you want to call --&gt;\n                 &lt;FrankSender name=&quot;call Adapter C&quot;\n                     scope=&quot;ADAPTER&quot;\n                     target=&quot;adapter B&quot;\n                 /&gt;\n                 &lt;Forward name=&quot;success&quot; path=&quot;EXIT&quot; /&gt;\n             &lt;/SenderPipe&gt;\n         &lt;/Pipeline&gt;\n     &lt;/Adapter&gt;\n     &lt;Adapter name=&quot;adapter B&quot;&gt;\n         &lt;!-- No receiver needed for FrankSender in this scenario --&gt;\n         &lt;Pipeline&gt;\n             ... Exits, Pipes etc\n         &lt;/Pipeline&gt;\n     &lt;/Adapter&gt;\n &lt;/Module&gt;</code></pre>\n\n <h4>Rewritten Example Configuration With FrankSender and FrankListener</h4>\n This example shows why you might want to call the other adapter via the FrankListener. This adds a bit more overhead to the call\n of the sub-adapter for the extra error-handling done by the target receiver.\n\n <pre><code>&lt;Module&gt;\n    &lt;Adapter name=&quot;Adapter A&quot;&gt;\n        &lt;Receiver name=&quot;Adapter A Receiver&quot;&gt;\n         ... Listener setup and other configuration\n \t\t  &lt;/Receiver&gt;\n \t\t  &lt;Pipeline&gt;\n            &lt;SenderPipe name=&quot;send&quot;&gt;\n                &lt;!-- when scope=&quot;LISTENER&quot;, then target is directly the name of the FrankListener in the adapter you want to call --&gt;\n                &lt;FrankSender\n                    scope=&quot;LISTENER&quot;\n                    target=&quot;Adapter B Listener&quot;/&gt;\n                &lt;Forward name=&quot;success&quot; path=&quot;EXIT&quot; /&gt;\n            &lt;/SenderPipe&gt;\n        &lt;/Pipeline&gt;\n     &lt;/Adapter&gt;\n     &lt;Adapter name=&quot;adapter B&quot;&gt;\n         &lt;!-- Messages will only be sent to the error storage if:\n             - The target receiver is not transactional, and has maxTries=&quot;0&quot;, or\n             - The target receiver is transaction, and the Sender is set up to retry sending on error\n             For internal adapters, sending / receiving with retries might not make sense so the example does not show that.\n         --&gt;\n         &lt;Receiver name=&quot;Receiver B&quot; maxRetries=&quot;0&quot; transactionAttribute=&quot;NotSupported&quot;&gt;\n             &lt;!-- Listener name is optional, defaults to Adapter name --&gt;\n             &lt;FrankListener name=&quot;Adapter B Listener&quot;/&gt;\n                 &lt;!-- This adapter now has an error storage -- without Receiver and FrankListener the sub-adapter couldn't have that --&gt;\n             &lt;JdbcErrorStorage slotId=&quot;Adapter B - Errors&quot; /&gt;\n         &lt;/Receiver&gt;\n         &lt;!-- If transactions are required, set transaction-attribute on the Pipeline --&gt;\n         &lt;Pipeline transactionAttribute=&quot;RequiresNew&quot;&gt;\n             ... Exits, Pipes etc\n         &lt;/Pipeline&gt;\n    &lt;/Adapter&gt;\n &lt;/Module&gt;</code></pre>",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["FrankSender"],
      "attributes": [
        {
          "name": "synchronous",
          "description": "Synchronous or Asynchronous execution of the call to other adapter or system.\n <br/>\n Set to <code>false</code> to make the call asynchronously. This means that the current adapter\n continues with the next pipeline and the result of the sub-adapter that was called, or other system that was called,\n is ignored. Instead, the input message will be returned as the result message.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "scope",
          "description": "{@link Scope} decides if the FrankSender calls another adapter, or another Java program running in the same JVM.\n <br/>\n It is possible to set this via a parameter. If the parameter is defined but the value at runtime\n is empty, then the value set via this attribute will be used as default.",
          "default": "ADAPTER",
          "enum": "org.frankframework.senders.FrankSender.Scope"
        },
        {
          "name": "target",
          "description": "Target: service-name of service in other application that should be called, or name of adapter to be called.\n If the adapter is in another configuration, prefix the adapter name with the name of that configuration and a slash (\"<code>/</code>\").\n <br/>\n It is possible to set a target at runtime via a parameter.\n <br/>\n If a parameter with name <code>target</code> exists but has no value, then the target configured\n via the attribute will be used as a default."
        },
        {
          "name": "returnedSessionKeys",
          "description": "Comma separated list of keys of session variables that will be returned to caller, for correct results as well as for erroneous results.\n The set of available sessionKeys to be returned might be limited by the returnedSessionKeys attribute of the corresponding JavaListener."
        }
      ],
      "parametersDescription": "All parameters except <code>scope</code> and <code>target</code> are copied to the {@link PipeLineSession} of the adapter called.",
      "parameters": [
        {
          "name": "code",
          "description": "Determine scope dynamically at runtime. If the parameter value is empty, fall back to the scope configured via the attribute, or the default scope <code>ADAPTER</code>."
        },
        {
          "name": "target",
          "description": "Determine target dynamically at runtime. If the parameter value is empty, fall back to the target configured via the attribute."
        }
      ],
      "forwards": [
        {
          "name": "*",
          "description": "Exit code"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "FtpFileSystemListener",
      "fullName": "org.frankframework.receivers.FtpFileSystemListener",
      "description": "File listener for an FTP connection.\n\n {@link IPullingListener listener} that looks in a {@link IBasicFileSystem FileSystem} for files.\n When a file is found, it is moved to an in-process folder, so that it isn't found more than once.\n <br/>\n The information specified by {@link #setMessageType(IMessageType)} is then passed to the pipeline.",
      "parent": "org.frankframework.filesystem.AbstractFileSystemListener",
      "elementNames": ["FtpFileSystemListener"],
      "attributes": [
        {
          "name": "messageType",
          "description": "Determines the contents of the message that is sent to the pipeline. The value of the attribute matching the searchKey is returned when using <code>ATTRIBUTE</code>",
          "default": "PATH",
          "enum": "org.frankframework.filesystem.AbstractFileSystemListener.MessageType"
        },
        {
          "name": "remoteDirectory",
          "description": "pathname of the file or directory to list.",
          "default": "Home folder of the ftp user"
        },
        {
          "name": "host",
          "description": "Name or ip address of remote host"
        },
        {
          "name": "port",
          "description": "Port number of remote host",
          "default": "21",
          "type": "int"
        },
        {
          "name": "authAlias",
          "description": "Name of the alias to obtain credentials to authenticatie on remote server"
        },
        {
          "name": "username",
          "description": "Name of the user to authenticatie on remote server"
        },
        {
          "name": "password",
          "description": "Password to authenticatie on remote server"
        },
        {
          "name": "proxyHost",
          "description": "Proxy hostname"
        },
        {
          "name": "proxyPort",
          "description": "Proxy port",
          "default": "1080",
          "type": "int"
        },
        {
          "name": "ftpType",
          "description": "FTP protocol to use",
          "default": "FTP",
          "enum": "org.frankframework.filesystem.ftp.FtpSession.FtpType"
        },
        {
          "name": "fileType",
          "enum": "org.frankframework.filesystem.ftp.FtpSession.FileType"
        },
        {
          "name": "passive",
          "description": "If <code>true</code>, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "proxyTransportType",
          "description": "(ftps) Transport type in case of sftp",
          "default": "SOCKS5",
          "enum": "org.frankframework.filesystem.ftp.FtpSession.TransportType"
        },
        {
          "name": "keystore",
          "description": "(ftps) Resource url to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used."
        },
        {
          "name": "keystoreType",
          "description": "(ftps) Type of keystore",
          "default": "pkcs12",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "keystoreAuthAlias",
          "description": "(ftps) Authentication alias used to obtain keystore password"
        },
        {
          "name": "keystorePassword",
          "description": "(ftps) Default password to access keystore"
        },
        {
          "name": "keystoreAlias",
          "description": "(ftps) Alias to obtain specific certificate or key in keystore"
        },
        {
          "name": "keystoreAliasAuthAlias",
          "description": "(ftps) Authentication alias to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keystoreAliasPassword",
          "description": "(ftps) Default password to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keyManagerAlgorithm",
          "description": "(ftps) Key manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "truststore",
          "description": "(ftps) Resource url to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used."
        },
        {
          "name": "truststoreType",
          "description": "(ftps) Type of truststore",
          "default": "jks",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "truststoreAuthAlias",
          "description": "(ftps) Authentication alias used to obtain truststore password"
        },
        {
          "name": "truststorePassword",
          "description": "(ftps) Default password to access truststore"
        },
        {
          "name": "trustManagerAlgorithm",
          "description": "(ftps) Trust manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "verifyHostname",
          "description": "(ftps) If <code>true</code>, the hostname in the certificate will be checked against the actual hostname of the peer",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "allowSelfSignedCertificates",
          "description": "(ftps) If <code>true</code>, self signed certificates are accepted",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "ignoreCertificateExpiredException",
          "description": "(ftps) If <code>true</code>, CertificateExpiredExceptions are ignored",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "prot",
          "description": "Sets the <code>Data Channel Protection Level</code>.",
          "default": "C",
          "enum": "org.frankframework.filesystem.ftp.FtpSession.Prot"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "To avoid problems with duplicate filenames in folders like the <code>errorFolder</code> or <code>processedFolder</code>,\n you should configure either <code>overwrite=&quot;true&quot;</code>, configure <code>numberOfBackups</code> to a value larger than 0, or\n configure an <code>inProcessFolder</code> and <code>fileTimeSensitive=&quot;true&quot;</code>.\n These options can be used together as well."
        },
        {
          "type": "WARNING",
          "value": "In addition to the above, prior to release 9.0 it was not sufficient to configure <code>inProcessFolder</code> and <code>fileTimeSensitive</code>\n to avoid potential duplicate filename errors. Prior to release 9.0, it is recommended to configure <code>numberOfBackups</code> to avoid these issues."
        }
      ]
    },
    {
      "name": "FtpFileSystemSender",
      "fullName": "org.frankframework.senders.FtpFileSystemSender",
      "parent": "org.frankframework.filesystem.AbstractFileSystemSender",
      "elementNames": ["FtpFileSystemSender"],
      "attributes": [
        {
          "name": "remoteDirectory",
          "description": "pathname of the file or directory to list.",
          "default": "Home folder of the ftp user"
        },
        {
          "name": "host",
          "description": "Name or ip address of remote host"
        },
        {
          "name": "port",
          "description": "Port number of remote host",
          "default": "21",
          "type": "int"
        },
        {
          "name": "authAlias",
          "description": "Name of the alias to obtain credentials to authenticatie on remote server"
        },
        {
          "name": "username",
          "description": "Name of the user to authenticatie on remote server"
        },
        {
          "name": "password",
          "description": "Password to authenticatie on remote server"
        },
        {
          "name": "proxyHost",
          "description": "Proxy hostname"
        },
        {
          "name": "proxyPort",
          "description": "Proxy port",
          "default": "1080",
          "type": "int"
        },
        {
          "name": "ftpType",
          "description": "FTP protocol to use",
          "default": "FTP",
          "enum": "org.frankframework.filesystem.ftp.FtpSession.FtpType"
        },
        {
          "name": "fileType",
          "enum": "org.frankframework.filesystem.ftp.FtpSession.FileType"
        },
        {
          "name": "passive",
          "description": "If <code>true</code>, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "proxyTransportType",
          "description": "(ftps) Transport type in case of sftp",
          "default": "SOCKS5",
          "enum": "org.frankframework.filesystem.ftp.FtpSession.TransportType"
        },
        {
          "name": "keystore",
          "description": "(ftps) Resource url to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used."
        },
        {
          "name": "keystoreType",
          "description": "(ftps) Type of keystore",
          "default": "pkcs12",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "keystoreAuthAlias",
          "description": "(ftps) Authentication alias used to obtain keystore password"
        },
        {
          "name": "keystorePassword",
          "description": "(ftps) Default password to access keystore"
        },
        {
          "name": "keystoreAlias",
          "description": "(ftps) Alias to obtain specific certificate or key in keystore"
        },
        {
          "name": "keystoreAliasAuthAlias",
          "description": "(ftps) Authentication alias to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keystoreAliasPassword",
          "description": "(ftps) Default password to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keyManagerAlgorithm",
          "description": "(ftps) Key manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "truststore",
          "description": "(ftps) Resource url to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used."
        },
        {
          "name": "truststoreType",
          "description": "(ftps) Type of truststore",
          "default": "jks",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "truststoreAuthAlias",
          "description": "(ftps) Authentication alias used to obtain truststore password"
        },
        {
          "name": "truststorePassword",
          "description": "(ftps) Default password to access truststore"
        },
        {
          "name": "trustManagerAlgorithm",
          "description": "(ftps) Trust manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "verifyHostname",
          "description": "(ftps) If <code>true</code>, the hostname in the certificate will be checked against the actual hostname of the peer",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "allowSelfSignedCertificates",
          "description": "(ftps) If <code>true</code>, self signed certificates are accepted",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "ignoreCertificateExpiredException",
          "description": "(ftps) If <code>true</code>, CertificateExpiredExceptions are ignored",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "prot",
          "description": "Sets the <code>Data Channel Protection Level</code>.",
          "default": "C",
          "enum": "org.frankframework.filesystem.ftp.FtpSession.Prot"
        }
      ]
    },
    {
      "name": "FxfListener",
      "fullName": "org.frankframework.extensions.fxf.FxfListener",
      "description": "FxF extension of EsbJmsListener.\n\n <p><b>Configuration </b><i>(where deviating from EsbJmsListener)</i><b>:</b>\n <table border=\\\"1\\\">\n <tr><th>attributes</th><th>description</th><th>default</th></tr>\n <tr><td>{@link #setDestinationName(String) destinationName}</td><td>name of the JMS destination (queue or topic) to use</td><td>\\\"jms/FileTransferAction\\\"</td></tr>\n <tr><td>{@link #setJmsRealm(String) jmsRealm}</td><td>&nbsp;</td><td>\\\"qcf_tibco_p2p_ff\\\"</td></tr>\n <tr><td>{@link #setMessageProtocol(MessageProtocol) messageProtocol}</td><td>protocol of ESB service to be called. Possible values\n <ul>\n   <li>\\\"FF\\\": Fire & Forget protocol</li>\n   <li>\\\"RR\\\": Request-Reply protocol</li>\n </ul></td><td>\\\"FF\\\"</td></tr>\n </table></p>",
      "parent": "org.frankframework.extensions.esb.EsbJmsListener",
      "elementNames": ["FxfListener"],
      "attributes": [
        {
          "name": "fxfFileSessionKey",
          "description": "name of the session key to store the name of the received file in",
          "default": "fxfFile"
        },
        {
          "name": "moveProcessedFile",
          "description": "If set to <code>true</code>, the received file is moved after being processed",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "processedSiblingDirectory",
          "description": "(only used when <code>moveProcessedFile=true</code>) <b>sibling</b> directory (related to the parent directory of the file to process) where files are stored after being processed",
          "default": "processed"
        },
        {
          "name": "createProcessedDirectory",
          "description": "(only used when <code>moveProcessedFile=true</code>) when set to <code>true</code>, the directory to move processed files in is created if it does not exist",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "FxfWrapperPipe",
      "fullName": "org.frankframework.extensions.fxf.FxfWrapperPipe",
      "description": "FxF wrapper to be used with FxF3. When receiving files (direction=unwrap)\n the message handed to the pipeline is the local filename extracted from an\n ESB SOAP message. When sending files (direction=wrap) input should be a local\n filename which will be wrapped into an ESB SOAP message. Please note: When\n writing files which need to be send through FxF they should be written to\n ${fxf.dir}/NNX00000/out. The property ${fxf.dir} will automatically be\n available on the DTAP environment (define it in StageSpecifics_LOC.properties\n only). Replace NNX00000 with the specific flowId and generate a unique\n filename (files will automatically be cleaned after 30 days or any other\n value specified by ${fxf.retention}).",
      "parent": "org.frankframework.extensions.esb.EsbSoapWrapperPipe",
      "elementNames": ["FxfInputWrapper", "FxfOutputWrapper", "FxfWrapperPipe"],
      "attributes": [
        {
          "name": "flowId",
          "description": "The flowId of the file transfer when direction=wrap. When direction=unwrap the flowId will be extracted from the incoming message and added as a sessionKey to the pipeline."
        },
        {
          "name": "flowOutFolder",
          "description": "specifies the output folder if transformFilename=<code>false</code> and direction=wrap"
        },
        {
          "name": "transformFilename",
          "description": "when <code>true</code> and direction=wrap, the input which is expected to be a local filename will be transformed to the filename as known on the IUF State machine.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "soapBodySessionKey"
        },
        {
          "name": "transferFlowIdSessionKey"
        },
        {
          "name": "clientFilenameSessionKey"
        },
        {
          "name": "flowIdSessionKey"
        },
        {
          "name": "fxfDirSessionKey"
        },
        {
          "name": "fxfFileSessionKey"
        },
        {
          "name": "fxfVersion",
          "description": "either 3.1 or 3.2",
          "default": "3.1"
        },
        {
          "name": "createFolder",
          "description": "when set to <code>true</code>, the folder corresponding fxf.dir property will be created in case it does not exist",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "useServerFilename",
          "description": "when set to <code>true</code>, ServerFileName from the input will be used as the filename",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "FxfXmlValidator",
      "fullName": "org.frankframework.extensions.fxf.FxfXmlValidator",
      "description": "FxF XML validator to be used with FxF3. When receiving files\n (direction=receive) the message is validated against the\n OnCompletedTransferNotify WSDL (a P2P connection, hence same WSDL (provided\n by Tibco) for all queues (every Ibis receiving FxF files has it's own\n queue)). When sending files (direction=send) the message is validated against\n the StartTransfer WSDL (ESB service provided by Tibco).",
      "parent": "org.frankframework.pipes.WsdlXmlValidator",
      "elementNames": [
        "FxfXmlInputValidator",
        "FxfXmlOutputValidator",
        "FxfXmlValidatorPipe"
      ],
      "attributes": [
        {
          "name": "direction",
          "enum": "org.frankframework.extensions.fxf.FxfXmlValidator.Direction"
        },
        {
          "name": "fxfVersion",
          "description": "either 3.1 or 3.2",
          "default": "3.1"
        }
      ]
    },
    {
      "name": "GetFromSession",
      "fullName": "org.frankframework.pipes.GetFromSession",
      "description": "Gets the contents of the {@link PipeLineSession pipeLineSession} by a key specified by\n <code>{@link #setSessionKey(String) sessionKey}</code>.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["GetFromSessionPipe"],
      "attributes": [
        {
          "name": "sessionKey",
          "description": "Key of the session variable to retrieve the output message from. When left unspecified, the input message is used as the key of the session variable"
        },
        {
          "name": "type",
          "description": "<ul><li><code>string</code>: renders the contents</li><li><code>map</code>: converts a Map&lt;String, String&gt; object to a xml-string (&lt;items&gt;&lt;item name='...'&gt;...&lt;/item&gt;&lt;item name='...'&gt;...&lt;/item&gt;&lt;/items&gt;)</li></ul>",
          "default": "string",
          "enum": "org.frankframework.parameters.ParameterType"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Session"
        }
      ]
    },
    {
      "name": "GetPrincipalPipe",
      "fullName": "org.frankframework.pipes.GetPrincipalPipe",
      "description": "Returns the name of the user executing the request.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["GetPrincipalPipe"],
      "attributes": [
        {
          "name": "notFoundForwardName",
          "description": "name of forward returned if principal has not been found"
        }
      ],
      "forwards": [
        {
          "name": "*",
          "description": "principal has not been found, when @{literal notFoundForwardName} is used"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Session"
        }
      ]
    },
    {
      "name": "GetTibcoQueues",
      "fullName": "org.frankframework.extensions.tibco.GetTibcoQueues",
      "description": "Returns information about Tibco queues in a XML string.\n <p>\n If the parameter <code>queueName</code> is empty then\n <ul><li>all Tibco queues including information about these queues are returned</li></ul>\n else\n <ul><li>one message on a specific Tibco queue including information about this message is returned (without removing it)</li></ul>\n </p>",
      "parent": "org.frankframework.pipes.TimeoutGuardPipe",
      "elementNames": ["GetTibcoQueuesPipe"],
      "attributes": [
        {
          "name": "url",
          "description": "URL or base of URL to be used. When multiple URLs are defined (comma separated list), the first URL is used of which the server has an active state"
        },
        {
          "name": "authAlias",
          "description": "alias used to obtain credentials for authentication to host"
        },
        {
          "name": "username",
          "description": "username used in authentication to host"
        },
        {
          "name": "password",
          "description": "password used in authentication to host"
        },
        {
          "name": "skipTemporaryQueues",
          "description": "when set to <code>true</code>, temporary queues are skipped",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "hideMessage",
          "description": "when set to <code>true</code>, the length of the queue message is returned instead of the queue message self (when parameter <code>queueName</code> is not empty)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "queueRegex"
        },
        {
          "name": "emsPropertiesFile",
          "description": "Location to a <code>jndi.properties</code> file for additional EMS (SSL) properties"
        }
      ],
      "parameters": [
        {
          "name": "url",
          "description": "When a parameter with name url is present, it is used instead of the url specified by the attribute"
        },
        {
          "name": "authAlias",
          "description": "When a parameter with name authAlias is present, it is used instead of the authAlias specified by the attribute"
        },
        {
          "name": "username",
          "description": "When a parameter with name userName is present, it is used instead of the userName specified by the attribute"
        },
        {
          "name": "password",
          "description": "When a parameter with name password is present, it is used instead of the password specified by the attribute"
        },
        {
          "name": "queueName",
          "description": "The name of the queue which is used for browsing one queue"
        },
        {
          "name": "queueItem",
          "description": "The number of the queue message which is used for browsing one queue (default is 1)"
        },
        {
          "name": "showAge",
          "description": "When set to <code>true</code> and <code>pendingMsgCount&gt;0</code> and <code>receiverCount=0</code>, the age of the current first message in the queue is shown in the queues overview (default is false)"
        },
        {
          "name": "countOnly",
          "description": "When set to <code>true</code> and <code>queueName</code> is filled, only the number of pending messages is returned (default is false)"
        },
        {
          "name": "ldapUrl",
          "description": "When present, principal descriptions are retrieved from this LDAP server"
        }
      ]
    },
    {
      "name": "GlobalForwards",
      "fullName": "org.frankframework.core.PipeForwards",
      "description": "Optional element in a pipeline. Global forwards that will be added to every pipe, when the forward name has not been explicitly set.\n For example the <code>&lt;forward name=\\\"exception\\\" path=\\\"error_exception\\\" /&gt;</code>, which will add the '<code>exception</code>' forward to every pipe in the pipeline.",
      "elementNames": ["GlobalForwards"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "forward",
          "description": "Defines what pipe or exit to execute next. When the execution of a pipe is done, the pipe looks up the next pipe or exit to execute.\n See {@link PipeForward Forward} for more information.",
          "type": "org.frankframework.core.PipeForward"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "HashPipe",
      "fullName": "org.frankframework.pipes.HashPipe",
      "description": "This pipe can be used to generate a hash for the given message using an algorithm. With this, you can prove the integrity of the message.\n If you use one of the Mac-based algorithms (starting with 'Hmac'), you need a secret as well. A Mac algorithm uses a secret, combined with the algorithm\n to create a 'hash' of a message. Only sources which have this secret are able to generate the same hash for the given message.\n With this, you can prove integrity and authenticity of a message.\n <p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["HashPipe"],
      "attributes": [
        {
          "name": "algorithm",
          "description": "Hash Algorithm to use",
          "default": "HmacSHA256",
          "enum": "org.frankframework.pipes.hash.Algorithm"
        },
        {
          "name": "encoding",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0",
            "description": "attribute encoding has been replaced with attribute charset, default has changed from ISO8859_1 to UTF-8"
          }
        },
        {
          "name": "charset",
          "description": "Character set to use for converting the secret from String to bytes",
          "default": "UTF-8"
        },
        {
          "name": "hashEncoding",
          "description": "Method to use for converting the hash from bytes to String",
          "default": "Base64",
          "enum": "org.frankframework.pipes.HashPipe.HashEncoding"
        },
        {
          "name": "binaryToTextEncoding",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "use attribute hashEncoding instead"
          },
          "enum": "org.frankframework.pipes.HashPipe.HashEncoding"
        },
        {
          "name": "secret",
          "description": "The secret to hash with. Only used if no parameter secret is configured. The secret is only used when there is no authAlias specified, by attribute or parameter"
        },
        {
          "name": "authAlias",
          "description": "authAlias to retrieve the secret from (password field). Only used if no parameter authAlias is configured"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "HttpListener",
      "fullName": "org.frankframework.http.HttpListener",
      "deprecated": {
        "forRemoval": true,
        "since": "7.8.0"
      },
      "description": "Implementation of a {@link IPushingListener IPushingListener} that enables a {@link Receiver}\n to receive messages from HTTP requests. If you are writing a new configuration, you are recommended to use\n an {@link ApiListener} or a {@link WebServiceListener}\n instead.",
      "parent": "org.frankframework.http.PushingListenerAdapter",
      "elementNames": ["HttpListener"],
      "attributes": [
        {
          "name": "serviceName",
          "description": "name of the service that is provided by the adapter of this listener"
        }
      ]
    },
    {
      "name": "HttpSender",
      "fullName": "org.frankframework.http.HttpSender",
      "description": "Sender for the HTTP protocol using {@link HttpMethod HttpMethod}. By default, any response code outside the 2xx or 3xx range\n is considered an error and the <code>exception</code> forward of the SenderPipe is followed if present and if there\n is no forward for the specific HTTP status code. Forwards for specific HTTP codes (e.g. \\\"200\\\", \\\"201\\\", ...)\n are returned by this sender, so they are available to the SenderPipe.\n\n <p><b>Expected message format:</b></p>\n <p>GET methods expect a message looking like this:\n <pre>\n    param_name=param_value&another_param_name=another_param_value\n </pre>\n <p>POST AND PUT methods expect a message similar as GET, or looking like this:\n <pre>\n   param_name=param_value\n   another_param_name=another_param_value\n </pre>",
      "parent": "org.frankframework.http.AbstractHttpSender",
      "elementNames": ["HttpSender"],
      "attributes": [
        {
          "name": "postType",
          "description": "If <code>methodType</code>=<code>POST</code>, <code>PUT</code> or <code>PATCH</code>, the type of post request",
          "default": "RAW",
          "enum": "org.frankframework.http.HttpEntityType"
        },
        {
          "name": "paramsInUrl",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0"
          },
          "description": "If false and <code>methodType</code>=<code>POST</code>, request parameters are put in the request body instead of in the url",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "firstBodyPartName",
          "description": "(Only used when <code>methodType=POST</code> and <code>postType=URLENCODED</code>, <code>FORM-DATA</code> or <code>MTOM</code>) Prepends a new BodyPart using the specified name and uses the input of the Sender as content"
        },
        {
          "name": "multipartXmlSessionKey",
          "description": "If set and <code>methodType=POST</code> and <code>paramsInUrl=false</code>, a multipart/form-data entity is created instead of a request body.\n For each part element in the session key a part in the multipart entity is created. Part elements can contain the following attributes:\n <ul>\n <li>name: optional, used as 'filename' in Content-Disposition</li>\n <li>sessionKey: mandatory, refers to contents of part</li>\n <li>value: optional, the contents of the part if the sessionKey specified contains no data</li>\n <li>mimeType: optional MIME type</li>\n </ul>\n The name of the part is determined by the name attribute, unless that is empty, or the contents is binary. In those cases the sessionKey name is used as name of the part."
        },
        {
          "name": "mtomContentTransferEncoding"
        },
        {
          "name": "encodeMessages",
          "description": "Specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "treatInputMessageAsParameters",
          "description": "If <code>true</code>, the input will be added to the URL for <code>methodType=GET</code>, or for <code>methodType=POST</code>, <code>PUT</code> or\n <code>PATCH</code> if <code>postType=RAW</code>. This used to be the default behaviour in framework version 7.7 and earlier",
          "default": "for methodType=<code>GET</code>: <code>false</code>,<br/>for methodTypes <code>POST</code>, <code>PUT</code>, <code>PATCH</code>: <code>true</code>",
          "type": "bool"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "When used as MTOM sender and MTOM receiver doesn't support Content-Transfer-Encoding \"base64\", messages without line feeds will give an error.\n This can be fixed by setting the Content-Transfer-Encoding in the MTOM sender."
        }
      ]
    },
    {
      "name": "HttpSession",
      "fullName": "org.frankframework.http.HttpSession",
      "description": "Shared HTTPSession, implements {@link SharedResource} so it can be set in the Configuration.xml",
      "parent": "org.frankframework.http.AbstractHttpSession",
      "elementNames": ["HttpSession", "HttpSessionSharedResource"],
      "attributes": [
        {
          "name": "name",
          "description": "The functional name of the object."
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "IMSSender",
      "fullName": "org.frankframework.extensions.ibm.IMSSender",
      "description": "JMS sender which will add an IMS header to the message and call the MQ specific logic.\n\n <p>See {@link JmsSender} for configuration</p>",
      "parent": "org.frankframework.jms.JmsSender",
      "elementNames": ["IMSSender"],
      "attributes": [
        {
          "name": "transactionCode",
          "description": "The transaction code that should be added in the header, must be 8 characters"
        }
      ]
    },
    {
      "name": "IbisActionJob",
      "fullName": "org.frankframework.scheduler.job.IbisActionJob",
      "deprecated": {
        "forRemoval": true,
        "since": "8.2.0",
        "description": "IbisActionJob has been renamed to ActionJob"
      },
      "parent": "org.frankframework.scheduler.job.ActionJob",
      "elementNames": ["IbisActionJob"]
    },
    {
      "name": "IbisJavaSender",
      "fullName": "org.frankframework.senders.IbisJavaSender",
      "description": "Posts a message to another Frank!Framework-adapter or an application in the same JVM using IbisServiceDispatcher.\n <p>\n An IbisJavaSender makes a call to a Receiver with a {@link JavaListener}\n or any other application in the same JVM that has registered a <code>RequestProcessor</code> with the IbisServiceDispatcher.\n </p>\n The IbisJavaSender is now considered to be legacy. The new way to call another adapter or java application from your own\n adapter is by using the {@link FrankSender}.\n </p>\n <h4>configuring IbisJavaSender and JavaListener</h4>\n <ul>\n   <li><em>NB:</em> Using IbisJavaSender to call another adapter is inefficient and therefore not recommended. It is much more efficient to use for this a {@link FrankSender} or {@link IbisLocalSender}.</li>\n   <li>Define a {@link org.frankframework.pipes.SenderPipe} with an IbisJavaSender</li>\n   <li>Set the attribute <code>serviceName</code> to <i>yourExternalServiceName</i></li>\n </ul>\n In the Adapter to be called:\n <ul>\n   <li>Define a Receiver with a JavaListener</li>\n   <li>Set the attribute <code>serviceName</code> to <i>yourExternalServiceName</i></li>\n </ul>\n N.B. Please make sure that the IbisServiceDispatcher-1.4.jar or newer is present on the class path of the server. For more information, see:\n  <a href=\\\"https://github.com/frankframework/servicedispatcher\\\">https://github.com/frankframework/servicedispatcher</a>",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["IbisJavaSender"],
      "attributes": [
        {
          "name": "serviceName",
          "description": "ServiceName of the {@link JavaListener} that should be called."
        },
        {
          "name": "serviceNameSessionKey",
          "description": "Key of session variable to specify ServiceName of the JavaListener that should be called."
        },
        {
          "name": "returnedSessionKeys",
          "description": "Comma separated list of keys of session variables that will be returned to caller, for correct results as well as for erroneous results.\n The set of available sessionKeys to be returned might be limited by the returnedSessionKeys attribute of the corresponding JavaListener."
        },
        {
          "name": "dispatchType",
          "description": "Set to 'DLL' to make the dispatcher communicate with a DLL set on the classpath"
        }
      ],
      "parametersDescription": "All parameters are copied to the PipeLineSession of the service called.",
      "forwards": [
        {
          "name": "*",
          "description": "Exit code"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ]
    },
    {
      "name": "IbisLocalSender",
      "fullName": "org.frankframework.senders.IbisLocalSender",
      "description": "Posts a message to another Frank!Framework-adapter in the same Frank!Framework instance. If the callee exits with an &lt;<code>exit</code>&gt;\n that has state {@link PipeLine.ExitState#ERROR}, an error is considered to happen\n in the caller which means that the <code>exception</code> forward is followed if it is present.\n <p>\n The IbisLocalSender is now considered to be legacy. The new way to call another adapter from your own\n adapter is by using the {@link FrankSender}.\n </p>\n <p>\n Returns exit.code as forward name to {@link SenderPipe} provided that exit.code can be parsed as integer.\n For example, if the called adapter has an exit state with code\n <code>2</code>, then the {@link SenderPipe} supports a forward with name <code>2</code>\n that is followed when the called adapter exits with the mentioned exit. This does not work if the code is for example <code>c2</code>.\n </p>\n <p>\n An IbisLocalSender makes a call to a {@link org.frankframework.receivers.Receiver} with either a {@link WebServiceListener}\n or a {@link JavaListener JavaListener}.\n </p>\n\n\n <h3>Configuration of the Adapter to be called</h3>\n A call to another Adapter in the same Frank!Framework instance is preferably made using the combination\n of an IbisLocalSender and a {@link JavaListener JavaListener}. If,\n however, a Receiver with a {@link WebServiceListener} is already present, that can be used in some cases, too.\n\n <h4>configuring IbisLocalSender and JavaListener</h4>\n <ul>\n   <li>Define a SenderPipe with an IbisLocalSender</li>\n   <li>Set the attribute <code>javaListener</code> to <i>yourServiceName</i></li>\n   <li>Do not set the attribute <code>serviceName</code></li>\n </ul>\n In the Adapter to be called:\n <ul>\n   <li>Define a Receiver with a JavaListener</li>\n   <li>Set the attribute <code>name</code> to <i>yourServiceName</i></li>\n   <li>Do not set the attribute <code>serviceName</code>, except if the service is to be called also\n       from applications other than this Frank!Framework-instance</li>\n </ul>\n\n <h4>configuring IbisLocalSender and WebServiceListener</h4>\n\n <ul>\n   <li>Define a SenderPipe with an IbisLocalSender</li>\n   <li>Set the attribute <code>serviceName</code> to <i>yourIbisWebServiceName</i></li>\n   <li>Do not set the attribute <code>javaListener</code></li>\n </ul>\n In the Adapter to be called:\n <ul>\n   <li>Define a Receiver with a WebServiceListener</li>\n   <li>Set the attribute <code>name</code> to <i>yourIbisWebServiceName</i></li>\n </ul>",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["IbisLocalSender"],
      "attributes": [
        {
          "name": "serviceName",
          "deprecated": {
            "forRemoval": true,
            "since": "7.9.0"
          },
          "description": "Name of the {@link WebServiceListener} that should be called"
        },
        {
          "name": "javaListener",
          "description": "Name of the {@link JavaListener} that should be called (will be ignored when javaListenerSessionKey is set)"
        },
        {
          "name": "javaListenerSessionKey",
          "description": "Name of the sessionKey which holds the name of the {@link JavaListener} that should be called"
        },
        {
          "name": "returnedSessionKeys",
          "description": "Comma separated list of keys of session variables that will be returned to caller, for correct results as well as for erroneous results.\n The set of available sessionKeys to be returned might be limited by the returnedSessionKeys attribute of the corresponding JavaListener."
        },
        {
          "name": "synchronous",
          "description": "If set <code>false</code>, the call is made asynchronously. This implies <code>isolated=true</code>",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "isolated",
          "description": "If <code>true</code>, the call is made in a separate thread, possibly using separate transaction",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "checkDependency",
          "description": "If <code>true</code>, the sender waits upon open until the called {@link JavaListener} is opened",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "dependencyTimeOut",
          "description": "Maximum time (in seconds) the sender waits for the listener to start. A value of -1 indicates to wait indefinitely",
          "default": "60",
          "type": "int"
        },
        {
          "name": "throwJavaListenerNotFoundException",
          "description": "If set <code>false</code>, the xml-string \\\"&lt;error&gt;could not find JavaListener [...]&lt;/error&gt;\\\" is returned instead of throwing a senderexception",
          "default": "true",
          "type": "bool"
        }
      ],
      "parametersDescription": "All parameters are copied to the PipeLineSession of the service called.",
      "forwards": [
        {
          "name": "*",
          "description": "Exit code"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "IdinSender",
      "fullName": "org.frankframework.extensions.idin.IdinSender",
      "description": "Requires the net.bankid.merchant.library V1.2.9",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["IdinSender"],
      "attributes": [
        {
          "name": "action",
          "enum": "org.frankframework.extensions.idin.IdinSender.Action"
        },
        {
          "name": "merchantID",
          "description": "This is the contract number for iDIN the Merchant received from its Acquirer after registration,\n and is used to unambiguously identify the Merchant. This number is 10-digits long, where the\n first four digits are equal to the AcquirerID."
        },
        {
          "name": "merchantSubID",
          "description": "The SubID that uniquely defines the name and address of the Merchant to be used for iDIN,\n if operating under different brands or trading entities. The Merchant obtains the SubID\n from its Acquirer after registration for iDIN. A Merchant can request permission from\n the Acquirer to use one or more SubIDs.",
          "type": "int"
        },
        {
          "name": "merchantReturnUrl",
          "description": "The web address provided by the Merchant in the transaction request that is used to redirect the\n Consumer back to the Merchant after completing the authentication in the Issuer domain. The URL\n does not necessarily begin with http:// or https://, it can also start with an app handler\n e.g. companyname-nlservice://."
        },
        {
          "name": "acquirerDirectoryUrl"
        },
        {
          "name": "acquirerTransactionUrl"
        },
        {
          "name": "acquirerStatusUrl"
        },
        {
          "name": "keyStoreLocation",
          "description": "The Java iDIN Software Library needs to access a keystore located in the Java classpath to\n store all the required certificates"
        },
        {
          "name": "keyStorePassword",
          "description": "The password used to access the keystore"
        },
        {
          "name": "keyStoreAuthAlias",
          "description": "The AuthAlias used to access the keystore"
        },
        {
          "name": "merchantCertificateAlias",
          "description": "This is the certificate owned by the Merchant. It's the private certificate\n used to sign messages sent by the Merchant to the Acquirer's Routing Service platform. Its public\n key is also used by the Acquirer to authenticate incoming messages from the Merchant. The\n Merchant certificate must be in PKCS#12 format which has the extension .p12 or .pfx"
        },
        {
          "name": "merchantCertificatePassword",
          "description": "In case the merchant certificate has been password protected"
        },
        {
          "name": "merchantCertificateAuthAlias",
          "description": "In case the merchant certificate has been password protected"
        },
        {
          "name": "acquirerCertificateAlias",
          "description": "This is the public certificate used to authenticate incoming messages from the Acquirer. The library\n only needs its public key. The public certificate must be in PEM format (base64 ASCII) and typically\n has the file extension .cer,.crt or .pem."
        },
        {
          "name": "acquirerAlternativeCertificateAlias",
          "description": "This is the public certificate used to authenticate incoming messages from the Acquirer. The library\n only needs its public key. The public certificate must be in PEM format (base64 ASCII) and typically\n has the file extension .cer,.crt or .pem."
        },
        {
          "name": "samlCertificateAlias",
          "description": "This is the certificate owned by the Merchant. Its public key is used by the Issuer to encrypt information.\n The Merchant can then use the private key to decrypt that information. The SAML certificate must be in\n PKCS#12 format which has the extension .p12 or .pfx;"
        },
        {
          "name": "sAMLCertificatePassword",
          "description": "In case the SAML certificate has been password protected"
        },
        {
          "name": "sAMLCertificateAuthAlias",
          "description": "In case the SAML certificate has been password protected"
        },
        {
          "name": "logsEnabled",
          "type": "bool"
        },
        {
          "name": "serviceLogsEnabled",
          "type": "bool"
        },
        {
          "name": "serviceLogsLocation"
        },
        {
          "name": "serviceLogsPattern"
        },
        {
          "name": "tls12Enabled",
          "type": "bool"
        },
        {
          "name": "merchantReturnUrlSessionKey"
        },
        {
          "name": "configurationXML",
          "mandatory": true,
          "description": "Load configuration from XML. Attributes may overwrite this 'default'."
        }
      ]
    },
    {
      "name": "IdocSender",
      "fullName": "org.frankframework.extensions.sap.IdocSender",
      "description": "Implementation of {@link ISender sender} that sends an IDoc to SAP.\n N.B. The sending of the iDoc is committed right after the XA transaction is completed.",
      "parent": "org.frankframework.extensions.sap.jco3.SapSenderBase",
      "elementNames": ["IdocSender"]
    },
    {
      "name": "IdocSender",
      "fullName": "org.frankframework.extensions.sap.jco3.IdocSender",
      "deprecated": {
        "forRemoval": true,
        "since": "7.7.0",
        "description": "Please do not specify jco version in package name"
      },
      "parent": "org.frankframework.extensions.sap.jco3.SapSenderBase",
      "elementNames": []
    },
    {
      "name": "IdocSenderImpl",
      "fullName": "org.frankframework.extensions.sap.jco3.IdocSenderImpl",
      "abstract": true,
      "description": "Implementation of {@link ISender sender} that sends an IDoc to SAP.\n N.B. The sending of the iDoc is committed right after the XA transaction is completed.",
      "parent": "org.frankframework.extensions.sap.jco3.SapSenderBase",
      "elementNames": []
    },
    {
      "name": "IfPipe",
      "fullName": "org.frankframework.pipes.IfPipe",
      "description": "Selects a forward based on an expression. The expression type is coupled to the mediaType:\n <ul>\n     <li>XML (application/xml) uses Xpath</li>\n     <li>JSON (application/json) uses jsonPath</li>\n </ul>\n The XML mediaType is the default type, if you want to use json, you need to set this using 'mimeType' in the Message.\n\n <h4>Expressions</h4>\n Expressions are used to select nodes in the given input document. Imagine a collection of books:\n <pre><code>{\n   &quot;store&quot;: {\n     &quot;book&quot;: [\n       {\n         &quot;category&quot;: &quot;reference&quot;,\n         &quot;author&quot;: &quot;Nigel Rees&quot;,\n         &quot;title&quot;: &quot;Sayings of the Century&quot;,\n         &quot;price&quot;: 8.95\n       },\n       {\n         &quot;category&quot;: &quot;fiction&quot;,\n         &quot;author&quot;: &quot;Evelyn Waugh&quot;,\n         &quot;title&quot;: &quot;Sword of Honour&quot;,\n         &quot;price&quot;: 12.99\n       },\n       {\n         &quot;category&quot;: &quot;fiction&quot;,\n         &quot;author&quot;: &quot;Herman Melville&quot;,\n         &quot;title&quot;: &quot;Moby Dick&quot;,\n         &quot;isbn&quot;: &quot;0-553-21311-3&quot;,\n         &quot;price&quot;: 8.99\n       },\n       {\n         &quot;category&quot;: &quot;fiction&quot;,\n         &quot;author&quot;: &quot;J. R. R. Tolkien&quot;,\n         &quot;title&quot;: &quot;The Lord of the Rings&quot;,\n         &quot;isbn&quot;: &quot;0-395-19395-8&quot;,\n         &quot;price&quot;: 22.99\n       }\n     ]\n   }\n }</code></pre>\n <p>\n With both expression languages you'll be able to select one or multiple nodes from this collection.\n <br/>\n Using this pipe there are two options. Use it only with an <code>expression</code> or combine it with an <code>expressionValue</code>. When using the expression,\n the pipe evaluates to <code>thenForwardName</code> when <em>there is a match</em>, even it is empty. In the given example, this might be one of:\n <pre><code>$.store\n   $.store.book[1]\n   $.store.book[?(@.price == 22.99)].author\n   $.store.book[?(@.category == 'fiction')]</code></pre>\n\n <h4>expressionValue</h4>\n When using expression combined with expressionValue, the pipe evaluates to <code>thenForwardName</code> when the <em>the matched value is equal to\n expressionValue</em>. This needs to be an exact match.\n <br/>\n\n <h4>XML/XPATH</h4>\n Xpath has been around a long time, information about the syntax can be found everywhere on the internet.\n The XML implementation wraps the Xpath expression in an XSL. This enables us to use complex expressions which evaluate to true or false instead of\n being used only as a selector of nodes in the input XML. This is available to be backwards compatible with the {@link XmlIf} pipe.\n For instance, take the following example input:\n <pre><code>&lt;results&gt;\n     &lt;result name=&quot;test&quot;&gt;&lt;/result&gt;\n     &lt;result name=&quot;test&quot;&gt;&lt;/result&gt;\n   &lt;/results&gt;</code></pre>\n Examples with complex expressions might be something like: <code>number(count(/results/result[contains(@name , 'test')])) &gt; 1</code>, to test if there's more\n than one node found containing the string 'test'. Please check if a simpler, less error-prone expression like\n <code>/results/result[contains(@name, 'test')]</code> can suffice.\n <p></p>\n\n <h4>Without expression</h4>\n Without an expression, the default behaviour is to assume the input is a string, the code will try to match the string to an optional regular expression\n or tries to match the string value to the optional expressionValue.\n <p></p>\n\n <h4>Resources</h4>\n <ul>\n     <li><a href=\\\"https://github.com/json-path/JsonPath\\\">JsonPath / Jayway implementation including examples</a></li>\n     <li><a href=\\\"https://jsonpath.fly.dev/\\\">JsonPath online evaluator</a></li>\n     <li><a href=\\\"https://www.w3schools.com/xml/xpath_syntax.asp\\\">Xpath syntax</a></li>\n     <li><a href=\\\"https://www.freeformatter.com/xpath-tester.html\\\">Xpath online evaluator</a></li>\n     <li><a href=\\\"https://en.wikipedia.org/wiki/XPath\\\">Xpath information and history</a></li>\n </ul>",
      "parent": "org.frankframework.pipes.AbstractPipe",
      "elementNames": ["IfPipe"],
      "attributes": [
        {
          "name": "thenForwardName",
          "deprecated": {
            "forRemoval": true,
            "since": "9.0",
            "description": "Use the 'then' forward in your configuration"
          },
          "description": "forward returned when output is <code>true</code>",
          "default": "then"
        },
        {
          "name": "elseForwardName",
          "deprecated": {
            "forRemoval": true,
            "since": "9.0",
            "description": "Use the 'else' forward in your configuration"
          },
          "description": "forward returned when output is <code>false</code>",
          "default": "else"
        },
        {
          "name": "expressionValue",
          "description": "a string to compare the result of the xpathExpression (or the input-message itself) to. If not specified, a non-empty result leads to the 'then'-forward, an empty result to 'else'-forward"
        },
        {
          "name": "xpathExpression",
          "description": "xpath expression to be applied to the input-message. if not set, no transformation is done when the input message is mediatype XML"
        },
        {
          "name": "jsonPathExpression",
          "description": "jsonPath expression to be applied to the input-message. if not set, no transformation is done when the input message is mediatype JSON"
        },
        {
          "name": "xsltVersion",
          "description": "If set to <code>2</code> or <code>3</code> a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan)",
          "default": "2",
          "type": "int"
        },
        {
          "name": "namespaceDefs",
          "description": "namespace definitions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code> definitions."
        },
        {
          "name": "namespaceAware",
          "description": "controls namespace-awareness of XSLT transformation",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "defaultMediaType",
          "default": "DefaultMediaType.XML",
          "enum": "org.frankframework.pipes.IfPipe.SupportedMediaType"
        }
      ],
      "forwards": [
        {
          "name": "*",
          "description": "when `thenForwardName` or `elseForwardName` are used"
        },
        {
          "name": "then",
          "description": "the configured condition is met"
        },
        {
          "name": "else",
          "description": "the configured condition is not met"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Router"
        }
      ]
    },
    {
      "name": "ImapListener",
      "fullName": "org.frankframework.receivers.ImapListener",
      "parent": "org.frankframework.filesystem.AbstractMailListener",
      "elementNames": ["ImapListener"],
      "attributes": [
        {
          "name": "host",
          "mandatory": true,
          "description": "The hostname of the IMAP server"
        },
        {
          "name": "port",
          "description": "The port of the IMAP server",
          "default": "993",
          "type": "int"
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain accessToken or username and password for authentication to Exchange mail server.\n If the alias refers to a combination of a username and a password, the deprecated Basic Authentication method is used.\n If the alias refers to a password without a username, the password is treated as the accessToken."
        },
        {
          "name": "username",
          "description": "Username for authentication to mail server."
        },
        {
          "name": "password",
          "description": "Password for authentication to mail server."
        },
        {
          "name": "baseFolder",
          "description": "Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used"
        },
        {
          "name": "replyAddressFields",
          "description": "Comma separated list of fields to try as response address",
          "default": "<code>replyTo,from,sender,Return-Path</code>"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ]
    },
    {
      "name": "ImapSender",
      "fullName": "org.frankframework.senders.ImapSender",
      "parent": "org.frankframework.filesystem.AbstractFileSystemSender",
      "elementNames": ["ImapSender"],
      "attributes": [
        {
          "name": "host",
          "mandatory": true,
          "description": "The hostname of the IMAP server"
        },
        {
          "name": "port",
          "description": "The port of the IMAP server",
          "default": "993",
          "type": "int"
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain accessToken or username and password for authentication to Exchange mail server.\n If the alias refers to a combination of a username and a password, the deprecated Basic Authentication method is used.\n If the alias refers to a password without a username, the password is treated as the accessToken."
        },
        {
          "name": "username",
          "description": "Username for authentication to mail server."
        },
        {
          "name": "password",
          "description": "Password for authentication to mail server."
        },
        {
          "name": "baseFolder",
          "description": "Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used"
        },
        {
          "name": "replyAddressFields",
          "description": "Comma separated list of fields to try as response address",
          "default": "<code>replyTo,from,sender,Return-Path</code>"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ]
    },
    {
      "name": "Include",
      "fullName": "org.frankframework.configuration.Include",
      "elementNames": ["Include"],
      "attributes": [
        {
          "name": "ref",
          "description": "reference to a configuration to be included in the current."
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "IncreaseIntegerPipe",
      "fullName": "org.frankframework.pipes.IncreaseIntegerPipe",
      "description": "Pipe that increases the integer value of a session variable.\n Can be used in combination with {@link CompareIntegerPipe} to construct loops.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["IncreaseIntegerPipe"],
      "attributes": [
        {
          "name": "sessionKey",
          "mandatory": true,
          "description": "Reference to the session variable whose value is to be increased"
        },
        {
          "name": "increment",
          "description": "amount to increment the value. Can be set from the attribute or the parameter 'increment'",
          "default": "1",
          "type": "int"
        }
      ],
      "parameters": [
        {
          "name": "increment",
          "description": "integer value to be added to the session variable"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Session"
        }
      ]
    },
    {
      "name": "InputFields",
      "fullName": "org.frankframework.batch.InputfieldsPart",
      "elementNames": ["InputFields"],
      "attributes": [
        {
          "name": "value"
        },
        {
          "name": "description"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Batch"
        }
      ]
    },
    {
      "name": "InputStreamReaderFactory",
      "fullName": "org.frankframework.batch.InputStreamReaderFactory",
      "description": "Basic InputStreamReaderFactory.",
      "elementNames": ["InputStreamReaderFactory"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "IsUserInRolePipe",
      "fullName": "org.frankframework.pipes.IsUserInRolePipe",
      "description": "Pipe that checks if the calling user has a specified role.\n Uses the PipeLineSessions methods.\n <p>\n If the role is not specified by the role attribute, the input of\n the pipe is used as role.\n\n N.B. The role itself must be specified by hand in the deployment descriptors web.xml and application.xml.\n </p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["IsUserInRolePipe"],
      "attributes": [
        {
          "name": "role",
          "description": "the j2ee role(s) to check, if the user in multiple roles, the first specified role will be matched."
        },
        {
          "name": "notInRoleForwardName",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0"
          },
          "description": "name of forward returned if user is not allowed to assume the specified role",
          "default": "notInRole"
        }
      ],
      "forwards": [
        {
          "name": "notInRole",
          "description": "user does not have the required role"
        },
        {
          "name": "*",
          "description": "the first matched role which the user has"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        },
        {
          "label": "EIP",
          "value": "Router"
        }
      ]
    },
    {
      "name": "IsXmlPipe",
      "fullName": "org.frankframework.pipes.IsXmlPipe",
      "description": "Selects an exitState, based on if the input is a XML string.\n The input is an XML string if it, after removing leading white-space characters, starts with '&lt;'.",
      "parent": "org.frankframework.pipes.AbstractPipe",
      "elementNames": ["IsXmlPipe"],
      "attributes": [
        {
          "name": "thenForwardName",
          "description": "forward returned when <code>true</code>",
          "default": "then"
        },
        {
          "name": "elseForwardName",
          "description": "forward returned when 'false'",
          "default": "else"
        },
        {
          "name": "elseForwardOnEmptyInput",
          "description": "return elseforward when input is empty (or thenforward)",
          "default": "true",
          "type": "bool"
        }
      ],
      "forwards": [
        {
          "name": "*",
          "description": "when `thenForwardName` or `elseForwardName` are used"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Router"
        }
      ]
    },
    {
      "name": "IteratingPipe",
      "fullName": "org.frankframework.pipes.IteratingPipe",
      "abstract": true,
      "description": "Base class to send a message to a Sender for each item returned by a configurable iterator.\n <br/>\n The output of each of the processing of each of the elements is returned in XML as follows:\n <pre>\n  &lt;results count=\\\"num_of_elements\\\"&gt;\n    &lt;result&gt;result of processing of first item&lt;/result&gt;\n    &lt;result&gt;result of processing of second item&lt;/result&gt;\n       ...\n  &lt;/results&gt;\n </pre>\n\n For more configuration options, see {@link MessageSendingPipe}.\n <br/>\n use parameters like:\n <pre>\n\t&lt;param name=\\\"element-name-of-current-item\\\"  xpathExpression=\\\"name(/*)\\\" /&gt;\n\t&lt;param name=\\\"value-of-current-item\\\"         xpathExpression=\\\"/*\\\" /&gt;\n </pre>",
      "parent": "org.frankframework.pipes.MessageSendingPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "styleSheetName",
          "description": "Stylesheet to apply to each message, before sending it"
        },
        {
          "name": "xpathExpression",
          "description": "Alternatively: xpath-expression to create stylesheet from"
        },
        {
          "name": "namespaceDefs",
          "description": "Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace."
        },
        {
          "name": "outputType",
          "description": "Only valid for xpathexpression",
          "default": "text",
          "enum": "org.frankframework.util.TransformerPool.OutputType"
        },
        {
          "name": "omitXmlDeclaration",
          "description": "Force the transformer generated from the xpath-expression to omit the xml declaration",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "itemNoSessionKey",
          "description": "Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed. When handling the first item, the value will be 1."
        },
        {
          "name": "maxItems",
          "description": "The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned. Special forward <code>maxItemsReached</code> can be configured to follow",
          "default": "0",
          "type": "int"
        },
        {
          "name": "stopConditionXPathExpression",
          "description": "Expression evaluated on each result and forwards to [<code>stopConditionMet</code>] forward if configured.\n Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression <code>*[@finished='yes']</code> can be used.\n This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use <code>maxItems</code>.\n Previous versions documented that <code>position()=2</code> could be used. This is not working as expected; Use maxItems instead"
        },
        {
          "name": "ignoreExceptions",
          "description": "When <code>true</code> ignore any exception thrown by executing sender",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "collectResults",
          "description": "Controls whether all the results of each iteration will be collected in one result message. If set <code>false</code>, only a small summary is returned.\n Setting this attributes to <code>false</code> is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "removeXmlDeclarationInResults",
          "description": "Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "addInputToResult",
          "description": "When <code>true</code> the input is added to the result in an input element",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "removeDuplicates",
          "description": "When <code>true</code> duplicate input elements are removed, i.e. they are handled only once",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "parallel",
          "description": "When set <code>true</code>, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set <code>true</code>, this pipe will wait for all calls to finish before results are collected and pipe result is returned",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "maxChildThreads",
          "description": "Maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe). Use <code>0</code> for unlimited threads",
          "default": "0",
          "type": "int"
        },
        {
          "name": "blockSize",
          "description": "Controls multiline behaviour. When set to a value greater than 0, it specifies the number of rows send, in a one block, to the sender.",
          "default": "0",
          "type": "int"
        }
      ],
      "children": [
        {
          "mandatory": true,
          "multiple": false,
          "roleName": "sender",
          "description": "The sender that should send the message",
          "type": "org.frankframework.core.ISender"
        }
      ],
      "forwards": [
        {
          "name": "maxItemsReached",
          "description": "the iteration stopped when the configured maximum number of items was processed"
        },
        {
          "name": "stopConditionMet",
          "description": "the iteration stopped when the configured condition expression became true"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Iterator"
        }
      ]
    },
    {
      "name": "JMSFacade",
      "fullName": "org.frankframework.jms.JMSFacade",
      "description": "Provides functions for jms connections, queues and topics and acts as a facade\n to hide for clients whether a <code>Queue</code> or <code>Topic</code> is used.\n <br/>\n The <code>destinationType</code> field specifies which\n type should be used.<br/>\n This class sends messages with JMS.",
      "parent": "org.frankframework.jndi.JndiBase",
      "elementNames": [],
      "attributes": [
        {
          "name": "messageClass",
          "description": "The JMS {@link jakarta.jms.Message} class for the outgoing message.\n Currently supported are {@link MessageClass#TEXT} for JMS {@link TextMessage},\n {@link MessageClass#BYTES} for JMS {@link BytesMessage}, or {@link MessageClass#AUTO} for auto-determination\n based on whether the input {@link Message} is binary or character.\n <p>\n Defaults to {@link MessageClass#AUTO}, unless the default is overridden in {@link AppConstants} with property <code>jms.messageClass.default</code>\n </p>",
          "enum": "org.frankframework.jms.JMSFacade.MessageClass"
        },
        {
          "name": "destinationName",
          "description": "Name of the JMS destination (queue or topic) to use"
        },
        {
          "name": "destinationType",
          "description": "Type of the messageing destination.\n This function also sets the <code>useTopicFunctions</code> field,\n that controls whether Topic functions are used or Queue functions.",
          "default": "QUEUE",
          "enum": "org.frankframework.jms.JMSFacade.DestinationType"
        },
        {
          "name": "acknowledgeMode",
          "description": "If not transacted, the way the application informs the JMS provider that it has successfully received a message.",
          "default": "auto",
          "enum": "org.frankframework.jms.JMSFacade.AcknowledgeMode"
        },
        {
          "name": "persistent",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0"
          },
          "description": "Controls whether messages are processed persistently.\n\n When set <code>true</code>, the JMS provider ensures that messages aren't lost when the application might crash.",
          "type": "bool"
        },
        {
          "name": "subscriberType",
          "description": "Only applicable for topics",
          "default": "DURABLE",
          "enum": "org.frankframework.jms.JMSFacade.SubscriberType"
        },
        {
          "name": "queueConnectionFactoryName",
          "description": "Used when {@link #setDestinationType destinationType} = {@link DestinationType#QUEUE QUEUE}.\n The JNDI-name of the queueConnectionFactory to use to connect to a <code>queue</code> if {@link #isTransacted()} returns <code>false</code>.\n The corresponding connection factory should be configured not to support XA transactions."
        },
        {
          "name": "topicConnectionFactoryName",
          "description": "Used when {@link #setDestinationType destinationType} = {@link DestinationType#TOPIC TOPIC}.\n The JNDI-name of the connection factory to use to connect to a <i>topic</i> if {@link #isTransacted()} returns <code>false</code>.\n The corresponding connection factory should be configured not to support XA transactions."
        },
        {
          "name": "jmsTransacted",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0"
          },
          "description": "Controls the use of JMS transacted session.\n In versions prior to 4.1, this attribute was called plainly 'transacted'. The {@link #setTransacted(boolean) transacted}\n attribute, however, is now in uses to indicate the use of XA-transactions. XA transactions can be used\n in a pipeline to simultaneously (in one transaction) commit or rollback messages send to a number of queues, or\n even together with database actions.",
          "type": "bool"
        },
        {
          "name": "transacted",
          "description": "Controls whether messages are send under transaction control.\n If set <code>true</code>, messages are committed or rolled back under control of an XA-transaction.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "correlationIdToHex",
          "description": "Transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part).\n Useful when sending messages to MQ which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: MQJMS1044: String is not a valid hexadecimal number",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "correlationIdToHexPrefix",
          "description": "Prefix to check before executing correlationIdToHex. If empty (and correlationIdToHex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationId to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationId).",
          "default": "id:"
        },
        {
          "name": "messageTimeToLive",
          "description": "The time <i>in milliseconds</i> it takes for the message to expire. If the message is not consumed before, it will be lost. Must be a positive value for request/reply type of messages, 0 disables the expiry timeout",
          "default": "0",
          "type": "int"
        },
        {
          "name": "correlationIdMaxLength",
          "description": "If set (>=0) and the length of the correlationId exceeds this maximum length, the correlationId is trimmed from the left side of a string to this maximum length",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "messageSelector",
          "description": "If set, the value of this attribute is used as a selector to filter messages.",
          "default": "0 (unlimited)"
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain credentials for authentication to JMS server"
        },
        {
          "name": "lookupDestination",
          "description": "If set <code>false</code>, the destinationName is used directly instead of performing a JNDI lookup",
          "default": "true",
          "type": "bool"
        }
      ]
    },
    {
      "name": "JavaListener",
      "fullName": "org.frankframework.receivers.JavaListener",
      "description": "Use this listener to receive messages from other adapters or a scheduler within the same Frank-application or from other components residing in the same JVM.\n JavaListeners can receive calls made via de ibis-servicedispatcher, which should be located on the JVM classpath to receive calls from other components in the JVM. If you want to call an adapter in the same Frank-application, consider using the IbisLocalSender.\n <br/>\n To understand what this listener does exactly, please remember that the Frank!Framework is a Java application.\n The JavaListener listens to Java method calls. You can issue Java method calls using a {@link IbisJavaSender} (external call)\n or {@link IbisLocalSender} (internal call).\n For more information see the ibis-servicedispatcher project.",
      "elementNames": ["JavaListener"],
      "attributes": [
        {
          "name": "name",
          "mandatory": true,
          "description": "Internal name of the listener, as known to the adapter. An IbisLocalSender refers to this name in its <code>javaListener</code>-attribute."
        },
        {
          "name": "serviceName",
          "description": "External Name of the listener. An IbisJavaSender refers to this name in its <code>serviceName</code>-attribute."
        },
        {
          "name": "local",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0"
          }
        },
        {
          "name": "isolated",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0"
          },
          "type": "bool"
        },
        {
          "name": "synchronous",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0"
          },
          "description": "If set <code>false</code>, the request is executed asynchronously. N.B. be aware that there is no limit on the number of threads generated",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "returnedSessionKeys",
          "description": "Comma separated list of keys of session variables that should be returned to caller, for correct results as well as for erroneous results.\n If not set (not even to an empty value), all session keys can be returned.",
          "default": "all session keys can be returned"
        },
        {
          "name": "throwException",
          "description": "Should the JavaListener throw a ListenerException when it occurs or return an error message",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "httpWsdl",
          "description": "If <code>true</code>, the WSDL of the service provided by this listener will available for download",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "JavascriptSender",
      "fullName": "org.frankframework.senders.JavascriptSender",
      "description": "Sender used to run JavaScript code using `JavascriptEngine` implementations.\n <p>\n This sender can execute a function of a given Javascript file, the result of the function will be the output of the sender.\n The parameters of the Javascript function to run are given as parameters by the adapter configuration\n The sender doesn't accept nor uses the given input, instead for each argument for the {@link #jsFunctionName} method,\n you will need to create a parameter on the sender.\n </p>\n <p>\n The result of the Javascript function should be of type String, or directly convertible to String from a primitive type\n or an array of primitive types / strings, as the output of the sender will be of type String.\n </p>\n <p>\n Failure to ensure the output is a string may mean the result will look like <code>[Object object]</code>.\n </p>",
      "parent": "org.frankframework.senders.SenderSeries",
      "elementNames": ["JavascriptSender"],
      "attributes": [
        {
          "name": "jsFileName",
          "mandatory": true,
          "description": "the name of the javascript file containing the functions to run"
        },
        {
          "name": "jsFunctionName",
          "description": "the name of the javascript function that will be called (first)",
          "default": "main"
        },
        {
          "name": "engineName",
          "description": "the name of the JavaScript engine to use.",
          "default": "J2V8",
          "enum": "org.frankframework.senders.JavascriptSender.JavaScriptEngines"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "sender",
          "description": "one or more specifications of senders that will be executed one after another. Each sender will get the result of the preceding one as input.",
          "type": "org.frankframework.core.ISender"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ]
    },
    {
      "name": "JdbcFacade",
      "fullName": "org.frankframework.jdbc.JdbcFacade",
      "description": "Provides functions for JDBC connections.\n\n N.B. Note on using XA transactions:\n If transactions are used, make sure that the database user can access the table SYS.DBA_PENDING_TRANSACTIONS.\n If not, transactions present when the server goes down cannot be properly recovered, resulting in exceptions like:\n <pre>\n   The error code was XAER_RMERR. The exception stack trace follows: javax.transaction.xa.XAException\n\tat oracle.jdbc.xa.OracleXAResource.recover(OracleXAResource.java:508)\n   </pre>",
      "parent": "org.frankframework.jndi.JndiBase",
      "elementNames": [],
      "attributes": [
        {
          "name": "datasourceName",
          "description": "JNDI name of datasource to be used, can be configured via jmsRealm, too",
          "default": "<code>jdbc.datasource.default</code>"
        },
        {
          "name": "authAlias",
          "description": "Authentication alias used to authenticate when connecting to database"
        },
        {
          "name": "username",
          "description": "User name for authentication when connecting to database, when none found from <code>authAlias</code>"
        },
        {
          "name": "password",
          "description": "Password for authentication when connecting to database, when none found from <code>authAlias</code>"
        },
        {
          "name": "transacted",
          "description": "controls the use of transactions",
          "type": "bool"
        },
        {
          "name": "connectionsArePooled",
          "description": "informs the sender that the obtained connection is from a pool (and thus connections are reused and never closed)",
          "default": "true",
          "type": "bool"
        }
      ]
    },
    {
      "name": "JdbcIteratingPipeBase",
      "fullName": "org.frankframework.jdbc.JdbcIteratingPipeBase",
      "abstract": true,
      "description": "Base class for JDBC iterating pipes.",
      "parent": "org.frankframework.pipes.StringIteratorPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "jmsRealm",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "We discourage the use of jmsRealms for datasources. To specify a datasource other then the default, use the datasourceName attribute directly, instead of referring to a realm"
          }
        },
        {
          "name": "query",
          "description": "The SQL query text to be excecuted each time sendMessage() is called. When not set, the input message is taken as the query"
        },
        {
          "name": "datasourceName",
          "description": "JNDI name of datasource to be used, can be configured via jmsRealm, too",
          "default": "<code>jdbc.datasource.default</code>"
        },
        {
          "name": "useNamedParams",
          "description": "Named parameters will be auto-detected by default. Every string in the query which equals <code><code>?{</code>paramname<code>}</code></code> will be replaced by the value of the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped.",
          "type": "bool"
        },
        {
          "name": "trimSpaces",
          "description": "Remove trailing blanks from all result values.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "sqlDialect",
          "description": "If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect"
        },
        {
          "name": "lockRows",
          "description": "When set <code>true</code>, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "lockWait",
          "description": "when set and >=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED'",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "avoidLocking",
          "description": "If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "blobCharset",
          "deprecated": {
            "forRemoval": true,
            "since": "7.9.0"
          },
          "description": "Charset that is used to read and write BLOBs. This assumes the blob contains character data.\n If blobCharset and blobSmartGet are not set, BLOBs are returned as bytes. Before version 7.6, blobs were base64 encoded after being read to accommodate for the fact that senders need to return a String. This is no longer the case"
        },
        {
          "name": "blobSmartGet",
          "description": "Controls automatically whether blobdata is stored compressed and/or serialized in the database",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "blobsCompressed",
          "description": "controls whether blobdata is stored compressed in the database",
          "default": "true",
          "type": "bool"
        }
      ]
    },
    {
      "name": "JdbcListener",
      "fullName": "org.frankframework.jdbc.JdbcListener",
      "description": "JdbcListener base class.",
      "parent": "org.frankframework.jdbc.JdbcFacade",
      "elementNames": ["JdbcListener"],
      "attributes": [
        {
          "name": "peekUntransacted",
          "description": "when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true. This avoids rolling back a lot of XA transactions, that appears to be problematic on MS SQL Server",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "peekQuery",
          "description": "(only used when <code>peekUntransacted</code>=<code>true</code>) peek query to determine if the select query should be executed. Peek queries are, unlike select queries, executed without a transaction and without a rowlock",
          "default": "selectQuery"
        },
        {
          "name": "keyField",
          "description": "Primary key field of the table, used to identify and differentiate messages.\n <b>NB: there should be an index on this field!</b>"
        },
        {
          "name": "messageField",
          "description": "Field containing the message data",
          "default": "<i>same as keyField</i>"
        },
        {
          "name": "messageFieldType",
          "description": "Type of the field containing the message data",
          "default": "<i>String</i>",
          "enum": "org.frankframework.jdbc.JdbcListener.MessageFieldType"
        },
        {
          "name": "messageIdField",
          "description": "Field containing the <code>messageId</code>.\n <b>NB: If this column is not set the default (primary key) {@link #setKeyField(String) keyField} will be used as messageId!</b>",
          "default": "<i>same as keyField</i>"
        },
        {
          "name": "correlationIdField",
          "description": "Field containing the <code>correlationId</code>.\n <b>NB: If this column is not set, the <code>messageId</code> and <code>correlationId</code> will be the same!</b>",
          "default": "<i>same as messageIdField</i>"
        },
        {
          "name": "sqlDialect",
          "description": "If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect"
        },
        {
          "name": "blobsCompressed",
          "description": "Controls whether BLOB is considered stored compressed in the database",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "blobCharset",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0"
          },
          "description": "Charset used to read BLOB. When specified, then the BLOB will be converted into a string"
        },
        {
          "name": "blobSmartGet",
          "description": "Controls automatically whether blobdata is stored compressed and/or serialized in the database. N.B. When set true, then the BLOB will be converted into a string",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "trace",
          "type": "bool"
        }
      ]
    },
    {
      "name": "JdbcQueryListener",
      "fullName": "org.frankframework.jdbc.JdbcQueryListener",
      "deprecated": {
        "forRemoval": true,
        "since": "7.6.0",
        "description": "Please replace with JdbcTableListener for ease of configuration and improved manageability"
      },
      "description": "/**\n Database Listener that operates on a table having at least a key and a status field.",
      "parent": "org.frankframework.jdbc.JdbcListener",
      "elementNames": ["JdbcQueryListener"],
      "attributes": [
        {
          "name": "selectQuery",
          "mandatory": true,
          "description": "Query that returns a row to be processed. Must contain a key field and optionally a message field."
        },
        {
          "name": "updateStatusToProcessedQuery",
          "mandatory": true,
          "description": "SQL statement to set the status of a row to 'processed'. Must contain one parameter, that is set to the value of the key"
        },
        {
          "name": "updateStatusToErrorQuery",
          "description": "SQL statement to set the status of a row to 'error'. Must contain one parameter, that is set to the value of the key",
          "default": "same as <code>updateStatusToProcessedQuery</code>"
        },
        {
          "name": "updateStatusToInProcessQuery",
          "description": "SQL statement to set the status of a row to 'in process'. Must contain one parameter, that is set to the value of the key.\n Can be left emtpy if database has SKIP LOCKED functionality and the Receiver can be (and is) set to Required or RequiresNew."
        },
        {
          "name": "revertInProcessStatusQuery",
          "description": "SQL statement to set the status of a row to 'available'. Must contain one parameter, that is set to the value of the key.\n Only used in rollbacks, when updateStatusToInProcessQuery is specified"
        }
      ]
    },
    {
      "name": "JdbcTableListener",
      "fullName": "org.frankframework.jdbc.JdbcTableListener",
      "description": "Database Listener that operates on a table having at least a key and a status field.",
      "parent": "org.frankframework.jdbc.JdbcListener",
      "elementNames": ["JdbcTableListener"],
      "attributes": [
        {
          "name": "tableName",
          "mandatory": true,
          "description": "Name of the table to be used"
        },
        {
          "name": "tableAlias",
          "description": "Alias of the table, that can be used in selectCondition",
          "default": "t"
        },
        {
          "name": "statusField",
          "mandatory": true,
          "description": "Field containing the status of the message. \n <b>NB: For optimal performance, an index should exist that starts with this field, followed by all fields that are used with a fixed value in the select condition, and end with the <code>orderField</code>."
        },
        {
          "name": "orderField",
          "description": "(optional) Comma separated list of fields determining the order in which messages are processed"
        },
        {
          "name": "timestampField",
          "description": "(optional) Field used to store the date and time of the last change of the <code>statusField</code>"
        },
        {
          "name": "commentField",
          "description": "(optional) Field used to store the reason of the last change of the <code>statusField</code>"
        },
        {
          "name": "maxCommentLength",
          "description": "(optional) Maximum length of strings to be stored in commentField, or -1 for unlimited",
          "default": "1000",
          "type": "int"
        },
        {
          "name": "statusValueAvailable",
          "description": "(optional) Value of <code>statusField</code> indicating row is available to be processed. If not specified, any row not having any of the other status values is considered available."
        },
        {
          "name": "statusValueError",
          "mandatory": true,
          "description": "Value of <code>statusField</code> indicating the processing of the row resulted in an error"
        },
        {
          "name": "statusValueProcessed",
          "mandatory": true,
          "description": "Value of status field indicating row is processed OK"
        },
        {
          "name": "statusValueInProcess",
          "description": "Value of <code>statusField</code> indicating is being processed. Can be left emtpy if database has <code>SKIP LOCKED</code> functionality and the <code>transactionAttribute</code> of the <code>Receiver</code> can be (and is) set to <code>Required</code> or <code>RequiresNew</code>."
        },
        {
          "name": "statusValueHold",
          "description": "Value of <code>statusField</code> indicating message is on Hold, temporarily"
        },
        {
          "name": "selectCondition",
          "description": "Additional condition for a row to belong to this TableListener. Impacts all process states"
        }
      ]
    },
    {
      "name": "JdbcTableMessageBrowser",
      "fullName": "org.frankframework.jdbc.JdbcTableMessageBrowser",
      "parent": "org.frankframework.jdbc.AbstractJdbcMessageBrowser",
      "elementNames": [],
      "attributes": [
        {
          "name": "tableName",
          "description": "Name of the table messages are stored in.",
          "default": "IBISSTORE"
        },
        {
          "name": "indexName",
          "description": "Name of the index, to be used in hints for query optimizer too (only for Oracle).",
          "default": "IX_IBISSTORE"
        }
      ]
    },
    {
      "name": "JdbcTransactionalStorage",
      "fullName": "org.frankframework.jdbc.JdbcTransactionalStorage",
      "description": "Implements a message log (<code>JdbcMessageLog</code>) or error store (<code>JdbcErrorStorage</code>) that uses database\n table IBISSTORE. A <code>MessageStoreSender</code> and <code>MessageStoreListener</code>\n pair implicitly includes a message log and an error store.\n If you have a <code>MessageStoreSender</code> and <code>MessageStoreListener</code>\n pair it is superfluous to add a <code>JdbcMessageLog</code> or <code>JdbcErrorStorage</code>\n within the same sender pipe or the same receiver.\n <br/><br/>\n <b>Message log:</b> A message log writes messages in persistent storage for logging purposes.\n When a message log appears in a receiver, it also ensures that the same message is only processed\n once, even if a related pushing listener receives the same message multiple times.\n <br/><br/>\n <b>Error store:</b> Appears in a receiver or sender pipe to store messages that could not be processed.\n Storing a message in the error store is the last resort of the Frank!Framework. Many types of listeners and senders\n offer a retry mechanism. Only if several tries have failed, then an optional transaction is not rolled\n back and the message is stored in the error store. Users can retry messages in an error store using the Frank!Console. When\n this is done, the message is processed in the same way as messages received from the original source.\n <br/><br/>\n How does a message log or error store see duplicate messages? The message log or error store\n always appears in combination with a sender or listener. This sender or listener determines\n a key based on the sent or received message. Messages with the same key are considered to\n be the same.\n <br/><br/>\n Storage structure is defined in /IAF_util/IAF_DatabaseChangelog.xml. If these database objects do not exist,\n the Frank!Framework will try to create them.\n <br/><br/>\n N.B. Note on using XA transactions:\n If transactions are used on Oracle, make sure that the database user can access the table SYS.DBA_PENDING_TRANSACTIONS.\n If not, transactions present when the server goes down cannot be properly recovered, resulting in exceptions like:\n <pre>\n   The error code was XAER_RMERR. The exception stack trace follows: javax.transaction.xa.XAException\n\tat oracle.jdbc.xa.OracleXAResource.recover(OracleXAResource.java:508)\n   </pre>",
      "parent": "org.frankframework.jdbc.JdbcTableMessageBrowser",
      "elementNames": ["JdbcErrorStorage", "JdbcMessageLog"],
      "attributes": [
        {
          "name": "slotId",
          "description": "Set the slotId, an identifier to keep separate the messages inserted\n by different JdbcTransactionalStorage instances.\n <br/>\n This field is optional, unless the attribute {@link #onlyStoreWhenMessageIdUnique} is\n set to <code>true</code>."
        },
        {
          "name": "type",
          "description": "Possible values are <code>E</code> (error store), <code>M</code> (message store), <code>L</code> (message log for Pipe) or <code>A</code> (message log for Receiver).<br/>\n Receiver will always set type to <code>E</code> for errorStorage and always set type to <code>A</code> for messageLog. SenderPipe will set type to <code>L</code> for messageLog (when type isn't specified).<br/>\n See {@link MessageStoreSender} for type <code>M</code>.",
          "default": "<code>E</code> for errorStorage on Receiver<br/><code>A</code> for messageLog on Receiver<br/><code>L</code> for messageLog on Pipe"
        },
        {
          "name": "slotIdField",
          "description": "The name of the column slotids are stored in",
          "default": "SLOTID"
        },
        {
          "name": "typeField",
          "description": "The name of the column types are stored in",
          "default": "TYPE"
        },
        {
          "name": "hostField",
          "description": "The name of the column that stores the hostname of the server",
          "default": "HOST"
        },
        {
          "name": "sequenceName",
          "description": "The name of the sequence used to generate the primary key, for DBMSes that use sequences, like Oracle",
          "default": "seq_ibisstore"
        },
        {
          "name": "checkIfTableExists",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "Replaced with checkTable"
          },
          "type": "bool"
        },
        {
          "name": "checkTable",
          "description": "If set to <code>true</code>, checks are performed if the table exists and is properly created",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "createTable",
          "deprecated": {
            "forRemoval": true,
            "since": "7.9.0",
            "description": "if you want to create and maintain database tables, please enable Liquibase"
          },
          "description": "If set to <code>true</code>, the table is created if it does not exist",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "messageFieldType",
          "description": "The type of the column message themselves are stored in"
        },
        {
          "name": "keyFieldType",
          "description": "The type of the column that contains the primary key of the table"
        },
        {
          "name": "dateFieldType",
          "description": "The type of the column the timestamps are stored in"
        },
        {
          "name": "textFieldType",
          "description": "The type of the columns messageId and correlationId, slotId and comments are stored in. N.B. <code>(100)</code> is appended for id's, <code>(1000)</code> is appended for comments."
        },
        {
          "name": "blobsCompressed",
          "description": "If set to <code>true</code>, the messages are stored compressed",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "retention",
          "description": "The time (in days) to keep the record in the database before making it eligible for deletion by a cleanup process. when set to -1, the record will live on forever",
          "default": "30",
          "type": "int"
        },
        {
          "name": "schemaOwner4Check",
          "description": "Schema owner to be used to check the database",
          "default": "&lt;current_schema&gt; (only for oracle)"
        },
        {
          "name": "storeFullMessage",
          "description": "If set to <code>true</code>, the full message is stored with the log. Can be set to <code>false</code> to reduce table size, by avoiding to store the full message",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "onlyStoreWhenMessageIdUnique",
          "description": "If set to <code>true</code>, the message is stored only if the MessageId is not present in the store yet.",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "JmsListener",
      "fullName": "org.frankframework.jms.JmsListener",
      "description": "A true multi-threaded {@link IPullingListener Listener}-class.\n <br/>\n\n Since version 4.1, Ibis supports distributed transactions using the XA-protocol. This feature is controlled by the\n {@link #setTransacted(boolean) transacted} attribute. If this is set to <code>true</code>, received messages are\n committed or rolled back, possibly together with other actions, by the receiver or the pipeline.\n In case of a failure, all actions within the transaction are rolled back.\n\n <p><b>Using jmsTransacted and acknowledgement</b><br/>\n If jmsTransacted is set <code>true</code>: it should ensure that a message is received and processed on a both or nothing basis.\n IBIS will commit the the message, otherwise perform rollback. However using jmsTransacted, IBIS does not bring transactions within\n the adapters under transaction control, compromising the idea of atomic transactions. In the roll-back situation messages sent to\n other destinations within the Pipeline are NOT rolled back if jmsTransacted is set <code>true</code>! In the failure situation the\n message is therefore completely processed, and the roll back does not mean that the processing is rolled back! To obtain the correct\n (transactional) behaviour, {@link #setTransacted(boolean) transacted} should be used instead of {@link #setJmsTransacted(boolean) listener.transacted}.\n </p><p>\n Setting {@link #setAcknowledgeMode(AcknowledgeMode) listener.acknowledgeMode} to \\\"auto\\\" means that messages are allways acknowledged (removed from\n the queue, regardless of what the status of the Adapter is. \\\"client\\\" means that the message will only be removed from the queue\n when the state of the Adapter equals the success state for committing.\n The \\\"dups\\\" mode instructs the session to lazily acknowledge the delivery of the messages. This is likely to result in the\n delivery of duplicate messages if JMS fails. It should be used by consumers who are tolerant in processing duplicate messages.\n In cases where the client is tolerant of duplicate messages, some enhancement in performance can be achieved using this mode,\n since a session has lower overhead in trying to prevent duplicate messages.\n </p>\n <p>The setting for {@link #setAcknowledgeMode(AcknowledgeMode) listener.acknowledgeMode} will only be processed if\n the setting for {@link #setTransacted(boolean) listener.transacted} as well as for\n {@link #setJmsTransacted(boolean) listener.jmsTransacted} is false.</p>\n\n <p>If {@link #setUseReplyTo(boolean) useReplyTo} is set and a replyTo-destination is\n specified in the message, the JmsListener sends the result of the processing\n in the pipeline to this destination. Otherwise the result is sent using the (optionally)\n specified, that in turn sends the message to\n whatever it is configured to.</p>\n\n <p>You can add parameters to the JmsListener, the values will be added as Headers to the JMS response message.</p>\n\n <p><b>Notice:</b> the JmsListener is ONLY capable of processing\n {@link jakarta.jms.TextMessage}s and {@link jakarta.jms.BytesMessage}<br/><br/>\n </p>",
      "parent": "org.frankframework.jms.PushingJmsListener",
      "elementNames": ["JmsListener"]
    },
    {
      "name": "JmsRealm",
      "fullName": "org.frankframework.jms.JmsRealm",
      "description": "A JmsRealm is a definition of a JMS provider, and is kind of a utility\n class to prevent the tedeous work of repeatedly defining all parameters\n to connect to a queue or topic.\n <br/>\n This class is not an extension of JNDIBase, which would be logical, because\n in the JMSBase class the function PropertyUtils.copyProperties is used, which cannot\n handle this.",
      "elementNames": ["JmsRealm"],
      "attributes": [
        {
          "name": "aliasForRealm",
          "description": "Includes another realm into this one"
        },
        {
          "name": "realmName",
          "description": "Set the name of this realm<br/>"
        },
        {
          "name": "queueConnectionFactoryName",
          "description": "Set the name of the QueueConnectionFactory<br/>"
        },
        {
          "name": "topicConnectionFactoryName",
          "description": "Set the name of the TopicConnectionFactory<br/>"
        },
        {
          "name": "datasourceName"
        },
        {
          "name": "securityProtocol"
        },
        {
          "name": "urlPkgPrefixes"
        },
        {
          "name": "authentication"
        },
        {
          "name": "credentials"
        },
        {
          "name": "initialContextFactoryName"
        },
        {
          "name": "providerURL"
        },
        {
          "name": "userTransactionUrl"
        },
        {
          "name": "principal"
        },
        {
          "name": "jndiAuthAlias"
        },
        {
          "name": "authAlias"
        },
        {
          "name": "jndiContextPrefix"
        },
        {
          "name": "jndiProperties"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "JmsRealms",
      "fullName": "org.frankframework.jms.JmsRealmFactory",
      "description": "Singleton that has the different jmsRealms.<br/>\n Typical use: JmsRealmFactory.getInstance().&lt;method to execute&gt;\n <br/>",
      "elementNames": ["JmsRealms"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "jmsRealm",
          "description": "Register a Realm",
          "type": "org.frankframework.jms.JmsRealm"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "JmsSender",
      "fullName": "org.frankframework.jms.JmsSender",
      "description": "This class sends messages with JMS.",
      "parent": "org.frankframework.jms.JMSFacade",
      "elementNames": ["JmsSender"],
      "attributes": [
        {
          "name": "destinationParam",
          "description": "Parameter that is used, if specified and not empty, to determine the destination. Overrides the <code>destination</code> attribute"
        },
        {
          "name": "synchronous",
          "description": "If <code>true</code>, the sender operates in RR mode: A reply is expected, either on the queue specified in <code>replyToName</code>, or on a dynamically generated temporary queue",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "replyToName",
          "description": "Name of the queue the reply is expected on. This value is sent in the JMSReplyTo-header with the message.",
          "default": "a dynamically generated temporary destination"
        },
        {
          "name": "linkMethod",
          "description": "(Only used when <code>synchronous=true</code> and <code>replyToName</code> is set). Indicates whether the server uses the correlationId from the pipeline,\n the correlationId from the message or the messageId in the correlationId field of the reply. This requires the sender to have set the correlationId at the time of sending.",
          "default": "MESSAGEID",
          "enum": "org.frankframework.jms.JmsSender.LinkMethod"
        },
        {
          "name": "replyTimeout",
          "description": "(Only for <code>synchronous=true</code>). Maximum time in ms to wait for a reply. 0 means no timeout.",
          "default": "5000",
          "type": "int"
        },
        {
          "name": "messageType",
          "description": "Value of the JMSType field",
          "default": "not set by application"
        },
        {
          "name": "deliveryMode",
          "description": "Controls mode that messages are sent with",
          "default": "not set by application",
          "enum": "org.frankframework.jms.JMSFacade.DeliveryMode"
        },
        {
          "name": "priority",
          "description": "Sets the priority that is used to deliver the message. Ranges from 0 to 9. Defaults to -1, meaning not set. Effectively the default priority is set by JMS to 4",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "soap",
          "description": "If <code>true</code>, messages sent are put in a SOAP envelope",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "encodingStyleURI",
          "description": "SOAP encoding style URI"
        },
        {
          "name": "serviceNamespaceURI",
          "description": "SOAP service namespace URI"
        },
        {
          "name": "soapAction",
          "description": "SOAPAction string sent as message property"
        },
        {
          "name": "soapHeaderParam",
          "description": "Name of parameter containing SOAP header",
          "default": "soapHeader"
        },
        {
          "name": "replySoapHeaderSessionKey",
          "description": "session key to store SOAP header of reply",
          "default": "replySoapHeader"
        },
        {
          "name": "responseHeadersToSessionKeys",
          "description": "A list of JMS headers of the response to add to the PipeLineSession"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ],
      "parametersDescription": "All parameters present are set as message-properties.",
      "parameters": [
        {
          "name": "SoapAction",
          "description": "Automatically filled from attribute <code>soapAction</code>"
        }
      ]
    },
    {
      "name": "JmsTransactionalStorage",
      "fullName": "org.frankframework.jms.JmsTransactionalStorage",
      "description": "Implements a message log (<code>JmsMessageLog</code>) or error store (<code>JmsErrorStorage</code>) that uses JMS technology.\n <br/><br/>\n <b>Message log:</b> A message log writes messages in persistent storage for logging purposes.\n When a message log appears in a receiver, it also ensures that the same message is only processed\n once, even if a related pushing listener receives the same message multiple times.\n <br/><br/>\n <b>Error store:</b> Appears in a receiver or sender pipe to store messages that could not be processed.\n Storing a message in the error store is the last resort of the Frank!Framework. Many types of listeners and senders\n offer a retry mechanism. Only if several tries have failed, then an optional transaction is not rolled\n back and the message is stored in the error store. Users can retry messages in an error store using the Frank!Console. When\n this is done, the message is processed in the same way as messages received from the original source.\n <br/><br/>\n How does a message log or error store see duplicate messages? The message log or error store\n always appears in combination with a sender or listener. This sender or listener determines\n a key based on the sent or received message. Messages with the same key are considered to\n be the same.",
      "parent": "org.frankframework.jms.AbstractJmsMessageBrowser",
      "elementNames": ["JmsErrorStorage", "JmsMessageLog"],
      "attributes": [
        {
          "name": "slotId",
          "description": "Optional identifier for this storage, to be able to share the physical storage between a number of receivers and pipes."
        },
        {
          "name": "type",
          "description": "Possible values are <code>E</code> (error store), <code>M</code> (message store), <code>L</code> (message log for Pipe) or <code>A</code> (message log for Receiver).<br/>\n Receiver will always set type to <code>E</code> for errorStorage and always set type to <code>A</code> for messageLog. SenderPipe will set type to <code>L</code> for messageLog (when type isn't specified).<br/>\n See {@link MessageStoreSender} for type <code>M</code>.",
          "default": "<code>E</code> for errorStorage on Receiver<br/><code>A</code> for messageLog on Receiver<br/><code>L</code> for messageLog on Pipe"
        }
      ]
    },
    {
      "name": "JndiBase",
      "fullName": "org.frankframework.jndi.JndiBase",
      "description": "Provides all JNDI functions and is meant to act as a base class.\n\n <br/>",
      "elementNames": [],
      "attributes": [
        {
          "name": "authentication",
          "description": "maps to the field context.security_authentication"
        },
        {
          "name": "credentials",
          "description": "username to connect to context, maps to context.security_credentials"
        },
        {
          "name": "initialContextFactoryName",
          "description": "class to use as initial context factory"
        },
        {
          "name": "providerURL",
          "description": "Sets the value of providerURL"
        },
        {
          "name": "securityProtocol",
          "description": "maps to the field context.security_protocol"
        },
        {
          "name": "urlPkgPrefixes",
          "description": "maps to the field context.url_pkg_prefixes"
        },
        {
          "name": "jmsRealm",
          "description": "loads JNDI (and other) properties from a JmsRealm"
        },
        {
          "name": "principal",
          "description": "username to connect to context, maps to context.security_principal"
        },
        {
          "name": "jndiAuthAlias",
          "description": "authentication alias, may be used to override principal and credential-settings"
        },
        {
          "name": "jndiContextPrefix"
        },
        {
          "name": "jndiProperties"
        },
        {
          "name": "name",
          "description": "Name of the sender or the listener"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "Job",
      "fullName": "org.frankframework.scheduler.job.Job",
      "deprecated": {
        "forRemoval": false,
        "since": "7.7.0"
      },
      "description": "Placeholder class to allow legacy configuration notations <code>&lt;job function='SendMessage' /&gt;</code> in the new Frank!Config XSD.\n <p>\n The attribute `function` has been removed in favor of explicit JobDefinitions such as: `SendMessageJob`,\n `ExecuteQueryJob` and `ActionJob`.\n Using the new elements enables the use of auto-completion for the specified type.",
      "parent": "org.frankframework.scheduler.AbstractJobDef",
      "elementNames": ["Job"],
      "attributes": [
        {
          "name": "function",
          "mandatory": true,
          "enum": "org.frankframework.scheduler.JobDefFunctions"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "The job function `IbisActionJob` has been renamed to `ActionJob`."
        },
        {
          "type": "DANGER",
          "value": "This element in combination with the attribute `function` has been removed."
        }
      ]
    },
    {
      "name": "Json2XmlValidator",
      "fullName": "org.frankframework.pipes.Json2XmlValidator",
      "description": "<code>Pipe</code> that validates the XML or JSON input message against a XML Schema and returns either XML or JSON.",
      "parent": "org.frankframework.pipes.XmlValidator",
      "elementNames": [
        "Json2XmlInputValidator",
        "Json2XmlOutputValidator",
        "Json2XmlValidatorPipe"
      ],
      "attributes": [
        {
          "name": "targetNamespace",
          "description": "Only for JSON input: namespace of the resulting XML. Need only be specified when the namespace of root name is ambiguous in the schema"
        },
        {
          "name": "outputFormat",
          "description": "Default format of the result, that is used if the format cannot be found from outputFormatSessionKey or from inputFormatSessionKey (when validating responses and autoFormat=true)",
          "default": "XML",
          "enum": "org.frankframework.documentbuilder.DocumentFormat"
        },
        {
          "name": "outputFormatSessionKey",
          "description": "Session key to retrieve outputFormat from",
          "default": "outputFormat"
        },
        {
          "name": "inputFormatSessionKey",
          "description": "Session key to store the inputFormat in, to be able to set the outputformat when autoFormat=true. Can also be used to pass the value of an HTTP Accept header, to obtain a properly formatted response",
          "default": "<code>Json2XmlValidator.inputFormat </code>&lt;name of the pipe&gt;"
        },
        {
          "name": "autoFormat",
          "description": "If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "compactJsonArrays",
          "description": "If true assume arrays in JSON do not have the element containers like in XML",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "strictJsonArraySyntax",
          "description": "If true check that incoming JSON adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from JSON to XML",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "jsonWithRootElements",
          "description": "If true, assume that JSON contains/must contain a root element",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "deepSearch",
          "description": "If true, and converting from JSON to XML, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currently this option might cause problems. Please try using more qualified parameters names (using '/') first",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "ignoreUndeclaredElements",
          "description": "If true, and converting from JSON to XML, elements in JSON that are not found in the XML Schema are ignored",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "failOnWildcards",
          "description": "If true, an exception is thrown when a wildcard is found in the XML Schema when parsing an object. This often indicates that an element is not properly typed in the XML Schema, and could lead to ambuigities.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "acceptNamespacelessXml",
          "description": "If true, all XML is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the XML, the root namespace is added to the XML",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "acceptNamespaceLessXml",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "The attribute 'acceptNamespaceLessXml' has been renamed 'acceptNamespacelessXml'"
          },
          "type": "bool"
        },
        {
          "name": "produceNamespacelessXml",
          "description": "If true, all XML that is generated is without a namespace set",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "produceNamespaceLessXml",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "The attribute 'produceNamespaceLessXml' has been renamed 'produceNamespacelessXml'"
          },
          "type": "bool"
        },
        {
          "name": "validateJsonToRootElementOnly",
          "description": "If true, and converting to or from JSON, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "allowJson",
          "description": "Allow JSON input",
          "default": "true",
          "type": "bool"
        }
      ]
    },
    {
      "name": "JsonPipe",
      "fullName": "org.frankframework.pipes.JsonPipe",
      "description": "JSON is not aware of the element order. This pipe performs a <strong>best effort</strong> JSON to XML transformation.\n If you wish to validate or add structure to the converted (xml) file, please use the {@link Json2XmlValidator}.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["JsonPipe"],
      "attributes": [
        {
          "name": "direction",
          "description": "Direction of the transformation.",
          "default": "JSON2XML",
          "enum": "org.frankframework.pipes.JsonPipe.Direction"
        },
        {
          "name": "version",
          "deprecated": {
            "forRemoval": true,
            "since": "7.8.0"
          }
        },
        {
          "name": "addXmlRootElement",
          "description": "When direction is JSON2XML, it wraps a root element around the converted message.\n When direction is XML2JSON, it includes the name of the root element as a key in the converted message, thus preserving the structure of the original input message.",
          "default": "TRUE when JSON2XML and FALSE when XML2JSON",
          "type": "bool"
        },
        {
          "name": "rootElementName",
          "description": "When direction is JSON2XML, specifies the name of the root element when `addXmlRootElement` is <code>true</code>.\n When direction is XML2JSON, can not be used.",
          "default": "root"
        },
        {
          "name": "prettyPrint",
          "description": "Format the output in easy legible way (currently only for JSON2XML)",
          "type": "bool"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "JsonValidator",
      "fullName": "org.frankframework.pipes.JsonValidator",
      "description": "Pipe that validates the input message against a JSON Schema.",
      "parent": "org.frankframework.pipes.AbstractValidator",
      "elementNames": [
        "JsonInputValidator",
        "JsonOutputValidator",
        "JsonValidatorPipe"
      ],
      "attributes": [
        {
          "name": "schema",
          "description": "The JSON Schema to validate to"
        },
        {
          "name": "subSchemaPrefix",
          "description": "Prefix to element name to find subschema in schema",
          "default": "/definitions/"
        },
        {
          "name": "reasonSessionKey",
          "description": "If set: key of session variable to store reasons of mis-validation in",
          "default": "failureReason"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "JsonWellFormedChecker",
      "fullName": "org.frankframework.pipes.JsonWellFormedChecker",
      "description": "<code>Pipe</code> that checks the well-formedness of the input message.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["JsonWellFormedCheckerPipe"],
      "forwards": [
        {
          "name": "failure",
          "description": "a validation error occurred, probably caused by non-well-formed JSON"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Validator"
        }
      ]
    },
    {
      "name": "JsonXsltPipe",
      "fullName": "org.frankframework.pipes.JsonXsltPipe",
      "description": "Perform an XSLT transformation with a specified stylesheet on a JSON input, yielding JSON, XML or text.\n JSON input is transformed into XML map, array, string, integer and boolean elements, in the namespace http://www.w3.org/2013/XSL/json.\n The XSLT stylesheet or XPathExpression operates on these element.",
      "parent": "org.frankframework.pipes.XsltPipe",
      "elementNames": ["JsonXsltPipe"],
      "attributes": [
        {
          "name": "jsonResult",
          "description": "When <code>true</code>, the xml result of the transformation is converted back to json",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "namespaceDefs",
          "description": "Namespace definitions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code> definitions",
          "default": "j=http://www.w3.org/2013/XSL/json"
        }
      ],
      "links": [
        {
          "label": "https://www.xml.com/articles/2017/02/14/why-you-should-be-using-xslt-30/",
          "url": "https://www.xml.com/articles/2017/02/14/why-you-should-be-using-xslt-30/"
        }
      ]
    },
    {
      "name": "JsonXsltSender",
      "fullName": "org.frankframework.senders.JsonXsltSender",
      "description": "Perform an XSLT transformation with a specified stylesheet on a JSON input, yielding JSON, yielding JSON, XML or text.\n JSON input is transformed into XML map, array, string, integer and boolean elements, in the namespace http://www.w3.org/2013/XSL/json.\n The XSLT stylesheet or XPathExpression operates on these element.",
      "parent": "org.frankframework.senders.XsltSender",
      "elementNames": ["JsonXsltSender"],
      "attributes": [
        {
          "name": "jsonResult",
          "description": "When <code>true</code>, the xml result of the transformation is converted back to json",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "namespaceDefs",
          "description": "Namespace definitions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code> definitions",
          "default": "j=http://www.w3.org/2013/XSL/json"
        }
      ],
      "links": [
        {
          "label": "https://www.xml.com/articles/2017/02/14/why-you-should-be-using-xslt-30/",
          "url": "https://www.xml.com/articles/2017/02/14/why-you-should-be-using-xslt-30/"
        }
      ]
    },
    {
      "name": "JwtPipe",
      "fullName": "org.frankframework.pipes.JwtPipe",
      "description": "Creates a JWT with a shared secret using the HmacSHA256 algorithm.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["JwtPipe"],
      "attributes": [
        {
          "name": "authAlias",
          "description": "Auth Alias for the SharedSecret to be used when signing the JWT (using the HmacSHA256 algorithm)"
        },
        {
          "name": "sharedSecret",
          "description": "Shared secret to be used when signing the JWT (using the HmacSHA256 algorithm)"
        },
        {
          "name": "expirationTime",
          "description": "JWT expirationTime in seconds, 0 to disable",
          "default": "600",
          "type": "int"
        }
      ],
      "parameters": [
        {
          "name": "<code>sharedSecret</code>",
          "description": "overrides attribute <code>sharedSecret</code>. This parameter has worse performance, compared to this pipes attribute."
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "KafkaListener",
      "fullName": "org.frankframework.extensions.kafka.KafkaListener",
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "Experimental and under development. Do not use unless you wish to participate in this development."
      },
      "description": "Experimental {@link IListener} for listening to a topic in\n a Kafka instance.\n The Kafka integration is still under development so do not\n currently use unless you wish to participate in this development.",
      "parent": "org.frankframework.extensions.kafka.AbstractKafkaFacade",
      "elementNames": ["KafkaListener"],
      "attributes": [
        {
          "name": "groupId",
          "description": "The group id of the consumer"
        },
        {
          "name": "patternRecheckInterval",
          "description": "How often to check for new topics when using Patterns. (in MS)",
          "type": "int"
        },
        {
          "name": "topics",
          "description": "The topics to listen to as comma-separated list. Regular expressions are supported,\n for instance: <code>example.*</code>."
        }
      ]
    },
    {
      "name": "KafkaSender",
      "fullName": "org.frankframework.extensions.kafka.KafkaSender",
      "deprecated": {
        "forRemoval": false,
        "since": "",
        "description": "Experimental and under development. Do not use unless you wish to participate in this development."
      },
      "description": "Experimental {@link ISender} for sending messages to a Kafka instance.\n The Kafka integration is still under development so do not\n currently use unless you wish to participate in this development.",
      "parent": "org.frankframework.extensions.kafka.AbstractKafkaFacade",
      "elementNames": ["KafkaSender"],
      "attributes": [
        {
          "name": "topic",
          "description": "The topic to send messages to. Only one topic per sender. Wildcards are not supported."
        }
      ]
    },
    {
      "name": "LabelFormat",
      "fullName": "org.frankframework.extensions.rekenbox.LabelFormat",
      "description": "Transforms between ascii and an XML representation.\n\n <p>\n Sample xml:<br/>\n <pre><code>&lt;CALCBOXMESSAGE&gt;\n \t\t&lt;OPDRACHT&gt;\n \t\t    &lt;OPDRACHTSOORT&gt;ONTTREK_RISICO_EN_KOSTEN&lt;/OPDRACHTSOORT&gt;\n \t\t    &lt;BASISRENDEMENTSOORT&gt;NVT&lt;/BASISRENDEMENTSOORT&gt;\n \t\t    &lt;BEDRAG&gt;625&lt;/BEDRAG&gt;\n \t\t    &lt;DATUM&gt;20071201&lt;/DATUM&gt;\n     ...\n &lt;/CALCBOXMESSAGE&gt;</code></pre>\n <br/>\n\n Sample ascii:<br/>\n <pre><code>OPDRACHT : #SAMENGESTELD\n \tOPDRACHT.OPDRACHTSOORT :ONTTREK_RISICO_EN_KOSTEN\n \tOPDRACHT.BASISRENDEMENTSOORT :NVT\n \tOPDRACHT.BEDRAG :625\n \tOPDRACHT.DATUM :20071201\n\n          ...\n \tEINDEREKENVERZOEK :EINDE</code></pre>\n </p>\n\n <p><b>Configuration:</b>\n <table border=\\\"1\\\">\n <tr><th>attributes</th><th>description</th><th>default</th></tr>\n <tr><td>{@link #setDirection(String) direction}</td><td>transformation direction. Possible values\n <ul>\n   <li>\\\"Xml2Label\\\": transform an XML file to ascii</li>\n   <li>\\\"Label2Xml\\\": transform an ascii file to XML</li>\n </ul></td><td>Xml2Label</td></tr>\n </table>\n </p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["LabelFormatPipe"],
      "attributes": [
        {
          "name": "direction",
          "description": "sets transformation direction. Possible values\n <ul>\n   <li>\"Xml2Label\": transform an XML file to ascii</li>\n   <li>\"Label2Xml\": transform an ascii file to XML</li>\n </ul>\n default: None"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "LadybugPipe",
      "fullName": "org.frankframework.ladybug.LadybugPipe",
      "description": "Call Ladybug Test Tool to rerun the reports present in test storage (see Test tab in Ladybug)",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["LadybugPipe"],
      "attributes": [
        {
          "name": "writeToLog",
          "description": "whether or not to write results to the logfile (testtool4&lt;instance.name&gt;)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "writeToSystemOut",
          "description": "whether or not to write results to system out",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "checkRoles",
          "description": "Set to <code>true</code> when the pipeline is triggered by a user (e.g. using an http based listener\n that will add a securityHandler session key) and you don't want the listener to check whether the user\n is autorised and/or you want the enforce the roles as configured for the Ladybug",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "enableReportGenerator",
          "description": "Set to <code>true</code> to enable Ladybug's report generator for the duration of the scheduled report runs\n then revert it to its original setting",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "exclude",
          "description": "When set, reports with a full path (path + name) that matches with the specified regular expression are skipped. For example, \\\"/Unscheduled/.*\\\" or \\\".*SKIP\\\"."
        }
      ],
      "forwards": [
        {
          "name": "success",
          "description": "no errors and all tests passed"
        },
        {
          "name": "failure",
          "description": "errors or failed tests"
        }
      ]
    },
    {
      "name": "LarvaPipe",
      "fullName": "org.frankframework.pipes.LarvaPipe",
      "description": "Call Larva Test Tool",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["LarvaPipe"],
      "attributes": [
        {
          "name": "writeToLog",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "writeToSystemOut",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "execute",
          "description": "The scenario sub directory to execute"
        },
        {
          "name": "logLevel",
          "description": "the larva log level: one of [debug], [pipeline messages prepared for diff], [pipeline messages], [wrong pipeline messages prepared for diff], [wrong pipeline messages], [step passed/failed], [scenario passed/failed], [scenario failed], [totals], [error]",
          "default": "wrong pipeline messages",
          "enum": "org.frankframework.larva.LarvaLogLevel"
        },
        {
          "name": "waitBeforeCleanup",
          "default": "100ms"
        },
        {
          "name": "timeout",
          "description": "the larva timeout in milliseconds",
          "default": "10000",
          "type": "int"
        }
      ],
      "forwards": [
        {
          "name": "success",
          "description": "no errors and all tests passed"
        },
        {
          "name": "failure",
          "description": "errors or failed tests"
        }
      ]
    },
    {
      "name": "LdapChallengePipe",
      "fullName": "org.frankframework.ldap.LdapChallengePipe",
      "deprecated": {
        "forRemoval": true,
        "since": "7.6.0",
        "description": "please use LdapSender with operation challenge and check for returned message <LdapResult>Success</LdapResult>"
      },
      "description": "Pipe to check if a username and password are valid in LDAP.\n\n <table border=\\\"1\\\">\n <p><b>Parameters:</b>\n <tr><th>name</th><th>type</th><th>remarks</th></tr>\n <tr><td>ldapProviderURL</td><td>URL to the LDAP server. <br/>Example: ldap://su05b9.itc.intranet</td><td>Required only if attribute ldapProviderURL is not set</td></tr>\n <tr><td>principal</td><td>The LDAP DN for the username. <br/>Example: UID=SRP,OU=DI-IUF-EP,OU=SERVICES,O=ING</td><td>Required and must be filled</td></tr>\n <tr><td>credentials</td><td>The LDAP password. <br/> Example: welkom01</td><td>Required and must be filled</td></tr>\n </table>\n </p>\n <p><b>Exits:</b>\n <table border=\\\"1\\\">\n <tr><th>state</th><th>condition</th><th>remarks</th></tr>\n <tr><td>success</td><td>Successful login to LDAP</td><td>should be defined in configuration</td></tr>\n <tr><td>invalid</td><td>Unsuccessful login to LDAP</td><td>should be defined in configuration</td></tr>\n </table>\n </p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["LdapChallengePipe"],
      "attributes": [
        {
          "name": "ldapProviderURL",
          "description": "url to the ldap server. <br/>example: ldap://su05b9.itc.intranet"
        },
        {
          "name": "initialContextFactoryName",
          "description": "class to use as initial context factory",
          "default": "com.sun.jndi.ldap.ldapctxfactory"
        },
        {
          "name": "errorSessionKey",
          "description": "key of session variable used to store cause of errors"
        }
      ]
    },
    {
      "name": "LdapFindGroupMembershipsPipe",
      "fullName": "org.frankframework.ldap.LdapFindGroupMembershipsPipe",
      "description": "Pipe that returns the memberships of a userDN.\n The input is a fullDn, of a user or a group.\n <br/>\n Sample result:<br/><code><pre>\n\t&lt;ldap&gt;\n\t &lt;entry name=\\\"CN=xxyyzz,OU=Users,DC=domain,DC=ext\\\"&gt;\n\t   &lt;attributes&gt;\n\t    &lt;attribute&gt;\n\t    &lt;attribute name=\\\"memberOf\\\" value=\\\"Extern\\\"/&gt;\n\t    &lt;attribute name=\\\"departmentCode\\\" value=\\\"358000\\\"/&gt;\n\t    &lt;attribute name=\\\"organizationalHierarchy\\\"&gt;\n\t        &lt;item value=\\\"ou=zzyyxx\\\"/&gt;\n\t        &lt;item value=\\\"ou=OPS&amp;IT,ou=Group,ou=domain,o=ext\\\"/&gt;\n\t    &lt;/attribute>\n\t    &lt;attribute name=\\\"givenName\\\" value=\\\"Gerrit\\\"/>\n\t   &lt;/attributes&gt;\n\t  &lt;/entry&gt;\n   &lt;entry&gt; .... &lt;/entry&gt;\n   .....\n\t&lt;/ldap&gt;\n </pre></code> <br/>",
      "parent": "org.frankframework.ldap.AbstractLdapQueryPipe",
      "elementNames": ["LdapFindGroupMembershipsPipe"],
      "attributes": [
        {
          "name": "recursiveSearch",
          "description": "when <code>true</code>, the memberOf attribute is also searched in all the found members",
          "default": "true",
          "type": "bool"
        }
      ],
      "children": [
        {
          "multiple": false,
          "roleName": "cache",
          "description": "optional {@link EhCache cache} definition",
          "type": "org.frankframework.cache.ICache"
        }
      ]
    },
    {
      "name": "LdapFindMemberPipe",
      "fullName": "org.frankframework.ldap.LdapFindMemberPipe",
      "description": "Pipe that checks if a specified dn exists as 'member' in another specified dn\n in LDAP.",
      "parent": "org.frankframework.ldap.AbstractLdapQueryPipe",
      "elementNames": ["LdapFindMemberPipe"],
      "attributes": [
        {
          "name": "dnSearchIn",
          "description": "The dn of the group to search in when the parameter dnSearchIn is not set"
        },
        {
          "name": "dnFind",
          "description": "The dn of the member to search for when the parameter dnFind is not set"
        },
        {
          "name": "recursiveSearch",
          "description": "when <code>true</code>, the member attribute is also searched in all the found members",
          "default": "true",
          "type": "bool"
        }
      ]
    },
    {
      "name": "LdapSender",
      "fullName": "org.frankframework.ldap.LdapSender",
      "description": "Sender to obtain information from and write to an LDAP Directory.\n Returns the set of attributes in an XML format. Examples are shown below.\n\n <h2>example</h2>\n Consider the following configuration example:\n <pre><code>&lt;sender\n      className=&quot;org.frankframework.ldap.LdapSender&quot;\n      ldapProviderURL=&quot;ldap://servername:389/o=ing&quot;\n      operation=&quot;read&quot;\n      attributesToReturn=&quot;givenName,sn,telephoneNumber&quot; &gt;\n     &lt;param name=&quot;entryName&quot; xpathExpression=&quot;entryName&quot; /&gt;\n &lt;/sender&gt;</code></pre>\n <br/>\n\n This may result in the following output:\n <pre><code>&lt;ldap&gt;\n \t   &lt;entryName&gt;uid=srp,ou=people&lt;/entryName&gt;\n \t   &lt;attributes&gt;\n         &lt;attribute attrID=&quot;givenName&quot;&gt;\n             &lt;value&gt;Jan&lt;/value&gt;\n         &lt;/attribute&gt;\n         &lt;attribute attrID=&quot;telephoneNumber&quot;&gt;\n             &lt;value&gt;010 5131123&lt;/value&gt;\n             &lt;value&gt;06 23456064&lt;/value&gt;\n         &lt;/attribute&gt;\n \t       &lt;attribute attrID=&quot;sn&quot;&gt;\n             &lt;value&gt;Jansen&lt;/value&gt;\n \t       &lt;/attribute&gt;\n \t   &lt;/attributes&gt;\n &lt;/ldap&gt;</code></pre>\n <br/>\n\n Search or Read?\n\n Read retrieves all the attributes of the specified entry.\n\n Search retrieves all the entries of the specified (by entryName) context that have the specified attributes,\n together with the attributes. If the specified attributes are null or empty all the attributes of all the entries within the\n specified context are returned.\n\n Sample result of a <code>read</code> operation:<br/>\n <pre><code>&lt;attributes&gt;\n \t   &lt;attribute&gt;\n \t   &lt;attribute name=&quot;employeeType&quot; value=&quot;Extern&quot;/&gt;\n \t   &lt;attribute name=&quot;roomNumber&quot; value=&quot;DP 2.13.025&quot;/&gt;\n \t   &lt;attribute name=&quot;departmentCode&quot; value=&quot;358000&quot;/&gt;\n \t   &lt;attribute name=&quot;organizationalHierarchy&quot;&gt;\n \t       &lt;item value=&quot;ou=ING-EUR,ou=Group,ou=Organization,o=ing&quot;/&gt;\n \t       &lt;item value=&quot;ou=OPS&amp;IT,ou=NL,ou=ING-EUR,ou=Group,ou=Organization,o=ing&quot;/&gt;\n \t       &lt;item value=&quot;ou=000001,ou=OPS&amp;IT,ou=NL,ou=ING-EUR,ou=Group,ou=Organization,o=ing&quot;/&gt;\n \t   &lt;/attribute&gt;\n \t   &lt;attribute name=&quot;givenName&quot; value=&quot;Gerrit&quot;/&gt;\n &lt;/attributes&gt;</code></pre>\n <br/>\n Sample result of a <code>search</code> operation:<br/>\n <pre><code>&lt;entries&gt;\n \t   &lt;entry name=&quot;uid=srp&quot;&gt;\n \t       &lt;attributes&gt;\n \t           &lt;attribute&gt;\n \t           &lt;attribute name=&quot;employeeType&quot; value=&quot;Extern&quot;/&gt;\n \t           &lt;attribute name=&quot;roomNumber&quot; value=&quot;DP 2.13.025&quot;/&gt;\n \t           &lt;attribute name=&quot;departmentCode&quot; value=&quot;358000&quot;/&gt;\n \t           &lt;attribute name=&quot;organizationalHierarchy&quot;&gt;\n \t               &lt;item value=&quot;ou=ING-EUR,ou=Group,ou=Organization,o=ing&quot;/&gt;\n \t               &lt;item value=&quot;ou=OPS&amp;IT,ou=NL,ou=ING-EUR,ou=Group,ou=Organization,o=ing&quot;/&gt;\n \t               &lt;item value=&quot;ou=000001,ou=OPS&amp;IT,ou=NL,ou=ING-EUR,ou=Group,ou=Organization,o=ing&quot;/&gt;\n \t           &lt;/attribute&gt;\n \t           &lt;attribute name=&quot;givenName&quot; value=&quot;Gerrit&quot;/&gt;\n \t       &lt;/attributes&gt;\n \t   &lt;/entry&gt;\n     &lt;entry&gt; .... &lt;/entry&gt;\n    .....\n &lt;/entries&gt;</code></pre>\n <br/>",
      "parent": "org.frankframework.jndi.JndiBase",
      "elementNames": ["LdapSender"],
      "attributes": [
        {
          "name": "operation",
          "description": "Specifies LDAP operation to perform",
          "default": "read",
          "enum": "org.frankframework.ldap.LdapSender.Operation"
        },
        {
          "name": "ldapProviderURL",
          "description": "URL to context to search in, e.g. 'ldap://edsnlm01.group.intranet/ou=people, o=ing' to search in te people group of ing cds. Used to overwrite the providerURL specified in jmsRealm."
        },
        {
          "name": "manipulationSubject",
          "description": "Specifies subject to perform operation on.",
          "default": "attribute",
          "enum": "org.frankframework.ldap.LdapSender.Manipulation"
        },
        {
          "name": "attributesToReturn",
          "description": "Comma separated list of attributes to return. When no are attributes specified, all the attributes from the object read are returned.",
          "default": "<i>all attributes</i>"
        },
        {
          "name": "usePooling",
          "description": "Specifies whether connection pooling is used or not",
          "default": "true when principal not set as parameter, false otherwise",
          "type": "bool"
        },
        {
          "name": "searchTimeout",
          "description": "Specifies the time (in ms) that is spent searching for results for operation search",
          "default": "20000",
          "type": "int"
        },
        {
          "name": "errorSessionKey",
          "description": "Key of session variable used to store cause of errors",
          "default": "errorReason"
        },
        {
          "name": "maxEntriesReturned",
          "description": "The maximum number of entries to be returned by a search query, or <code>0</code> for unlimited",
          "default": "0",
          "type": "int"
        },
        {
          "name": "unicodePwd",
          "description": "When <code>true</code> the attributes passed by the input xml are scanned for an attribute with id unicodepwd, when found the value of this attribute will be encoded as required by active directory (a UTF-16 encoded unicode string containing the password surrounded by quotation marks) before sending it to the LDAP server",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "replyNotFound",
          "description": "(Only used when <code>operation=search/deepsearch</code>) when <code>true</code> the xml '&lt;ldapresult&gt;object not found&lt;/ldapresult&gt;' is returned instead of the PartialResultException 'unprocessed continuation reference(s)'",
          "default": "false",
          "type": "bool"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ],
      "parameters": [
        {
          "name": "entryName",
          "description": "Represents entryName (RDN) of interest."
        },
        {
          "name": "filterExpression",
          "description": "Filter expression (handy with searching - see RFC2254)."
        },
        {
          "name": "principal",
          "description": "Will overwrite jndiAuthAlias, principal and credential attributes together with parameter credentials which is expected to be present too. This will also have the effect of usePooling being set to false and the LDAP connection being made at runtime only (skipped at configuration time)."
        },
        {
          "name": "credentials",
          "description": "See parameter principal. It's advised to set attribute hidden to true for parameter credentials."
        }
      ]
    },
    {
      "name": "LoadDatabaseSchedulesJob",
      "fullName": "org.frankframework.scheduler.job.LoadDatabaseSchedulesJob",
      "description": "1. This method first stores all database jobs that can are found in the Quartz Scheduler in a Map.\n 2. It then loops through all records found in the database.\n 3. If the job is found, remove it from the Map and compares it with the already existing scheduled job.\n    Only if they differ, it overwrites the current job.\n    If it is not present it add the job to the scheduler.\n 4. Once it's looped through all the database jobs, loop through the remaining jobs in the Map.\n    Since they have been removed from the database, remove them from the Quartz Scheduler\n \n \n Frank!Framework job which periodically looks in the `IBISSCHEDULES` table to see if a new {@link DatabaseJob} should be loaded.",
      "parent": "org.frankframework.scheduler.AbstractJobDef",
      "elementNames": ["LoadDatabaseSchedulesJob"],
      "notes": [
        {
          "type": "INFO",
          "value": "This is a default job that can be controlled with the property `loadDatabaseSchedules.active` and `loadDatabaseSchedules.interval`."
        }
      ]
    },
    {
      "name": "LobLineIteratingPipeBase",
      "fullName": "org.frankframework.jdbc.LobLineIteratingPipeBase",
      "abstract": true,
      "description": "abstract baseclass for Pipes that iterate over the lines in a lob.",
      "parent": "org.frankframework.jdbc.JdbcIteratingPipeBase",
      "elementNames": []
    },
    {
      "name": "LocalFileSystemPipe",
      "fullName": "org.frankframework.pipes.LocalFileSystemPipe",
      "description": "Pipe to work with the server local filesystem.\n <p>\n     In addition to regular parameters for filesystem senders, it is possible\n     to set custom extended attributes on files by prefixing parameter names with\n     <code>FileAttribute.</code>.\n     This prefix will be not be part of the actual metadata property name.\n </p>\n <p>\n     The string value of these parameters will be used as value of the custom metadata attribute.\n </p>\n <p>\n     If extended attributes actually can be written depends on the underlying OS / filesystem.\n </p>",
      "parent": "org.frankframework.filesystem.AbstractFileSystemPipe",
      "elementNames": ["LocalFileSystemPipe"],
      "attributes": [
        {
          "name": "root",
          "description": "Path to the folder that serves as the root of this virtual filesystem. All specifications of folders or files are relative to this root.\n When the root is left unspecified, absolute paths to files and folders can be used"
        },
        {
          "name": "createRootFolder",
          "description": "Whether the LocalFileSystem tries to create the root folder if it doesn't exist yet.",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "LocalFileSystemSender",
      "fullName": "org.frankframework.senders.LocalFileSystemSender",
      "description": "Sender to work with the server local filesystem.\n <p>\n     In addition to regular parameters for filesystem senders, it is possible\n     to set custom extended attributes on files by prefixing parameter names with\n     <code>FileAttribute.</code>.\n     This prefix will be not be part of the actual metadata property name.\n </p>\n <p>\n     The string value of these parameters will be used as value of the custom metadata attribute.\n </p>",
      "parent": "org.frankframework.filesystem.AbstractFileSystemSender",
      "elementNames": ["LocalFileSystemSender"],
      "attributes": [
        {
          "name": "root",
          "description": "Path to the folder that serves as the root of this virtual filesystem. All specifications of folders or files are relative to this root.\n When the root is left unspecified, absolute paths to files and folders can be used"
        },
        {
          "name": "createRootFolder",
          "description": "Whether the LocalFileSystem tries to create the root folder if it doesn't exist yet.",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "Locker",
      "fullName": "org.frankframework.util.Locker",
      "description": "Locker of scheduler jobs and pipes.\n\n Tries to set a lock (by inserting a record in the database table IbisLock) and only if this is done\n successfully the job is executed.\n\n For an Oracle database the following objects are used:\n  <pre>\n\tCREATE TABLE &lt;schema_owner&gt;.IBISLOCK\n\t(\n\tOBJECTID VARCHAR2(100 CHAR),\n\tTYPE CHAR(1 CHAR),\n\tHOST VARCHAR2(100 CHAR),\n\tCREATIONDATE TIMESTAMP(6),\n\tEXPIRYDATE TIMESTAMP(6)\n\tCONSTRAINT PK_IBISLOCK PRIMARY KEY (OBJECTID)\n\t);\n\n\tCREATE INDEX &lt;schema_owner&gt;.IX_IBISLOCK ON &lt;schema_owner&gt;.IBISLOCK\n\t(EXPIRYDATE);\n\n\tGRANT DELETE, INSERT, SELECT, UPDATE ON &lt;schema_owner&gt;.IBISLOCK TO &lt;rolename&gt;;\n\tGRANT SELECT ON SYS.DBA_PENDING_TRANSACTIONS TO &lt;rolename&gt;;\n\n\tCOMMIT;\n  </pre>",
      "parent": "org.frankframework.jdbc.JdbcFacade",
      "elementNames": ["Locker"],
      "attributes": [
        {
          "name": "objectId",
          "mandatory": true,
          "description": "Identifier for this lock"
        },
        {
          "name": "type",
          "description": "Type for this lock: P(ermanent) or T(emporary). A temporary lock is released after the job has completed",
          "default": "T",
          "enum": "org.frankframework.util.Locker.LockType"
        },
        {
          "name": "dateFormatSuffix",
          "description": "Format for date which is added after <code>objectid</code> (e.g. yyyyMMdd to be sure the job is executed only once a day)"
        },
        {
          "name": "retention",
          "description": "The time (for type=P in days and for type=T in hours) to keep the record in the database before making it eligible for deletion by a cleanup process",
          "default": "30 days (type=P), 4 hours (type=T)",
          "type": "int"
        },
        {
          "name": "numRetries",
          "description": "The number of times an attempt should be made to acquire a lock, after this many times an exception is thrown when no lock could be acquired, when -1 the number of retries is unlimited",
          "default": "0",
          "type": "int"
        },
        {
          "name": "firstDelay",
          "description": "The time in ms to wait before the first attempt to acquire a lock is made",
          "default": "0",
          "type": "int"
        },
        {
          "name": "retryDelay",
          "description": "The time in ms to wait before another attempt to acquire a lock is made",
          "default": "10000",
          "type": "int"
        },
        {
          "name": "lockWaitTimeout",
          "description": "If > 0: The time in s to wait before the INSERT statement to obtain the lock is canceled. N.B. On Oracle hitting this lockWaitTimeout may cause the error: (SQLRecoverableException) SQLState [08003], errorCode [17008] connection closed",
          "default": "0",
          "type": "int"
        },
        {
          "name": "ignoreTableNotExist",
          "description": "If set <code>true</code> and the IBISLOCK table does not exist in the database, the process continues as if the lock was obtained",
          "type": "bool"
        },
        {
          "name": "transactionAttribute",
          "description": "The <code>transactionAttribute</code> declares transactional behavior of execution. It applies both to database transactions and XA transactions.\n The pipeline uses this to start a new transaction or suspend the current one when required.\n For developers: it is equal to <a href=\\\"https://docs.oracle.com/javaee/7/tutorial/transactions003.htm\\\">EJB transaction attribute</a>.\n Possible values for transactionAttribute:\n   <table border=\\\"1\\\">\n     <tr><th>transactionAttribute</th><th>callers Transaction</th><th>Pipeline excecuted in Transaction</th></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">Required</td>    <td>none</td><td>T2</td></tr>\n \t\t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>T1</td></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">RequiresNew</td> <td>none</td><td>T2</td></tr>\n \t\t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>T2</td></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">Mandatory</td>   <td>none</td><td>error</td></tr>\n \t\t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>T1</td></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">NotSupported</td><td>none</td><td>none</td></tr>\n \t\t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>none</td></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">Supports</td>    <td>none</td><td>none</td></tr>\n  \t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>T1</td></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">Never</td>       <td>none</td><td>none</td></tr>\n \t\t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>error</td></tr>\n   </table>",
          "default": "Supports",
          "enum": "org.frankframework.core.TransactionAttribute"
        },
        {
          "name": "transactionTimeout",
          "description": "Timeout (in seconds) of transaction started to process a message.",
          "default": "<code>0</code> (use system default)",
          "type": "int"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "LogContextPipe",
      "fullName": "org.frankframework.pipes.LogContextPipe",
      "description": "Pipe that stores all its parameter values in the ThreadContext, formerly known as Mapped Diagnostic Context (MDC), to be used in logging.\n The input is passed through to the output.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["LogContextPipe"],
      "attributes": [
        {
          "name": "export",
          "description": "If set to <code>true</code> the ThreadContext parameters will be exported from the current PipeLine up in the call tree.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "continueOnError",
          "description": "If set <code>true</code> the pipe will never forward to the <code>ExceptionForward</code> even if an error occurred during execution.",
          "default": "false",
          "type": "bool"
        }
      ],
      "parametersDescription": "every parameter value is stored in the ThreadContext under its name.",
      "labels": [
        {
          "label": "EIP",
          "value": "Session"
        }
      ]
    },
    {
      "name": "LogSender",
      "fullName": "org.frankframework.senders.LogSender",
      "description": "Sender that just logs its message.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["LogSender"],
      "attributes": [
        {
          "name": "logCategory",
          "description": "category under which messages are logged",
          "default": "name of the sender"
        },
        {
          "name": "logLevel",
          "description": "level on which messages are logged",
          "default": "info"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ]
    },
    {
      "name": "MQSender",
      "fullName": "org.frankframework.extensions.ibm.MQSender",
      "description": "JMS sender which will call IBM WebSphere MQ specific\n setTargetClient(JMSC.MQJMS_CLIENT_NONJMS_MQ) on the destination prior to\n sending a message. This is needed when the MQ destination is not a JMS\n receiver otherwise format errors occur (e.g. dots are added after every\n character in the message).\n\n <p>See {@link JmsSender} for configuration</p>",
      "parent": "org.frankframework.jms.JmsSender",
      "elementNames": ["MQSender"]
    },
    {
      "name": "MailSender",
      "fullName": "org.frankframework.senders.MailSender",
      "description": "{@link ISender sender} that sends a mail specified by an XML message.\n <p>\n Sample email.xml:\n <pre><code>&lt;email&gt;\n     &lt;recipients&gt;\n         &lt;recipient type=&quot;to&quot;&gt;***@hotmail.com&lt;/recipient&gt;\n         &lt;recipient type=&quot;cc&quot;&gt;***@gmail.com&lt;/recipient&gt;\n     &lt;/recipients&gt;\n     &lt;from name=&quot;*** ***&quot;&gt;***@yahoo.com&lt;/from&gt;\n     &lt;subject&gt;This is the subject&lt;/subject&gt;\n     &lt;threadTopic&gt;subject&lt;/threadTopic&gt;\n     &lt;message&gt;This is the message&lt;/message&gt;\n     &lt;messageType&gt;text/plain&lt;/messageType&gt;&lt;!-- Optional --&gt;\n     &lt;messageBase64&gt;false&lt;/messageBase64&gt;&lt;!-- Optional --&gt;\n     &lt;charset&gt;UTF-8&lt;/charset&gt;&lt;!-- Optional --&gt;\n     &lt;attachments&gt;\n         &lt;attachment name=&quot;filename1.txt&quot;&gt;This is the first attachment&lt;/attachment&gt;\n         &lt;attachment name=&quot;filename2.pdf&quot; base64=&quot;true&quot;&gt;JVBERi0xLjQKCjIgMCBvYmoKPDwvVHlwZS9YT2JqZWN0L1N1YnR5cGUvSW1...vSW5mbyA5IDAgUgo+PgpzdGFydHhyZWYKMzQxNDY2CiUlRU9GCg==&lt;/attachment&gt;\n         &lt;attachment name=&quot;filename3.pdf&quot; url=&quot;file:/c:/filename3.pdf&quot;/&gt;\n         &lt;attachment name=&quot;filename4.pdf&quot; sessionKey=&quot;fileContent&quot;/&gt;\n     &lt;/attachments&gt;&lt;!-- Optional --&gt;\n &lt;/email&gt;</code></pre>\n </p><p>\n Notice: the XML message must be valid XML. Therefore, especially the message element\n must be plain text or be wrapped as CDATA. Example:\n <pre><code>&lt;message&gt;&lt;![CDATA[&lt;h1&gt;This is a HtmlMessage&lt;/h1&gt;]]&gt;&lt;/message&gt;</code></pre>\n </p><p>\n The <code>sessionKey</code> attribute for attachment can contain an inputstream or a string. Other types are not supported at this moment.\n </p><p>\n The attribute order for attachments is as follows:\n <ol>\n    <li>sessionKey</li>\n    <li>url</li>\n    <li><i>value of the attachment element</i></li>\n </ol>\n </p><p>\n The <code>base64</code> attribute is only used when the value of the PipeLineSession variable <code>sessionKey</code> is a String object\n or when the value of the attachment element is used. If <code>base64=true</code> then the value will be decoded before it's used.\n </p><p>\n <b>Compilation and Deployment Note:</b> mail.jar (v1.2) and activation.jar must appear BEFORE j2ee.jar.\n Otherwise errors like the following might occur: <code>NoClassDefFoundException: com/sun/mail/util/MailDateFormat</code>\n </p>",
      "parent": "org.frankframework.senders.AbstractMailSender",
      "elementNames": ["MailSender"],
      "attributes": [
        {
          "name": "smtpHost",
          "description": "Name of the SMTP-host by which the messages are to be send"
        },
        {
          "name": "smtpPort",
          "description": "Port of the SMTP-host by which the messages are to be send",
          "default": "25",
          "type": "int"
        },
        {
          "name": "useSsl",
          "description": "When set to true, we ensure TLS is being used",
          "default": "false",
          "type": "bool"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ]
    },
    {
      "name": "MailSenderPipe",
      "fullName": "org.frankframework.pipes.MailSenderPipe",
      "description": "Pipe that sends a mail-message using a {@link MailSender} as its sender.\n <br/>\n Sample email.xml:<br/>\n <pre><code>&lt;email&gt;\n \t    &lt;recipients&gt;\n \t        &lt;recipient&gt;***@natned&lt;/recipient&gt;\n \t        &lt;recipient&gt;***@nn.nl&lt;/recipient&gt;\n \t    &lt;/recipients&gt;\n \t    &lt;from&gt;***@nn.nl&lt;/from&gt;\n \t    &lt;subject&gt;this is the subject&lt;/subject&gt;\n \t    &lt;message&gt;dit is de message&lt;/message&gt;\n \t&lt;/email&gt;</code></pre>\n <br/>\n Notice: it must be valid XML. Therefore, especially the message element\n must be plain text or be wrapped as CDATA.<br/><br/>\n example:<br/>\n <pre><code>&lt;message&gt;&lt;![CDATA[&lt;h1&gt;This is a HtmlMessage&lt;/h1&gt;]]&gt;&lt;/message&gt;</code></pre>\n <br/>",
      "parent": "org.frankframework.pipes.MessageSendingPipe",
      "elementNames": ["MailSenderPipe"]
    },
    {
      "name": "MessageSendingPipe",
      "fullName": "org.frankframework.pipes.MessageSendingPipe",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "linkMethod",
          "description": "For asynchronous communication, the server side may either use the messageID or the correlationID\n in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener.",
          "default": "CORRELATIONID",
          "enum": "org.frankframework.pipes.MessageSendingPipe.LinkMethod"
        },
        {
          "name": "hideRegex",
          "description": "Next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked"
        },
        {
          "name": "hideMethod",
          "description": "(Only used when hideRegex is not empty and only applies to error/logstore)",
          "default": "all",
          "enum": "org.frankframework.core.IMessageBrowser.HideMethod"
        },
        {
          "name": "checkXmlWellFormed",
          "description": "If set <code>true</code>, the XML Well-Formedness of the result is checked",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "checkRootTag",
          "description": "If set, besides the XML Well-Formedness the root element of the result is checked to be equal to the value set"
        },
        {
          "name": "resultOnTimeOut",
          "description": "The message (e.g. 'receiver timed out') that is returned when the time listening for a reply message\n exceeds the timeout, or in other situations no reply message is received."
        },
        {
          "name": "maxRetries",
          "description": "The number of times a processing attempt is retried after a timeout or an exception is caught or after an incorrect reply is received (see also <code>retryXPath</code>)",
          "default": "0",
          "type": "int"
        },
        {
          "name": "retryMinInterval",
          "description": "The starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. Each next retry this interval is doubled with a upper limit of <code>retryMaxInterval</code>",
          "default": "1",
          "type": "int"
        },
        {
          "name": "retryMaxInterval",
          "description": "The maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made",
          "default": "600",
          "type": "int"
        },
        {
          "name": "retryXPath",
          "description": "XPath expression evaluated on each technical successful reply. Retry is done if condition returns true"
        },
        {
          "name": "retryNamespaceDefs",
          "description": "Namespace defintions for retryXPath. Must be in the form of a comma or space separated list of <code>prefix=namespaceUri</code>-definitions"
        },
        {
          "name": "presumedTimeOutInterval",
          "description": "If the previous call was a timeout, the maximum time <i>in seconds</i> after this timeout to presume the current call is also a timeout.",
          "default": "0",
          "type": "int"
        },
        {
          "name": "stubFilename",
          "description": "If set, the pipe returns a message from a file, instead of doing the regular process"
        },
        {
          "name": "timeoutOnResult",
          "description": "If not empty, a TimeoutException is thrown when the result equals this value (for testing purposes only)"
        },
        {
          "name": "timeOutOnResult",
          "deprecated": {
            "forRemoval": false,
            "since": "8.1",
            "description": "Use attribute timeoutOnResult instead"
          },
          "description": "If not empty, a TimeoutException is thrown when the result equals this value (for testing purposes only)"
        },
        {
          "name": "exceptionOnResult",
          "description": "If not empty, a PipeRunException is thrown when the result equals this value (for testing purposes only)"
        }
      ],
      "children": [
        {
          "multiple": false,
          "roleName": "messageLog",
          "description": "log of all messages sent",
          "type": "org.frankframework.core.ITransactionalStorage"
        },
        {
          "multiple": false,
          "roleName": "inputValidator",
          "description": "specification of Pipe to validate request messages, or request and response message if configured as mixed mode validator",
          "type": "org.frankframework.core.IValidator"
        },
        {
          "multiple": false,
          "roleName": "outputValidator",
          "description": "specification of Pipe to validate response messages",
          "type": "org.frankframework.core.IValidator"
        },
        {
          "multiple": false,
          "roleName": "inputWrapper",
          "description": "specification of Pipe to wrap or unwrap request messages",
          "type": "org.frankframework.core.IWrapperPipe"
        },
        {
          "multiple": false,
          "roleName": "outputWrapper",
          "description": "specification of Pipe to wrap or unwrap response messages",
          "type": "org.frankframework.core.IWrapperPipe"
        }
      ],
      "parametersDescription": "Any parameters defined on the pipe will be handed to the sender, if this is a {@link ISenderWithParameters ISenderWithParameters}.",
      "parameters": [
        {
          "name": "stubFilename",
          "description": "will <u>not</u> be handed to the sender\n and it is used at runtime instead of the stubFilename specified by the attribute. A lookup of the\n file for this stubFilename will be done at runtime, while the file for the stubFilename specified\n as an attribute will be done at configuration time."
        }
      ],
      "forwards": [
        {
          "name": "timeout"
        },
        {
          "name": "illegalResult"
        },
        {
          "name": "presumedTimeout"
        },
        {
          "name": "interrupt"
        },
        {
          "name": "*",
          "description": "{@link ISender sender} provided forward, such as the http statuscode or exit name (or code) of a sub-adapter."
        }
      ]
    },
    {
      "name": "MessageStoreListener",
      "fullName": "org.frankframework.jdbc.MessageStoreListener",
      "description": "Read messages from the IBISSTORE database table previously stored by a {@link MessageStoreSender}.\n <p>\n Example configuration:\n <pre><code>&lt;Receiver\n \t\tname=&quot;03 MessageStoreReceiver&quot;\n \t\tnumThreads=&quot;4&quot;\n \t\ttransactionAttribute=&quot;Required&quot;\n \t\tpollInterval=&quot;1&quot;&gt;\n \t\t&lt;MessageStoreListener\n \t\t\tname=&quot;03 MessageStoreListener&quot;\n \t\t\tslotId=&quot;${instance.name}/TestMessageStore&quot;\n \t\t\tstatusValueInProcess=&quot;I&quot; /&gt;\n \t&lt;/Receiver&gt;</code></pre>\n\n If you have a <code>MessageStoreListener</code>, failed messages are automatically kept in database\n table IBISSTORE. Messages are also kept after successful processing. The state of a message\n is distinguished by the <code>TYPE</code> field, as follows:\n <ul>\n <li> <code>M</code>: The message is new. From a functional perspective, it is in the message store.\n <li> <code>E</code>: There was an error processing the message. From a functional perspective, it is in the error store.\n <li> <code>A</code>: The message was successfully processed. From a functional perspective, it is in the message log.\n </ul>\n Another way to say this is that a <code>MessageStoreListener</code> acts as a message log and as an error store.\n If you have it, you do not need to add\n a <code>JdbcErrorStorage</code> or <code>JdbcMessageLog</code> within the same receiver.\n <br/><br/>\n See /IAF_util/IAF_DatabaseChangelog.xml for the structure of table IBISSTORE.",
      "parent": "org.frankframework.jdbc.JdbcTableListener",
      "elementNames": ["MessageStoreListener"],
      "attributes": [
        {
          "name": "slotId",
          "description": "Identifier for this service"
        },
        {
          "name": "sessionKeys",
          "description": "Comma separated list of sessionKey's to be read together with the message. Please note: corresponding {@link MessageStoreSender} must have the same value for this attribute"
        },
        {
          "name": "tableName",
          "description": "Name of the table to be used",
          "default": "IBISSTORE"
        },
        {
          "name": "keyField",
          "description": "Primary key field of the table, used to identify and differentiate messages.\n <b>NB: there should be an index on this field!</b>",
          "default": "MESSAGEKEY"
        },
        {
          "name": "messageField",
          "description": "Field containing the message data",
          "default": "MESSAGE"
        },
        {
          "name": "messageIdField",
          "description": "Field containing the <code>messageId</code>.\n <b>NB: If this column is not set the default (primary key) {@link #setKeyField(String) keyField} will be used as messageId!</b>",
          "default": "MESSAGEID"
        },
        {
          "name": "correlationIdField",
          "description": "Field containing the <code>correlationId</code>.\n <b>NB: If this column is not set, the <code>messageId</code> and <code>correlationId</code> will be the same!</b>",
          "default": "CORRELATIONID"
        },
        {
          "name": "messageFieldType",
          "description": "Type of the field containing the message data",
          "default": "BLOB",
          "enum": "org.frankframework.jdbc.JdbcListener.MessageFieldType"
        },
        {
          "name": "blobSmartGet",
          "description": "Controls automatically whether blobdata is stored compressed and/or serialized in the database. N.B. When set true, then the BLOB will be converted into a string",
          "default": "<code>true</code>",
          "type": "bool"
        },
        {
          "name": "statusField",
          "description": "Field containing the status of the message. \n <b>NB: For optimal performance, an index should exist that starts with this field, followed by all fields that are used with a fixed value in the select condition, and end with the <code>orderField</code>.",
          "default": "TYPE"
        },
        {
          "name": "timestampField",
          "description": "(optional) Field used to store the date and time of the last change of the <code>statusField</code>",
          "default": "MESSAGEDATE"
        },
        {
          "name": "commentField",
          "description": "(optional) Field used to store the reason of the last change of the <code>statusField</code>",
          "default": "COMMENTS"
        },
        {
          "name": "statusValueAvailable",
          "description": "Value of statusField indicating row is available to be processed. If set empty, any row not having any of the other status values is considered available.",
          "default": "<code>M</code>"
        },
        {
          "name": "statusValueInProcess",
          "description": "Value of status field indicating is being processed. Set to <code>I</code> if database has no SKIP LOCKED functionality, the Receiver cannot be set to <code>Required</code> or <code>RequiresNew</code>, or to support programmatic retry."
        },
        {
          "name": "statusValueError",
          "description": "Value of <code>statusField</code> indicating the processing of the row resulted in an error",
          "default": "<code>E</code>"
        },
        {
          "name": "statusValueProcessed",
          "description": "Value of status field indicating row is processed OK",
          "default": "<code>A</code>"
        },
        {
          "name": "statusValueHold",
          "description": "Value of status field indicating message is on Hold, temporarily. If required, suggested value is <code>H</code>."
        },
        {
          "name": "moveToMessageLog",
          "description": "Move to messageLog after processing, as the message is already stored in the ibisstore only some fields need to be updated. When set <code>false</code>, messages are deleted after being processed",
          "default": "<code>true</code>",
          "type": "bool"
        }
      ]
    },
    {
      "name": "MessageStoreSender",
      "fullName": "org.frankframework.jdbc.MessageStoreSender",
      "description": "Send messages to the IBISSTORE database table to have them processed exactly-once by another\n adapter which will read the messages using a {@link MessageStoreListener}.\n This other adapter will process the messages asynchronously and (optionally)\n under transaction control. Duplicate messages are ignored based on the\n messageId (except when onlyStoreWhenMessageIdUnique is set to false), hence\n the sender of the message can retry sending the message until a valid reply\n is received in which case it can be certain that the message is stored in the\n database table IBISSTORE.\n <br/><br/>\n If you have a <code>MessageStoreSender</code> it does not make sense to add a <code>JdbcMessageLog</code>\n or <code>JdbcErrorStorage</code> in the same sender pipe. A <code>MessageStoreSender</code>\n acts as a message log and an error store. It can be useful however to add a message log or error store\n to the adapter around the sender pipe, because errors may occur before the message reaches the sender pipe.\n <br/><br/>\n Example configuration:\n <pre><code>&lt;SenderPipe name=&quot;Send&quot;&gt;\n     &lt;MessageStoreSender\n \t     slotId=&quot;${instance.name}/TestMessageStore&quot;\n \t\t onlyStoreWhenMessageIdUnique=&quot;false&quot; /&gt;\n &lt;/SenderPipe&gt;</code></pre>",
      "parent": "org.frankframework.jdbc.JdbcTransactionalStorage",
      "elementNames": ["MessageStoreSender"],
      "attributes": [
        {
          "name": "sessionKeys",
          "description": "Comma separated list of sessionKey's to be stored together with the message. Please note: corresponding {@link MessageStoreListener} must have the same value for this attribute."
        },
        {
          "name": "onlyStoreWhenMessageIdUnique",
          "description": "If set to <code>true</code>, the message is stored only if the MessageId is not present in the store yet.",
          "default": "<code>true</code>",
          "type": "bool"
        },
        {
          "name": "slotId",
          "mandatory": true,
          "description": "Set the slotId, an identifier to keep separate the messages inserted\n by different MessageStoreSenders.\n <br/>\n This field should be set."
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ],
      "parameters": [
        {
          "name": "messageId",
          "description": "messageId to check for duplicates, when this parameter isn't present the messageId is read from sessionKey messageId"
        }
      ]
    },
    {
      "name": "Module",
      "fullName": "Module",
      "description": "Wrapper element to help split up large configuration files into smaller valid XML files. It may be used as root tag when an XML file contains multiple adapters and/or jobs. The Module element itself does not influence the behavior of Frank configurations.",
      "elementNames": ["Module"]
    },
    {
      "name": "MongoDbSender",
      "fullName": "org.frankframework.mongodb.MongoDbSender",
      "description": "Sender to perform action on a MongoDB database.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["MongoDbSender"],
      "attributes": [
        {
          "name": "datasourceName",
          "description": "The MongoDB datasource",
          "default": "<code>mongodb.datasource.default</code>"
        },
        {
          "name": "database",
          "description": "Database to connect to. Can be overridden by parameter <code>database</code>"
        },
        {
          "name": "collection",
          "description": "Collection to act upon. Can be overridden by parameter <code>collection</code>"
        },
        {
          "name": "action",
          "description": "Action",
          "enum": "org.frankframework.mongodb.MongoDbSender.MongoAction"
        },
        {
          "name": "filter",
          "description": "Filter. Can contain references to parameters between <code>?{</code> and <code>}</code>. Can be overridden by parameter <code>filter</code>"
        },
        {
          "name": "limit",
          "description": "Limit to number of results returned. A value of 0 means 'no limit'. Can be overridden by parameter <code>limit</code>.",
          "default": "0",
          "type": "int"
        },
        {
          "name": "countOnly",
          "description": "Only for find operation: return only the count and not the full document(s)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "outputFormat",
          "description": "OutputFormat",
          "default": "JSON",
          "enum": "org.frankframework.documentbuilder.DocumentFormat"
        },
        {
          "name": "prettyPrint",
          "description": "Format the output in easy legible way (currently only for XML)",
          "type": "bool"
        }
      ],
      "parameters": [
        {
          "name": "database",
          "description": "Database to connect to. Overrides attribute <code>database</code>"
        },
        {
          "name": "collection",
          "description": "Collection to act upon. Overrides attribute <code>collection</code>"
        },
        {
          "name": "filter",
          "description": "Filter. Can contain references to parameters between '?{' and '}'. Overrides attribute <code>filter</code>"
        },
        {
          "name": "limit",
          "description": "Limit to number of results returned. A value of 0 means 'no limit'. Overrides attribute <code>limit</code>"
        }
      ]
    },
    {
      "name": "Monitor",
      "fullName": "org.frankframework.monitoring.Monitor",
      "description": "<p>Example configuration:</p>\n <pre><code>&lt;Monitor name=&quot;Receiver Shutdown&quot; destinations=&quot;MONITOR_LOG&quot;&gt;\n    &lt;AlarmTrigger severity=&quot;WARNING&quot;&gt;\n        &lt;Event&gt;Receiver Shutdown&lt;/Event&gt;\n    &lt;/AlarmTrigger&gt;\n    &lt;ClearingTrigger severity=&quot;WARNING&quot;&gt;\n        &lt;Event&gt;Receiver Shutdown&lt;/Event&gt;\n    &lt;/ClearingTrigger&gt;\n &lt;/Monitor&gt;</code></pre>",
      "elementNames": ["Monitor"],
      "attributes": [
        {
          "name": "destinations"
        },
        {
          "name": "name",
          "description": "The functional name of the object."
        },
        {
          "name": "raised",
          "type": "bool"
        },
        {
          "name": "additionalHitCount",
          "type": "int"
        },
        {
          "name": "type",
          "enum": "org.frankframework.monitoring.EventType"
        },
        {
          "name": "alarmSeverity",
          "enum": "org.frankframework.monitoring.Severity"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "trigger",
          "type": "org.frankframework.monitoring.ITrigger"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Monitoring"
        }
      ]
    },
    {
      "name": "MonitorDestination",
      "fullName": "org.frankframework.monitoring.MonitorDestination",
      "description": "IMonitorAdapter that uses a {@link ISender sender} to send its message.",
      "parent": "org.frankframework.monitoring.AbstractMonitorDestination",
      "elementNames": ["Destination"],
      "children": [
        {
          "multiple": false,
          "roleName": "sender",
          "type": "org.frankframework.core.ISender"
        }
      ]
    },
    {
      "name": "Monitoring",
      "fullName": "org.frankframework.monitoring.MonitorManager",
      "description": "Manager for Monitoring.\n <p>\n Configure/start/stop lifecycles are managed by Spring.",
      "elementNames": ["Monitoring"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "destination",
          "type": "org.frankframework.monitoring.IMonitorDestination"
        },
        {
          "multiple": true,
          "roleName": "monitor",
          "type": "org.frankframework.monitoring.Monitor"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Monitoring"
        }
      ]
    },
    {
      "name": "MqttFacade",
      "fullName": "org.frankframework.extensions.mqtt.MqttFacade",
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "description": "The functional name of the object."
        },
        {
          "name": "timeout",
          "type": "int"
        },
        {
          "name": "keepAliveInterval",
          "type": "int"
        },
        {
          "name": "clientId",
          "mandatory": true,
          "description": "The clientId for this connection. Be aware that each connection (each sender or listener) needs to have a unique clientId. The MQTT broker uses the clientId to hold a persistent session, so it can send any missing messages when you reconnect.\n see <a href=\"https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttClient.html#MqttClient-java.lang.String-java.lang.String-org.eclipse.paho.client.mqttv3.MqttClientPersistence-\" target=\"_blank\">MqttClient(java.lang.String serverURI, java.lang.String clientId, MqttClientPersistence persistence)</a>"
        },
        {
          "name": "brokerUrl",
          "mandatory": true,
          "description": "see <a href=\"https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttClient.html#MqttClient-java.lang.String-java.lang.String-org.eclipse.paho.client.mqttv3.MqttClientPersistence-\" target=\"_blank\">MqttClient(java.lang.String serverURI, java.lang.String clientId, MqttClientPersistence persistence)</a>"
        },
        {
          "name": "topic",
          "mandatory": true,
          "description": "see <a href=\"https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttClient.html#subscribe-java.lang.String-\" target=\"_blank\">MqttClient.subscribe(java.lang.String topicFilter)</a>"
        },
        {
          "name": "qos",
          "description": "see <a href=\"https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttClient.html#MqttClient-java.lang.String-java.lang.String-org.eclipse.paho.client.mqttv3.MqttClientPersistence-\" target=\"_blank\">MqttClient(java.lang.String serverURI, java.lang.String clientId, MqttClientPersistence persistence)</a>",
          "default": "2",
          "type": "int"
        },
        {
          "name": "cleanSession",
          "description": "see <a href=\"https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttConnectOptions.html#setCleanSession-boolean-\" target=\"_blank\">MqttConnectOptions.setCleanSession(boolean cleanSession)</a>",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "persistenceDirectory",
          "description": "Stores inbound and outbound messages while they are in flight on disk storage. Recommended when reliability is paramount. Messages are persisted in memory when empty.\n see <a href=\"https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/persist/MqttDefaultFilePersistence.html\" target=\"_blank\">MqttDefaultFilePersistence</a> and <a href=\"https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttClient.html\" target=\"_blank\">MqttClient</a>"
        },
        {
          "name": "automaticReconnect",
          "description": "see <a href=\"https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttConnectOptions.html#setAutomaticReconnect-boolean-\" target=\"_blank\">MqttConnectOptions.setAutomaticReconnect(boolean automaticReconnect)</a> (apart from this recover job will also try to recover)",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "charset",
          "description": "character encoding of received messages",
          "default": "UTF-8"
        },
        {
          "name": "username"
        },
        {
          "name": "password"
        },
        {
          "name": "authAlias"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "MqttListener",
      "fullName": "org.frankframework.extensions.mqtt.MqttListener",
      "description": "MQTT listener which will connect to a broker and subscribe to a topic.\n\n Links to <a href=\\\"https://www.eclipse.org/paho/files/javadoc\\\" target=\\\"_blank\\\">https://www.eclipse.org/paho/files/javadoc</a> are opened in a new window/tab because the response from eclipse.org contains header X-Frame-Options:SAMEORIGIN which will make the browser refuse to open the link inside this frame.",
      "parent": "org.frankframework.extensions.mqtt.MqttFacade",
      "elementNames": ["MqttListener"]
    },
    {
      "name": "MqttSender",
      "fullName": "org.frankframework.extensions.mqtt.MqttSender",
      "description": "MQTT listener which will connect to a broker and subscribe to a topic.\n\n Links to <a href=\\\"https://www.eclipse.org/paho/files/javadoc\\\" target=\\\"_blank\\\">https://www.eclipse.org/paho/files/javadoc</a> are opened in a new window/tab because the response from eclipse.org contains header X-Frame-Options:SAMEORIGIN which will make the browser refuse to open the link inside this frame.",
      "parent": "org.frankframework.extensions.mqtt.MqttFacade",
      "elementNames": ["MqttSender"],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ]
    },
    {
      "name": "MultipartHttpSender",
      "fullName": "org.frankframework.http.MultipartHttpSender",
      "deprecated": {
        "forRemoval": true,
        "since": "7.8"
      },
      "parent": "org.frankframework.http.HttpSender",
      "elementNames": ["MultipartHttpSender"]
    },
    {
      "name": "NetStorageSender",
      "fullName": "org.frankframework.extensions.akamai.NetStorageSender",
      "description": "Sender for Akamai NetStorage (HTTP based).\n\n <p>See {@link AbstractHttpSender} for more arguments and parameters!</p>\n\n\n <p><b>AuthAlias:</b></p>\n <p>If you do not want to specify the nonce and the access token used to authenticate with Akamai, you can use the authalias property. The username\n represents the nonce and the password the access token.</p>",
      "parent": "org.frankframework.http.AbstractHttpSender",
      "elementNames": ["NetStorageSender"],
      "attributes": [
        {
          "name": "hashAlgorithm",
          "description": "Only works in combination with the UPLOAD action. If set, and not specified as parameter, the sender will sign the file to be uploaded.",
          "enum": "org.frankframework.extensions.akamai.HashAlgorithm"
        },
        {
          "name": "action",
          "description": "NetStorage action to be used",
          "enum": "org.frankframework.extensions.akamai.NetStorageSender.Action"
        },
        {
          "name": "actionVersion",
          "description": "At the time of writing, NetStorage only supports version 1",
          "default": "1",
          "type": "int"
        },
        {
          "name": "cpCode",
          "description": "NetStorage CP Code of the storage group"
        },
        {
          "name": "url",
          "description": "The destination URL for the Akamai NetStorage. (Only the hostname, without CpCode; eq. xyz-nsu.akamaihd.net)"
        },
        {
          "name": "nonce",
          "description": "Login is done via a Nonce and AccessToken"
        },
        {
          "name": "signVersion",
          "description": "Version to validate queries made to NetStorage backend.",
          "default": "5",
          "type": "int"
        },
        {
          "name": "accessToken",
          "description": "Login is done via a Nonce and AccessToken"
        },
        {
          "name": "rootDir",
          "description": "Root directory (appended to the url + cpCode)"
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain credentials for nonce (username) and accesstoken (password)"
        }
      ],
      "parametersDescription": "Some actions require specific parameters to be set. Optional parameters for the <code>UPLOAD</code> action are: md5, sha1, sha256 and mtime."
    },
    {
      "name": "NumberParameter",
      "fullName": "org.frankframework.parameters.NumberParameter",
      "parent": "org.frankframework.parameters.AbstractParameter",
      "elementNames": ["NumberParam"],
      "attributes": [
        {
          "name": "decimalSeparator",
          "description": "Separate the integer part from the fractional part of a number.",
          "default": "system default"
        },
        {
          "name": "groupingSeparator",
          "description": "In the United States, the comma is typically used for the grouping separator; however, several publication standards follow international standards in using either a space or a thin space character.",
          "default": "system default"
        },
        {
          "name": "maxInclusive",
          "description": "Used in combination with type <code>number</code>; if set and the value of the parameter exceeds this maximum value, this maximum value is taken"
        },
        {
          "name": "minInclusive",
          "description": "Used in combination with type <code>number</code>; if set and the value of the parameter falls short of this minimum value, this minimum value is taken"
        }
      ]
    },
    {
      "name": "ObfuscatePipe",
      "fullName": "org.frankframework.extensions.tibco.pipes.ObfuscatePipe",
      "description": "Pipe that performs obfuscation on a message, using the tibcrypt library.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["ObfuscatePipe"],
      "attributes": [
        {
          "name": "direction",
          "default": "OBFUSCATE",
          "enum": "org.frankframework.extensions.tibco.pipes.ObfuscatePipe.Direction"
        }
      ]
    },
    {
      "name": "OutputFields",
      "fullName": "org.frankframework.batch.OutputfieldsPart",
      "elementNames": ["OutputFields"],
      "attributes": [
        {
          "name": "value"
        },
        {
          "name": "description"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Batch"
        }
      ]
    },
    {
      "name": "PGPPipe",
      "fullName": "org.frankframework.pipes.PGPPipe",
      "description": "<p>Performs various PGP (Pretty Good Privacy) actions such as Encrypt, Sign, Decrypt, Verify.</p>\n <p>To use this pipe action parameter has to be set to one of the actions above.</p>\n <p>\n <strong>Note:</strong> When secret key is required in any of the actions,\n the related public key should also be included in public keys.\n </p>\n\n <p>\n <strong>Note:</strong> For fields that require multiple input\n (such as recipients, senders and publicKey -in certain actions-)\n you can seperate multiple values with \\\";\\\" (semicolon).\n </p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["PGPPipe"],
      "attributes": [
        {
          "name": "action",
          "description": "Action to be taken when pipe is executed.",
          "enum": "org.frankframework.pipes.PGPPipe.Action"
        },
        {
          "name": "recipients",
          "description": "Recipients to be used during encryption stage. If multiple, separate with ';' (semicolon)"
        },
        {
          "name": "verificationAddresses",
          "description": "Emails of the senders. This will be used to verify that all the senders have signed the given message.\n If not set, and the action is verify; this pipe will validate that at least one person has signed.\n For signing action, it needs to be set to the email that was used to generate the private key\n \"that is being used for this process."
        },
        {
          "name": "secretKey",
          "description": "Path to the private key. It will be used when signing or decrypting."
        },
        {
          "name": "secretPassword",
          "description": "Password for the private key."
        },
        {
          "name": "publicKeys",
          "description": "Path to the recipient's public key. It will be used for encryption and verification."
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "ParallelSenders",
      "fullName": "org.frankframework.senders.ParallelSenders",
      "description": "Collection of Senders, that are executed all at the same time.",
      "parent": "org.frankframework.senders.SenderSeries",
      "elementNames": ["ParallelSendersSender"],
      "attributes": [
        {
          "name": "maxConcurrentThreads",
          "description": "Set the upper limit to the amount of concurrent threads that can be run simultaneously. Use 0 to disable.",
          "default": "0",
          "type": "int"
        }
      ],
      "children": [
        {
          "mandatory": true,
          "multiple": true,
          "roleName": "sender",
          "description": "one or more specifications of senders. Each will receive the same input message, to be processed in parallel",
          "type": "org.frankframework.core.ISender"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ]
    },
    {
      "name": "Parameter",
      "fullName": "org.frankframework.parameters.Parameter",
      "description": "Placeholder class to allow legacy configuration notations <code>&lt;param type='number' /&gt;</code> in the new Frank!Config XSD.\n <p>\n The attribute <code>type</code> has been removed in favor of explicit ParameterTypes such as: <code>NumberParameter</code>, <code>DateParameter</code> and <code>BooleanParameter</code>.\n Using the new elements enables the use of auto-completion for the specified type.",
      "parent": "org.frankframework.parameters.AbstractParameter",
      "elementNames": ["Param"],
      "attributes": [
        {
          "name": "type",
          "description": "The target data type of the parameter, related to the database or XSLT stylesheet to which the parameter is applied.",
          "default": "STRING",
          "enum": "org.frankframework.parameters.ParameterType"
        }
      ]
    },
    {
      "name": "PasswordGeneratorPipe",
      "fullName": "org.frankframework.pipes.PasswordGeneratorPipe",
      "description": "Generates a random password.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["PasswordGeneratorPipe"],
      "attributes": [
        {
          "name": "useSecureRandom",
          "deprecated": {
            "forRemoval": true,
            "since": "8.2.0",
            "description": "the current implementation always uses SecureRandom. Please remove this attribute from the Configuration."
          },
          "description": "Whether the secureRandom algorithm is used.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "lCharacters",
          "description": "The lowercase characters to use.",
          "default": "('a'..'z')"
        },
        {
          "name": "uCharacters",
          "description": "The uppercase characters to use.",
          "default": "('A'..'Z')"
        },
        {
          "name": "numbers",
          "description": "The numbers to use.",
          "default": "('0'..'9')"
        },
        {
          "name": "signs",
          "description": "The signs to use.",
          "default": "(;:_%$#@!&gt;&lt;)"
        },
        {
          "name": "numOfLCharacters",
          "description": "The number of lowercase characters in the generated password.",
          "default": "2",
          "type": "int"
        },
        {
          "name": "numOfDigits",
          "description": "The number of digits in the generated password.",
          "default": "2",
          "type": "int"
        },
        {
          "name": "numOfSigns",
          "description": "The number of sign characters in the generated password.",
          "default": "2",
          "type": "int"
        },
        {
          "name": "numOfUCharacters",
          "description": "The number of uppercase characters in the generated password.",
          "default": "2",
          "type": "int"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "PasswordHashPipe",
      "fullName": "org.frankframework.pipes.PasswordHashPipe",
      "description": "Hash a password or validate a password against a hash using PasswordHash.java\n from <a href=\\\"https://crackstation.net/hashing-security.htm\\\">https://crackstation.net/hashing-security.htm</a>.\n Input of the pipe is expected to be the password. In case hashSessionKey\n isn't used a hash of the password is returned. In case hashSessionKey is used\n it is validated against the hash in the session key which will determine\n the forward to be used (success or failure).",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["PasswordHashPipe"],
      "attributes": [
        {
          "name": "hashSessionKey",
          "description": "name of sessionkey that holds the hash which will be used to validate the password (input of the pipe)"
        },
        {
          "name": "rounds",
          "type": "int"
        },
        {
          "name": "roundsSessionKey"
        }
      ],
      "forwards": [
        {
          "name": "failure",
          "description": "when hashSessionKey is used and password doesn't validate against the hash"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "PdfPipe",
      "fullName": "org.frankframework.extensions.aspose.pipe.PdfPipe",
      "description": "Converts files to pdf type. This pipe has two actions convert and combine.\n With combine action you can attach files into main pdf file.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["PdfPipe"],
      "attributes": [
        {
          "name": "action",
          "enum": "org.frankframework.extensions.aspose.pipe.PdfPipe.DocumentAction"
        },
        {
          "name": "mainDocumentSessionKey",
          "description": "session key that contains the document that the attachments will be attached to. Only used when action is set to 'combine'",
          "default": "defaultMainDocumentSessionKey"
        },
        {
          "name": "conversionResultDocumentSessionKey",
          "description": "The session key used to store the main conversion result document. Only to be used when action is set to 'convert'.",
          "default": "documents"
        },
        {
          "name": "conversionResultFilesSessionKey",
          "description": "The session-key in which result files are stored when documents are converted to PDF.\n\n <p>\n Conversion result files are stored as messages in the session, under keys numbered based\n on the value set here. If {@link #isSaveSeparate()} is <code>false</code> then only the main\n document is stored in the session, if it is <code>true</code> then each attachment is stored\n separately.\n </p>\n <p>\n     For example, if a file is converted that has 2 attachments and {@link #setSaveSeparate(boolean)}\n     is set to <code>true</code> then there will be the following 3 session keys (assuming the default value\n     is unchanged):\n     <ol>\n         <li><code>pdfConversionResultFiles1</code></li>\n         <li><code>pdfConversionResultFiles2</code></li>\n         <li><code>pdfConversionResultFiles3</code></li>\n     </ol>\n     Each session key will contain a {@link FileMessage} referencing the contents of that PDF.\n </p>",
          "default": "pdfConversionResultFiles"
        },
        {
          "name": "filenameToAttachSessionKey",
          "description": "session key that contains the filename to be attached. Only used when the action is set to 'combine'",
          "default": "defaultFileNameToAttachSessionKey"
        },
        {
          "name": "fontsDirectory",
          "description": "fonts folder to load the fonts. If not set then a temporary folder will be created to extract fonts from fonts.zip everytime. Having fontsDirectory to be set will improve startup time"
        },
        {
          "name": "unpackCommonFontsArchive",
          "type": "bool"
        },
        {
          "name": "charset",
          "description": "charset to be used to decode the given input message in case the input is not binary but character stream",
          "default": "UTF-8"
        },
        {
          "name": "license",
          "description": "aspose license location including the file name. It can also be used without license but there some restrictions on usage. If license is in resource, license attribute can be license file name. If the license is in somewhere in filesystem then it should be full path to file including filename and starting with file://// prefix. classloader.allowed.protocols property should contain 'file' protocol"
        },
        {
          "name": "saveSeparate",
          "description": "when sets to false, converts the file including the attachments attached to the main file. when it is true, saves each attachment separately",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "pdfOutputLocation",
          "description": "directory to save resulting pdf files after conversion. If not set then a temporary directory will be created and the conversion results will be stored in that directory."
        },
        {
          "name": "loadExternalResources",
          "description": "when set to true, external resources, such as stylesheets and images found in HTML pages, will be loaded from the internet",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "Pipeline",
      "fullName": "org.frankframework.core.PipeLine",
      "description": "Required in each {@link Adapter} to transform incoming messages. A pipeline\n is a sequence of pipes. A\n pipeline also defines its allowed end states using the <code>&lt;Exits&gt;</code>\n tag.\n <br/><br/>\n The pipes in a {@link PipeLine} may not be executed in sequential order, see {@link PipeForward}.\n <br/><br/>\n A pipeline gathers statistics about the messages it processes.\n <br/><br/>\n In the AppConstants there may be a property named <code>log.logIntermediaryResults</code> (true/false)\n which indicates whether the intermediary results (between calling pipes) have to be logged.\n <br/><br/>\n <b>Transaction control</b><br/><br/>\n THE FOLLOWING TO BE UPDATED, attribute 'transacted' replaced by 'transactionAttribute'\n\n If {@link #setTransacted(boolean) transacted} is set to <code>true</code>, messages will be processed\n under transaction control. Processing by XA-compliant pipes (i.e. Pipes that implement the\n IXAEnabled-interface, set their transacted-attribute to <code>true</code> and use XA-compliant\n resources) will then either be committed or rolled back in one transaction.\n\n If {@link #setTransacted(boolean) transacted} is set to <code>true</code>, either an existing transaction\n (started by a transactional receiver) is joined, or new one is created (if the message processing request\n is not initiated by a receiver under transaction control.\n Messages are only committed or rolled back by the Pipeline if it started the transaction itself. If\n the pipeline joined an existing transaction, the commit or rollback is left to the object that started\n the transaction, i.e. the receiver. In the latter case the pipeline can indicate to the receiver that the\n transaction should be rolled back (by calling UserTransaction.setRollBackOnly()).\n\n The choice whether to either commit (by Pipeline or Receiver) or rollback (by Pipeline or Receiver)\n is made as follows:\n\n If the processing of the message concluded without exceptions and the status of the transaction is\n STATUS_ACTIVE (i.e. normal) the transaction will be committed. Otherwise it will be rolled back,\n or marked for roll back by the calling party.",
      "parent": "org.frankframework.core.TransactionAttributes",
      "elementNames": ["Pipeline"],
      "attributes": [
        {
          "name": "firstPipe",
          "description": "Name of the first pipe to execute when a message is to be processed",
          "default": "first pipe of the pipeline"
        },
        {
          "name": "maxThreads",
          "description": "Maximum number of threads that may execute this Pipeline simultaneously, use 0 to disable limit",
          "default": "0",
          "type": "int"
        },
        {
          "name": "storeOriginalMessageWithoutNamespaces",
          "description": "If set <code>true</code> the original message without namespaces (and prefixes) is stored under the session key originalMessageWithoutNamespaces",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "messageSizeWarn",
          "description": "If messageSizeWarn>=0 and the size of the input or result pipe message exceeds the value specified a warning message is logged. You can specify the value with the suffixes <code>KB</code>, <code>MB</code> or <code>GB</code>",
          "default": "application default (30MB)"
        },
        {
          "name": "transformNullMessage",
          "description": "when specified and <code>null</code> is received as a message the message is changed to the specified value"
        },
        {
          "name": "adapterToRunBeforeOnEmptyInput",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "Please use an XmlIf-pipe and call a sub-adapter to retrieve a new/different response"
          },
          "description": "when specified and an empty message is received the specified adapter is run before passing the message (response from specified adapter) to the pipeline"
        },
        {
          "name": "expectsSessionKeys",
          "description": "The pipeline of this adapter expects to use the following session keys to be set on call. This\n is for adapters that are called as sub-adapters from other adapters. This serves both for documentation,\n so callers can see what session keys to set on call, and for verification that those session keys are present."
        }
      ],
      "children": [
        {
          "multiple": false,
          "roleName": "inputValidator",
          "description": "Request validator, or combined validator for request and response",
          "type": "org.frankframework.core.IValidator"
        },
        {
          "multiple": false,
          "roleName": "outputValidator",
          "description": "Optional pipe to validate the response. Can be specified if the response cannot be validated by the request validator",
          "type": "org.frankframework.core.IValidator"
        },
        {
          "multiple": false,
          "roleName": "inputWrapper",
          "description": "Optional pipe to extract the request message from its envelope",
          "type": "org.frankframework.core.IWrapperPipe"
        },
        {
          "multiple": false,
          "roleName": "outputWrapper",
          "description": "Optional pipe to wrap the response message in an envelope",
          "type": "org.frankframework.core.IWrapperPipe"
        },
        {
          "multiple": false,
          "roleName": "exits",
          "description": "PipeLine exits. If no exits are specified, a default one is created with name=<code>READY</code> and state=<code>SUCCESS</code>",
          "type": "org.frankframework.core.PipeLineExits"
        },
        {
          "deprecated": true,
          "multiple": true,
          "roleName": "exit",
          "description": "PipeLine exits.",
          "type": "org.frankframework.core.PipeLineExit"
        },
        {
          "multiple": false,
          "roleName": "globalForwards",
          "description": "Optional global forwards that will be added to every pipe, when the forward name has not been explicitly set.\n For example the <code>&lt;forward name=\"exception\" path=\"error_exception\" /&gt;</code>, which will add the <code>exception</code> forward to every pipe in the pipeline.",
          "type": "org.frankframework.core.PipeForwards"
        },
        {
          "deprecated": true,
          "multiple": true,
          "roleName": "forward",
          "type": "org.frankframework.core.PipeForward"
        },
        {
          "multiple": false,
          "roleName": "locker",
          "description": "Optional Locker, to avoid parallel execution of the PipeLine by multiple threads on multiple servers.\n The Pipeline is NOT executed (and is considered to have ended successfully) when the lock cannot be obtained,\n e.g. in case another thread, may be in another server, holds the lock and does not release it in a timely manner.\n If only the number of threads executing this PipeLine needs to be limited, the attribute maxThreads can be set instead, avoiding the database overhead.",
          "type": "org.frankframework.util.Locker"
        },
        {
          "multiple": false,
          "roleName": "cache",
          "description": "Cache of results",
          "type": "org.frankframework.cache.ICache"
        },
        {
          "mandatory": true,
          "multiple": true,
          "roleName": "pipe",
          "description": "Register a Pipe at this pipeline.\n The name is also put in the globalForwards table (with\n forward-name=pipename and forward-path=pipename, so that\n pipe can look for a specific pipe-name. If already a globalForward\n exists under that name, the pipe is NOT added, allowing globalForwards\n to prevail.",
          "type": "org.frankframework.core.IPipe"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "PostboxRetrieverPipe",
      "fullName": "org.frankframework.pipes.PostboxRetrieverPipe",
      "deprecated": {
        "forRemoval": true,
        "since": "7.7.0"
      },
      "description": "Retrieves a message using an {@link IPostboxListener}.\n\n Note that most listeners allow you to specify a timeout. The timeout has the following\n meaning:\n <ul>\n <li>&lt;0 = no wait</li>\n <li>0 = block until message available</li>\n <li>&gt;= 0 maximum wait in milliseconds<li>\n </ul>\n\n <tr><th>nested elements</th><th>description</th></tr>\n <tr><td>{@link IPostboxListener listener}</td><td>specification of postbox listener to retrieve messages from</td></tr>\n </table>\n </p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["PostboxRetrieverPipe"],
      "attributes": [
        {
          "name": "resultOnEmptyPostbox",
          "description": "result when no object is on postbox",
          "default": "empty postbox"
        }
      ],
      "children": [
        {
          "multiple": false,
          "roleName": "listener",
          "type": "org.frankframework.core.IPostboxListener"
        }
      ]
    },
    {
      "name": "PullingJmsListener",
      "fullName": "org.frankframework.jms.PullingJmsListener",
      "description": "A true multi-threaded {@link IPullingListener Listener}-class.\n <br/>\n\n Since version 4.1, Ibis supports distributed transactions using the XA-protocol. This feature is controlled by the\n {@link #setTransacted(boolean) transacted} attribute. If this is set to <code>true</code>, received messages are\n committed or rolled back, possibly together with other actions, by the receiver or the pipeline.\n In case of a failure, all actions within the transaction are rolled back.\n\n <p><b>Using jmsTransacted and acknowledgement</b><br/>\n If jmsTransacted is set <code>true</code>: it should ensure that a message is received and processed on a both or nothing basis.\n IBIS will commit the the message, otherwise perform rollback. However using jmsTransacted, IBIS does not bring transactions within\n the adapters under transaction control, compromising the idea of atomic transactions. In the roll-back situation messages sent to\n other destinations within the Pipeline are NOT rolled back if jmsTransacted is set <code>true</code>! In the failure situation the\n message is therefore completely processed, and the roll back does not mean that the processing is rolled back! To obtain the correct\n (transactional) behaviour, {@link #setTransacted(boolean) transacted} should be used instead of {@link #setJmsTransacted(boolean) listener.transacted}.\n<p>\n Setting {@link #setAcknowledgeMode(AcknowledgeMode) listener.acknowledgeMode} to \\\"auto\\\" means that messages are allways acknowledged (removed from\n the queue, regardless of what the status of the Adapter is. \\\"client\\\" means that the message will only be removed from the queue\n when the state of the Adapter equals the success state.\n The \\\"dups\\\" mode instructs the session to lazily acknowledge the delivery of the messages. This is likely to result in the\n delivery of duplicate messages if JMS fails. It should be used by consumers who are tolerant in processing duplicate messages.\n In cases where the client is tolerant of duplicate messages, some enhancement in performance can be achieved using this mode,\n since a session has lower overhead in trying to prevent duplicate messages.\n </p>\n <p>The setting for {@link #setAcknowledgeMode(AcknowledgeMode) listener.acknowledgeMode} will only be processed if\n the setting for {@link #setTransacted(boolean) listener.transacted} as well as for\n {@link #setJmsTransacted(boolean) listener.jmsTransacted} is false.</p>\n\n <p>If {@link #setUseReplyTo(boolean) useReplyTo} is set and a replyTo-destination is\n specified in the message, the JmsListener sends the result of the processing\n in the pipeline to this destination. Otherwise the result is sent using the (optionally)\n specified {@link #setSender(ISender) Sender}, that in turn sends the message to\n whatever it is configured to.</p>\n </p>\n <p><b>Notice:</b> the JmsListener is ONLY capable of processing\n <code>jakarta.jms.TextMessage</code>s <br/><br/>\n </p>",
      "parent": "org.frankframework.jms.AbstractJmsListener",
      "elementNames": ["PullingJmsListener"]
    },
    {
      "name": "PushingJmsListener",
      "fullName": "org.frankframework.jms.PushingJmsListener",
      "description": "JMSListener re-implemented as a pushing listener rather than a pulling listener.\n The JMS messages have to come in from an external source: an MDB or a Spring\n message container.\n\n This version of the <code>JmsListener</code> supports distributed transactions using the XA-protocol.\n No special action is required to have the listener join the transaction.\n\n <p><b>Using jmsTransacted and acknowledgement</b><br/>\n If jmsTransacted is set <code>true</code>, it should ensure that a message is received and processed on\n a both or nothing basis. IBIS will commit the the message, otherwise perform rollback. However, using\n jmsTransacted, IBIS does not bring transactions within the adapters under transaction control,\n compromising the idea of atomic transactions. In the roll-back situation messages sent to other\n destinations within the Pipeline are NOT rolled back if jmsTransacted is set <code>true</code>! In\n the failure situation the message is therefore completely processed, and the roll back does not mean\n that the processing is rolled back! To obtain the correct (transactional) behaviour, set\n <code>transacted</code>=\\\"true\\\" for the enclosing Receiver. Do not use jmsTransacted for any new situation.\n\n </p><p>\n Setting {@link #setAcknowledgeMode(AcknowledgeMode) listener.acknowledgeMode} to \\\"auto\\\" means that messages are allways acknowledged (removed from\n the queue, regardless of what the status of the Adapter is. \\\"client\\\" means that the message will only be removed from the queue\n when the state of the Adapter equals the success state.\n The \\\"dups\\\" mode instructs the session to lazily acknowledge the delivery of the messages. This is likely to result in the\n delivery of duplicate messages if JMS fails. It should be used by consumers who are tolerant in processing duplicate messages.\n In cases where the client is tolerant of duplicate messages, some enhancement in performance can be achieved using this mode,\n since a session has lower overhead in trying to prevent duplicate messages.\n </p>\n <p>The setting for {@link #setAcknowledgeMode(AcknowledgeMode) listener.acknowledgeMode} will only be processed if\n the setting for {@link #setTransacted(boolean) listener.transacted} as well as for\n {@link #setJmsTransacted(boolean) listener.jmsTransacted} is false.</p>\n\n <p>If {@link #setUseReplyTo(boolean) useReplyTo} is set and a replyTo-destination is\n specified in the message, the JmsListener sends the result of the processing\n in the pipeline to this destination. Otherwise the result is sent using the (optionally)\n specified {@link #setSender(ISender) Sender}, that in turn sends the message to\n whatever it is configured to.</p>\n\n <p><b>Notice:</b> the JmsListener is ONLY capable of processing\n {@link jakarta.jms.TextMessage}s and {@link jakarta.jms.BytesMessage}<br/><br/>\n </p>",
      "parent": "org.frankframework.jms.AbstractJmsListener",
      "elementNames": ["PushingJmsListener"],
      "attributes": [
        {
          "name": "destinationName",
          "mandatory": true,
          "description": "Name of the JMS destination (queue or topic) to use"
        },
        {
          "name": "cacheMode",
          "enum": "org.frankframework.core.IListenerConnector.CacheMode"
        },
        {
          "name": "pollGuardInterval",
          "description": "Interval <i>in milliseconds</i> for the poll guard to check whether a successful poll was done by the receive\n (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. If polling has stopped this will be logged\n and the listener will be stopped and started in an attempt to workaround problems with polling.\n Polling might stop due to bugs in the JMS driver/implementation which should be fixed by the supplier. As the poll time includes reading\n and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence\n while messages are being processed the check on last successful poll will be skipped. Set to -1 to disable.",
          "default": "ten times the specified timeout",
          "type": "int"
        }
      ]
    },
    {
      "name": "PushingListenerAdapter",
      "fullName": "org.frankframework.http.PushingListenerAdapter",
      "description": "Baseclass of a {@link IPushingListener IPushingListener} that enables a {@link Receiver}\n to receive messages from Servlets.",
      "elementNames": ["PushingListenerAdapterListener"],
      "attributes": [
        {
          "name": "name",
          "description": "Name of the listener as known to the adapter"
        },
        {
          "name": "applicationFaultsAsExceptions",
          "type": "bool"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "PutInSession",
      "fullName": "org.frankframework.pipes.PutInSession",
      "description": "Puts the input or the <code>{@link #setValue(String) value}</code> in the PipeLineSession, under the key specified by\n <code>{@link #setSessionKey(String) sessionKey}</code>. Additionally, stores parameter values in the PipeLineSession.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["PutInSessionPipe"],
      "attributes": [
        {
          "name": "sessionKey",
          "description": "Key of the session variable to store the input in"
        },
        {
          "name": "value",
          "description": "Value to store in the <code>pipeLineSession</code>. If not set, the input of the pipe is stored"
        }
      ],
      "parametersDescription": "the result of each parameter defined will be we stored in the PipeLineSession, under the key specified by the parameter name",
      "labels": [
        {
          "label": "EIP",
          "value": "Session"
        }
      ]
    },
    {
      "name": "PutParametersInSession",
      "fullName": "org.frankframework.pipes.PutParametersInSession",
      "deprecated": {
        "forRemoval": true,
        "since": "7.7.0",
        "description": "Please replace with PutInSessionPipe"
      },
      "description": "Stores parameter values in the PipeLineSession.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["PutParametersInSessionPipe"],
      "parametersDescription": "the result of each parameter defined will be we stored in the PipeLineSession, under the key specified by the parameter name"
    },
    {
      "name": "PutSystemDateInSession",
      "fullName": "org.frankframework.pipes.PutSystemDateInSession",
      "description": "Puts the system date/time under a key in the {@link PipeLineSession pipeLineSession}.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["PutSystemDateInSessionPipe"],
      "attributes": [
        {
          "name": "sessionKey",
          "description": "Key of session variable to store systemdate in",
          "default": "systemDate"
        },
        {
          "name": "dateFormat",
          "description": "Format to store date in",
          "default": "full ISO format: DateUtils.fullIsoFormat"
        },
        {
          "name": "timeZone",
          "description": "Time zone to use for the formatter",
          "default": "the default time zone for the JVM"
        },
        {
          "name": "sleepWhenEqualToPrevious",
          "description": "Set to a time <i>in milliseconds</i> to create a value that is different to the previous returned value by a PutSystemDateInSession pipe in\n this virtual machine or <code>-1</code> to disable. The thread will sleep for the specified time before recalculating a new value. Set the\n timezone to a value without Daylight Saving Time (like GMT+1) to prevent this pipe to generate two equal value's when the clock is set back.\n <b>note:</b> When you're looking for a GUID parameter for your XSLT it might be better to use\n &lt;param name=&quot;guid&quot; pattern=&quot;{hostname}_{uid}&quot;/&gt;, see {@link Parameter}.",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "returnFixedDate",
          "description": "If <code>true</code>, the date/time returned will always be <code>2001-12-17 09:30:47</code> (for testing purposes only). It is overridden by the value of the pipelinesession key <code>stub4testtool.fixeddate</code> when it exists",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "getCurrentTimeStampInMillis",
          "description": "If set to 'true' then current time stamp in millisecond will be stored in the sessionKey",
          "default": "false",
          "type": "bool"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Session"
        }
      ]
    },
    {
      "name": "Receiver",
      "fullName": "org.frankframework.receivers.Receiver",
      "description": "Wrapper for a listener that specifies a channel for the incoming messages of a specific {@link Adapter}.\n By choosing a listener, the Frank developer determines how the messages are received.\n For example, an {@link org.frankframework.http.rest.ApiListener} receives RESTful HTTP requests and a\n {@link JavaListener} receives messages from direct Java calls.\n <br/><br/>\n Apart from wrapping the listener, a {@link Receiver} can be configured\n to store received messages and to keep track of the processed / failed\n status of these messages.\n <br/><br/>\n There are two kinds of listeners: synchronous listeners and asynchronous listeners.\n Synchronous listeners are expected to return a response. The system that triggers the\n receiver typically waits for a response before proceeding its operation. When a\n {@link org.frankframework.http.rest.ApiListener} receives a HTTP request, the listener is expected to return a\n HTTP response. Asynchronous listeners are not expected to return a response. The system that\n triggers the listener typically continues without waiting for the adapter to finish. When a\n receiver contains an asynchronous listener, it can have a sender that sends the transformed\n message to its destination. Receivers with an asynchronous listener can also have an error sender that is used\n by the receiver to send error messages. In other words: if the result state is SUCCESS then the\n message is sent by the ordinary sender, while the error sender is used if the result state\n is ERROR.\n <br/><br/>\n <b>Transaction control</b><br/><br/>\n If {@link #setTransacted(boolean) transacted} is set to <code>true</code>, messages will be received and processed under transaction control.\n This means that after a message has been read and processed and the transaction has ended, one of the following apply:\n <table border=\\\"1\\\">\n <tr><th>situation</th><th>input listener</th><th>Pipeline</th><th>inProcess storage</th><th>summary of effect</th></tr>\n <tr><td>successful</td><td>message read and committed</td><td>message processed</td><td>unchanged</td><td>message processed</td></tr>\n <tr><td>procesing failed</td><td>message read and committed</td><td>message processing failed and rolled back</td><td>unchanged</td><td>message only transferred from listener to errroSender</td></tr>\n <tr><td>listening failed</td><td>unchanged: listening rolled back</td><td>no processing performed</td><td>unchanged</td><td>no changes, input message remains on input available for listener</td></tr>\n <tr><td>transfer to inprocess storage failed</td><td>unchanged: listening rolled back</td><td>no processing performed</td><td>unchanged</td><td>no changes, input message remains on input available for listener</td></tr>\n </table>\n If the application or the server crashes in the middle of one or more transactions, these transactions\n will be recovered and rolled back after the server/application is restarted. Then always exactly one of\n the following applies for any message touched at any time by Ibis by a transacted receiver:\n <ul>\n <li>It is processed correctly by the pipeline and removed from the input-queue,\n     not present in inProcess storage</li>\n <li>It is not processed at all by the pipeline, or processing by the pipeline has been rolled back;\n     the message is removed from the input queue and either (one of) still in inProcess storage</li>\n </ul>\n\n <p><b>commit or rollback</b><br/>\n If {@link #setTransacted(boolean) transacted} is set to <code>true</code>, messages will be either committed or rolled back.\n All message-processing transactions are committed, unless one or more of the following apply:\n <ul>\n <li>The PipeLine is transacted and the exitState of the pipeline is not equal to SUCCESS</li>\n <li>a PipeRunException or another runtime-exception has been thrown by any Pipe or by the PipeLine</li>\n <li>the setRollBackOnly() method has been called on the userTransaction (not accessible by Pipes)</li>\n </ul>\n </p>",
      "parent": "org.frankframework.core.TransactionAttributes",
      "elementNames": ["Receiver"],
      "attributes": [
        {
          "name": "name",
          "description": "Sets the name of the Receiver, as known to the Adapter.\n If the listener implements the {@link INamedObject name} interface and <code>getName()</code>\n of the listener is empty, the name of this object is given to the listener."
        },
        {
          "name": "onError",
          "description": "One of 'continue', 'recover' or 'close'. Controls the behaviour of the Receiver, when it encounters an error during processing of a message.",
          "default": "CONTINUE",
          "enum": "org.frankframework.receivers.Receiver.OnError"
        },
        {
          "name": "numThreads",
          "description": "The number of threads that may execute a Pipeline concurrently (only for pulling listeners)",
          "default": "1",
          "type": "int"
        },
        {
          "name": "numThreadsPolling",
          "description": "The number of threads that are actively polling for messages concurrently. '0' means 'limited only by <code>numthreads</code>' (only for pulling listeners)",
          "default": "1",
          "type": "int"
        },
        {
          "name": "pollInterval",
          "description": "The number of seconds waited after an unsuccessful poll attempt, before another poll attempt is made. Only for polling listeners, not for e.g. jms, webservice or javaListeners",
          "default": "10",
          "type": "int"
        },
        {
          "name": "startTimeout",
          "description": "timeout (in seconds) to start receiver. If this timeout is exceeded, the Receiver startup is\n  aborted and all resources closed and the receiver will be in state <code>EXCEPTION_STARTING</code>\n  and a new start command may be issued again.",
          "type": "int"
        },
        {
          "name": "stopTimeout",
          "description": "timeout (in seconds) to stop receiver. If this timeout is exceeded, stopping will be aborted\n  and the receiver will be in state <code>EXCEPTION_STOPPING</code>.\n  The receiver will no longer be running but some resources might not have been cleaned up properly.",
          "type": "int"
        },
        {
          "name": "checkForDuplicates",
          "description": "If set to <code>true</code>, each message is checked for presence in the messageLog. If already present, it is not processed again. Only required for non XA compatible messaging. Requires messageLog!",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "checkForDuplicatesMethod",
          "description": "(Only used when <code>checkForDuplicates=true</code>) Indicates whether the messageid or the correlationid is used for checking presence in the message log",
          "default": "MESSAGEID",
          "enum": "org.frankframework.receivers.Receiver.CheckForDuplicatesMethod"
        },
        {
          "name": "maxDeliveries",
          "deprecated": {
            "forRemoval": true,
            "since": "9.0",
            "description": "This property has been deprecated, please use maxRetries instead."
          },
          "description": "The maximum retry count after which to stop processing the message. If equal to or lower than 0, the retry count is ignored. This property is\n deprecated -- use <code>maxRetries</code> instead. Until removal of this property, the code will treat this property as the same as <code>maxRetries</code>. If\n both are set in a configuration, then the highest value is used.",
          "type": "int"
        },
        {
          "name": "maxRetries",
          "description": "The number of times a processing attempt is automatically retried after an exception is caught or rollback is experienced. If <code>maxRetries &lt; 0</code> the number of attempts is infinite",
          "default": "1, or 3 for JMS Listeners or other listeners implementing {@link IKnowsDeliveryCount}.",
          "type": "int"
        },
        {
          "name": "processResultCacheSize",
          "description": "Size of the cache to keep process results, used by maxRetries",
          "default": "100",
          "type": "int"
        },
        {
          "name": "returnedSessionKeys",
          "deprecated": {
            "forRemoval": true,
            "since": "7.9.0",
            "description": "attribute is no longer used. Please use attribute returnedSessionKeys of the JavaListener if the set of sessionsKeys that can be returned to callers session must be limited."
          }
        },
        {
          "name": "correlationIDXPath",
          "description": "XPath expression to extract correlationId from message"
        },
        {
          "name": "correlationIDNamespaceDefs",
          "description": "Namespace definitions for correlationIDXPath. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions"
        },
        {
          "name": "correlationIDStyleSheet",
          "description": "Stylesheet to extract correlationID from message"
        },
        {
          "name": "labelXPath",
          "description": "XPath expression to extract label from message"
        },
        {
          "name": "labelNamespaceDefs",
          "description": "Namespace definitions for labelXPath. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions"
        },
        {
          "name": "labelStyleSheet",
          "description": "Stylesheet to extract label from message"
        },
        {
          "name": "chompCharSize",
          "description": "If set (>=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)"
        },
        {
          "name": "elementToMove",
          "description": "If set, the character data in this XML element is stored inside a session key and in the message it is replaced by a reference to this session key: <code>{sessionKey: elementToMoveSessionKey}</code>"
        },
        {
          "name": "elementToMoveSessionKey",
          "description": "(Only used when <code>elementToMove</code> or <code>elementToMoveChain</code> is set) Name of the session key wherein the character data is stored",
          "default": "ref_ + the name of the element"
        },
        {
          "name": "elementToMoveChain",
          "description": "Like <code>elementToMove</code> but element is preceded with all ancestor elements and separated by semicolons (e.g. adapter;pipeline;pipe)"
        },
        {
          "name": "removeCompactMsgNamespaces",
          "type": "bool"
        },
        {
          "name": "hideRegex",
          "description": "Regular expression to mask strings in the errorStore/logStore and logfiles. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&lt;=&lt;party&gt;).*?(?=&lt;/party&gt;) will replace every character between keys &lt;party&gt; and &lt;/party&gt;"
        },
        {
          "name": "hideMethod",
          "description": "Only used when hideRegex is not empty",
          "default": "all",
          "enum": "org.frankframework.core.IMessageBrowser.HideMethod"
        },
        {
          "name": "hiddenInputSessionKeys",
          "description": "Comma separated list of keys of session variables which are available when the <code>PipelineSession</code> is created and of which the value will not be shown in the log (replaced by asterisks)"
        },
        {
          "name": "forceRetryFlag",
          "description": "If set to <code>true</code>, every message read will be processed as if it is being retried, by setting a session variable to <code>retry</code>.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "numberOfExceptionsCaughtWithoutMessageBeingReceivedThreshold",
          "description": "Number of connection attempts to put the adapter in warning status",
          "default": "5",
          "type": "int"
        },
        {
          "name": "maxBackoffDelay",
          "description": "After a message has an error in processing, there is a small delay before processing the next\n message before processing the next message or retrying the failed message.\n This is so that errors coming from external systems so not overload those external systems.\n <p>\n     The delay doubles after every failure, until the maximum set here is reached. See:\n     <a href=\"https://en.wikipedia.org/wiki/Exponential_backoff\">https://en.wikipedia.org/wiki/Exponential_backoff</a>.\n </p>\n <p>\n     If the transaction timeout can be determined, then the backoff-delay is capped by half the transaction timeout to\n     avoid messages automatically timing out.\n </p>\n <p>\n     There is no backoff-time after a message is successfully processed. After a message is successfully processed,\n     the actual backoff-time is reset to 1 second.\n </p>\n <p>\n     If set to 0, then there is no delay after messages that had an error.\n </p>\n <p>\n     If this is not set on the receiver, then a default is taken from the configuration property `${receiver.defaultMaxBackoffDelay}` which\n     defaults to 60 seconds.\n </p>",
          "type": "int"
        }
      ],
      "children": [
        {
          "mandatory": true,
          "multiple": false,
          "roleName": "listener",
          "description": "Sets the listener used to receive messages from.",
          "type": "org.frankframework.core.IListener"
        },
        {
          "multiple": false,
          "roleName": "sender",
          "description": "Sender to which the response (output of {@link PipeLine}) should be sent. Applies if the receiver\n has an asynchronous listener.\n N.B. Sending correlated responses via this sender is not supported.",
          "type": "org.frankframework.core.ICorrelatedSender"
        },
        {
          "multiple": false,
          "roleName": "errorStorage",
          "description": "Storage to keep track of messages that failed processing",
          "type": "org.frankframework.core.ITransactionalStorage"
        },
        {
          "multiple": false,
          "roleName": "messageLog",
          "description": "Storage to keep track of all messages processed correctly",
          "type": "org.frankframework.core.ITransactionalStorage"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "ReconnectSenderWrapper",
      "fullName": "org.frankframework.senders.ReconnectSenderWrapper",
      "description": "Wrapper for senders, that opens the wrapped sender at runtime before each sender action, and closes it afterwards.\n This prevents (long) open connections inside Senders and possible connection failures.\n\n <b>Example:</b>\n <pre><code>&lt;SenderPipe&gt;\n     &lt;ReconnectSenderWrapper&gt;\n         &lt;EchoSender myAttribute=&quot;myValue&quot; /&gt;\n     &lt;/ReconnectSenderWrapper&gt;\n &lt;/SenderPipe&gt;</code></pre>\n </p>",
      "parent": "org.frankframework.senders.AbstractSenderWrapper",
      "elementNames": ["ReconnectSenderWrapperSender"],
      "children": [
        {
          "multiple": false,
          "roleName": "sender",
          "description": "specification of sender to send messages with",
          "type": "org.frankframework.core.ISender"
        }
      ]
    },
    {
      "name": "RecordHandlerManager",
      "fullName": "org.frankframework.batch.RecordHandlerManager",
      "description": "Basic implementation of RecordHandlerManager, that allows only for a single flow.\n The manager decides which handlers to be used for a specific record.",
      "elementNames": ["Manager"],
      "attributes": [
        {
          "name": "name",
          "description": "Name of the manager"
        },
        {
          "name": "initial",
          "description": "This manager is the initial manager, i.e. to be used for the first record",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "flow",
          "description": "Element that contains the handlers for a specific record type, to be assigned to the manager",
          "type": "org.frankframework.batch.RecordHandlingFlow"
        }
      ]
    },
    {
      "name": "RecordTransformer",
      "fullName": "org.frankframework.batch.RecordTransformer",
      "description": "Translate a record using an outputFields description.\n\n The {@link #setOutputFields(String) outputFields} description can contain the following functions:\n\n <table border=\\\"1\\\">\n <tr><td>string(value)</td><td>inserts the value between the braces</td><td>string( Dit wordt geinsert inclusief spaties ervoor en erna. )</td></tr>\n <tr><td>align(value,size,align,fillchar)</td><td>inserts the value aligned</td><td>align(test~10~left~ )</td></tr>\n <tr><td>fill(size,fillchar)</td><td>insert size fillchars</td><td>fill(2,0)</td></tr>\n <tr><td>now(outformat)</td><td>inserts the current date</td><td>now(dd MMM yyyy)</td></tr>\n <tr><td>incopy(fieldnr)</td><td>simply inserts the value of the field</td><td>incopy(2)</td></tr>\n <tr><td>substr(fieldnr,startindex,endindex)</td><td>insert part of the value of the field</td><td>substr(2,0,8)</td></tr>\n <tr><td>lookup(fieldnr,orgvval=newval,...)</td><td>replace original value using lookup table</td><td>lookup(3,Debit=+,Credit=-)</td></tr>\n <tr><td>indate(fieldnr,informat,outformat)</td><td>inserts an input datefield using a different format</td><td>indate(2~MMddYY~dd MMM yyyy)</td></tr>\n <tr><td>inalign(fieldnr,size,align,fillchar)</td><td>inserts an input field</td><td>inalign(3~5~left~0)</td></tr>\n <tr><td>if(fieldnr,comparator,compareval)</td><td>only output the next fields if condition is true. Comparator is EQ (is equal to), NE (is not equal to), SW (starts with) or NS (not starts with). Use \\\"{..|..|..}\\\" for multiple compareValues</td><td>if(1,eq,3)</td></tr>\n <tr><td>elseif(fieldnr,comparator,compareval)</td><td>only output the next fields if condition is true. Comparator is EQ, NE, SW or NS</td><td>elseif(1,ne,4)</td></tr>\n <tr><td>endif()</td><td>endmarker for if</td><td>endif()</td></tr>\n </table>",
      "parent": "org.frankframework.batch.AbstractRecordHandler",
      "elementNames": [
        "RecordTransformerChild",
        "RecordTransformerRecordHandler"
      ],
      "attributes": [
        {
          "name": "outputFields",
          "description": "semicolon separated list of output record field specifications (see table below)"
        },
        {
          "name": "outputSeparator",
          "description": "optional separator to add between the fields"
        }
      ],
      "children": [
        {
          "deprecated": true,
          "multiple": true,
          "roleName": "child",
          "description": "Added to allow usage from Configuration file without the need to modify the\n digester-rules",
          "type": "org.frankframework.batch.OutputfieldsPart"
        },
        {
          "multiple": true,
          "roleName": "outputFields",
          "type": "org.frankframework.batch.OutputfieldsPart"
        }
      ]
    },
    {
      "name": "RecordXml2Sender",
      "fullName": "org.frankframework.batch.RecordXml2Sender",
      "description": "Translate a record into XML, then send it using a sender.",
      "parent": "org.frankframework.batch.RecordXmlTransformer",
      "elementNames": [
        "RecordXml2SenderChild",
        "RecordXml2SenderRecordHandler"
      ],
      "children": [
        {
          "multiple": false,
          "roleName": "sender",
          "description": "Sender that needs to handle the (XML) record",
          "type": "org.frankframework.core.ISender"
        }
      ],
      "parametersDescription": "any parameters defined on the recordHandler will be handed to the sender, if this is a {@link ISenderWithParameters ISenderWithParameters}"
    },
    {
      "name": "RecordXmlTransformer",
      "fullName": "org.frankframework.batch.RecordXmlTransformer",
      "description": "Encapsulates a record in XML, optionally translates it using XSLT or XPath.",
      "parent": "org.frankframework.batch.AbstractRecordHandler",
      "elementNames": [
        "RecordXmlTransformerChild",
        "RecordXmlTransformerRecordHandler"
      ],
      "attributes": [
        {
          "name": "outputFields",
          "description": "comma separated string with tagnames for the individual input fields (related using there positions). if you leave a tagname empty, the field is not xml-ized"
        },
        {
          "name": "rootTag",
          "description": "Root tag for the generated xml document that will be send to the Sender",
          "default": "record"
        },
        {
          "name": "styleSheetName",
          "description": "Name of stylesheet to transform an individual record"
        },
        {
          "name": "xpathExpression",
          "description": "Alternatively: xpath-expression to create stylesheet from"
        },
        {
          "name": "namespaceDefs",
          "description": "Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions. One entry can be without a prefix, that will define the default namespace."
        },
        {
          "name": "outputType",
          "description": "Only valid for <code>xpathExpression</code>",
          "default": "text",
          "enum": "org.frankframework.util.TransformerPool.OutputType"
        },
        {
          "name": "omitXmlDeclaration",
          "description": "Force the transformer generated from the xpath-expression to omit the xml declaration",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "endOfRecord",
          "description": "String which ends the record and must be ignored"
        }
      ]
    },
    {
      "name": "RecoverAdaptersJob",
      "fullName": "org.frankframework.scheduler.job.RecoverAdaptersJob",
      "description": "Frank!Framework Adapter recovery-job, which monitors all adapter states, attempts to recover them if required,\n and logs this information to the <code>HEARTBEAT</code> log appender.",
      "parent": "org.frankframework.scheduler.AbstractJobDef",
      "elementNames": ["RecoverAdaptersJob"],
      "notes": [
        {
          "type": "INFO",
          "value": "This is a default job that can be controlled with the property `recover.adapters.interval`."
        }
      ]
    },
    {
      "name": "RegExPipe",
      "fullName": "org.frankframework.pipes.RegExPipe",
      "description": "Tries to match the input against the provided regex.\n\n <pre><code>&lt;RegExPipe name=&quot;regExPipe&quot; regex=&quot;^(.*?)(name!)$&quot; flags=&quot;CASE_INSENSITIVE&quot;&gt;\n \t\t&lt;Forward name=&quot;then&quot; path=&quot;EXIT&quot; /&gt;\n \t\t&lt;Forward name=&quot;else&quot; path=&quot;EXIT&quot; /&gt;\n \t&lt;/RegExPipe&gt;</code></pre>\n\n <p>Input:</p>\n <pre><code>Hello name!</code></pre>\n\n <p>Output:</p>\n <pre><code>&lt;matches&gt;\n \t\t&lt;match index=&quot;1&quot; value=&quot;Hello name!&quot;&gt;\n \t\t\t&lt;group index=&quot;1&quot;&gt;Hello &lt;/group&gt;\n \t\t\t&lt;group index=&quot;2&quot;&gt;name!&lt;/group&gt;\n \t\t&lt;/match&gt;\n  &lt;/matches&gt;</code></pre>",
      "parent": "org.frankframework.pipes.AbstractPipe",
      "elementNames": ["RegExPipe"],
      "attributes": [
        {
          "name": "regex",
          "mandatory": true,
          "description": "The regex expression to match against the input."
        },
        {
          "name": "flags",
          "description": "Comma seperated list of flags, which changes the behavior of the regex expression.",
          "enum": "org.frankframework.pipes.RegExPipe.RegExFlag"
        }
      ],
      "forwards": [
        {
          "name": "then",
          "description": "When a match is found."
        },
        {
          "name": "else",
          "description": "When no match is found."
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Router"
        }
      ],
      "notes": [
        {
          "type": "TIP",
          "value": "https://regex101.com can be used to quickly create and debug regex expressions."
        }
      ]
    },
    {
      "name": "RekenBoxCaller",
      "fullName": "org.frankframework.extensions.rekenbox.RekenBoxCaller",
      "description": "Perform a call to a RekenBox.\n\n The inputmessage is written to a temporary file and passed as inputfile to the rekenbox. The contents of the outputfile of the\n rekenbox is returned as output message. The name of the rekenbox, as determined from the inputfile, is optionally written to\n the pipeLineSession.\n\n\n <p><b>Note:</b><br/>\n The rekenbox-name is currently determined from the first 8 characters of the file, or up\n to the first space (' ') or colon (':') character. Beware that if the first character of the\n file is a newline character or something similar, less characters are available to pass the\n rekenbox-name on. Especially if the inputmessages are constructed by means of an XSLT-stylesheet,\n messages often start with a newline character.\n </p>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["RekenBoxCallerPipe"],
      "attributes": [
        {
          "name": "rekenBoxName",
          "description": "Fixed name of the rekenbox (or wrapper) to be called. If empty, the name is determined from the request"
        },
        {
          "name": "runPath",
          "description": "Directory on server where rekenbox-executable can be found"
        },
        {
          "name": "templateDir",
          "description": "Rekenbox template directory on server"
        },
        {
          "name": "inputOutputDirectory",
          "description": "Directory on server where input and output files are (temporarily) stored"
        },
        {
          "name": "commandLineType",
          "description": "Format of commandline of rekenbox. Possible values\n \"straight\": rekenbox is called like: rekenbox.exe inputFileName outputFileName templateDir\n \"switches\": rekenbox is called like: rekenbox.exe /IinputFileName /UoutputFileName /PtemplateDir\n \"redirected\": rekenbox is called like: rekenbox.exe inputFileName templateDir > outputFileName; (This method has not been fully tested)"
        },
        {
          "name": "executableExtension",
          "description": "Extension of rekenbox-executable"
        },
        {
          "name": "cleanup",
          "description": "If <code>true</code>, input and output files are removed after the call to the rekenbox is finished",
          "type": "bool"
        },
        {
          "name": "rekenboxSessionKey",
          "description": "Key in pipeLineSession to store rekenbox name in"
        },
        {
          "name": "dataFilenamePrefix",
          "description": "First part of filenames that communicate requests and replies to rekenbox"
        },
        {
          "name": "maxRequestNumber",
          "description": "Maximal number that will be concatenated to dataFilenamePrefix",
          "type": "int"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "ReloadSender",
      "fullName": "org.frankframework.senders.ReloadSender",
      "description": "Performs a reload on database configuration.\n\n <p>It is possible to set the name of the configuration with the parameter 'name'.</p>\n <p>You can dynamically set 'forceReload' attribute with the parameter 'forceReload'.</p>",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["ReloadSender"],
      "attributes": [
        {
          "name": "forceReload",
          "description": "reload the configuration regardless of the version",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "RemoveCacheKeyPipe",
      "fullName": "org.frankframework.cache.RemoveCacheKeyPipe",
      "description": "Remove specified cache key from cache with specified name.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["RemoveCacheKeyPipe"],
      "attributes": [
        {
          "name": "cacheName",
          "description": "Name of the cache from which items are to be removed"
        },
        {
          "name": "keyXPath",
          "description": "XPath expression to extract cache key from request message"
        },
        {
          "name": "keyXPathOutputType",
          "description": "Output type of xpath expression to extract cache key from request message, must be 'xml' or 'text'",
          "default": "text",
          "enum": "org.frankframework.util.TransformerPool.OutputType"
        },
        {
          "name": "keyNamespaceDefs",
          "description": "Namespace defintions for keyXPath. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions"
        },
        {
          "name": "keyStyleSheet",
          "description": "Stylesheet to extract cache key from request message. Use in combination with {@link EhCache#setCacheEmptyKeys cacheEmptyKeys} to inhibit caching for certain groups of request messages"
        },
        {
          "name": "keyInputSessionKey",
          "description": "Session key to use as input for transformation of request message to key by keyXPath or keyStyleSheet"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Session"
        }
      ]
    },
    {
      "name": "RemoveFromSession",
      "fullName": "org.frankframework.pipes.RemoveFromSession",
      "description": "Removes a key specified by <code>{@link #setSessionKey(String) sessionKey}</code>\n from the {@link PipeLineSession pipeLineSession}.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["RemoveFromSessionPipe"],
      "attributes": [
        {
          "name": "sessionKey",
          "description": "name of the key of the entry in the <code>pipelinesession</code> to remove. if this key is empty the input message is interpretted as key. for multiple keys use ',' as delimiter"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Session"
        }
      ]
    },
    {
      "name": "ReplacerPipe",
      "fullName": "org.frankframework.pipes.ReplacerPipe",
      "description": "This Pipe is used to replace values in a few ways. The following steps are performed:\n <ol>\n <li>If the attribute <code>find</code> is provided, the pipe will attempt to replace the provided value with the content of the attribute <code>replace</code>.</li>\n <li>The resulting string is substituted based on the parameters of this pipe. It will replace values in the input enclosed\n with <code>?{...}</code>, for instance text like: <code>?{parameterOne}</code> in combination with a parameter <code>parameterOne</code> will use the value of this {@link Parameter}. \n If a parameter for the given value is not found, it will not be replaced and the <code>?{parameterOne}</code> value will remain in the output.</li>\n <p>\n <p>\n <li>If attribute <code>substituteVars</code> is <code>true</code>, then expressions <code>${...}</code> are substituted using\n system properties, session variables and application properties. Please note that no <code>${...}</code> patterns are left in the input. </li>\n </ol>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["ReplacerPipe"],
      "attributes": [
        {
          "name": "find",
          "description": "Sets the string that is searched for. Newlines can be represented\n by the {@link #setLineSeparatorSymbol(String)}."
        },
        {
          "name": "replace",
          "description": "Sets the string that will replace each of the occurrences of the find-string. Newlines can be represented\n * by the {@link #setLineSeparatorSymbol(String)}."
        },
        {
          "name": "lineSeparatorSymbol",
          "description": "sets the string that will represent the line-separator in the {@link #setFind(String)} and {@link #setReplace(String)} strings."
        },
        {
          "name": "replaceNonXmlChars",
          "description": "Replace all characters that are non-printable according to the XML specification with\n the value specified in {@link #setNonXmlReplacementCharacter(String)}.\n <p>\n <b>NB:</b> This will only replace or remove characters considered non-printable. This\n will not check if a given character is valid in the particular way it is used. Thus it will\n not remove or replace, for instance, a single <code>'&amp;'</code> character.\n </p>\n <p>\n See also:\n \t<ul>\n \t    <li>XmlEncodingUtils {@link XmlEncodingUtils#replaceNonValidXmlCharacters(String, char, boolean, boolean) replaceNonValidXmlCharacters}</li>\n \t    <li><a href=\"https://www.w3.org/TR/xml/#charsets\">Character ranges specified in the XML Specification</a></li>\n \t</ul>\n </p>",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "nonXmlReplacementCharacter",
          "description": "character that will replace each non-valid xml character (empty string is also possible) (use &amp;#x00bf; for inverted question mark)",
          "default": "empty string"
        },
        {
          "name": "replaceNonXmlChar",
          "deprecated": {
            "forRemoval": true,
            "since": "8.2",
            "description": "The attribute 'replaceNonXmlChar' has been renamed to 'nonXmlReplacementCharacter' for readability"
          }
        },
        {
          "name": "allowUnicodeSupplementaryCharacters",
          "description": "Whether to allow Unicode supplementary characters (like a smiley) during {@link XmlEncodingUtils#replaceNonValidXmlCharacters(String,\n char, boolean, boolean) replaceNonValidXmlCharacters}",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "substituteVars",
          "description": "Should properties (values between <code>${</code> and <code>}</code>) be resolved.",
          "default": "false",
          "type": "bool"
        }
      ],
      "parametersDescription": "Used for substitution. For a parameter named <code>xyz</code>, the string <code>?{xyz}</code> is substituted by the parameter's value.",
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ],
      "notes": [
        {
          "type": "TIP",
          "value": "See {@link Parameter} to see how parameter values are determined."
        }
      ]
    },
    {
      "name": "RestListener",
      "fullName": "org.frankframework.http.RestListener",
      "description": "Listener that allows a {@link Receiver} to receive messages as a REST webservice.\n Prepends the configured URI pattern with <code>rest/</code>. When you are writing a new Frank config, you are recommended\n to use an {@link ApiListener} instead. You can find all serviced URI patterns\n in the Frank!Console: main menu item Webservice, heading Available REST Services.\n\n <p>\n Note:\n Servlets' multipart configuration expects a Content-Type of <code>multipart/form-data</code> (see http://docs.oracle.com/javaee/6/api/javax/servlet/annotation/MultipartConfig.html).\n So do not use other multipart content types like <code>multipart/related</code>\n </p>",
      "parent": "org.frankframework.http.PushingListenerAdapter",
      "elementNames": ["RestListener"],
      "attributes": [
        {
          "name": "uriPattern",
          "description": "Uri pattern to match, the {uri} part in https://mydomain.com/ibis4something/rest/{uri}, where mydomain.com and ibis4something refer to 'your ibis'."
        },
        {
          "name": "method",
          "description": "Method (e.g. GET or POST) to match"
        },
        {
          "name": "etagSessionKey",
          "description": "Key of session variable to store etag"
        },
        {
          "name": "contentTypeSessionKey",
          "description": "Key of Session variable that determines requested content type, overrides {@link #setProduces(MediaTypes) produces}"
        },
        {
          "name": "restPath",
          "description": "Can be either <code>/rest</code> or <code>/rest-public</code> and must correspond with the available RestListenerServlet path(s)."
        },
        {
          "name": "authRoles",
          "description": "Comma separated list of authorization roles which are granted for this rest service",
          "default": "IbisWebService,IbisObserver,IbisDataAdmin,IbisAdmin,IbisTester"
        },
        {
          "name": "writeToSecLog",
          "type": "bool"
        },
        {
          "name": "writeSecLogMessage",
          "type": "bool"
        },
        {
          "name": "retrieveMultipart",
          "description": "Indicates whether the parts of a multipart entity should be retrieved and put in session keys. This can only be done once!",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "consumes",
          "description": "Mediatype (e.g. XML, JSON, TEXT) the {@link RestServiceDispatcher} receives as input",
          "default": "XML",
          "enum": "org.frankframework.http.RestListener.MediaTypes"
        },
        {
          "name": "produces",
          "description": "Mediatype (e.g. XML, JSON, TEXT) the {@link RestServiceDispatcher} sends as output, if set to json the ibis will automatically try to convert the xml message",
          "default": "XML",
          "enum": "org.frankframework.http.RestListener.MediaTypes"
        },
        {
          "name": "validateEtag",
          "description": "If set to true the ibis will automatically validate and process etags",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "generateEtag",
          "description": "If set to true the ibis will automatically create an etag",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "automaticallyTransformToAndFromJson",
          "description": "Uses an JsonPipe to convert the json-input to xml, and xml-output to json.\n Use with caution, a properly configured Input/Output-wrapper can do much more and is more robust!",
          "default": "true",
          "type": "bool"
        }
      ]
    },
    {
      "name": "RestSender",
      "fullName": "org.frankframework.http.RestSender",
      "deprecated": {
        "forRemoval": true,
        "since": "7.6.0"
      },
      "parent": "org.frankframework.http.HttpSender",
      "elementNames": ["RestSender"]
    },
    {
      "name": "Result2BlobWriter",
      "fullName": "org.frankframework.jdbc.Result2BlobWriter",
      "description": "{@link IResultHandler ResultHandler} that writes the transformed record to a BLOB.",
      "parent": "org.frankframework.jdbc.Result2LobWriterBase",
      "elementNames": [
        "Result2BlobWriterChild",
        "Result2BlobWriterResultHandler"
      ],
      "attributes": [
        {
          "name": "blobColumn",
          "description": "Column that contains the BLOB to be updated",
          "default": "1",
          "type": "int"
        },
        {
          "name": "blobsCompressed",
          "description": "controls whether blobdata is stored compressed in the database",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "blobCharset",
          "description": "Charset that is used to read and write BLOBs. This assumes the blob contains character data.\n If blobCharset and blobSmartGet are not set, BLOBs are returned as bytes. Before version 7.6, blobs were base64 encoded after being read to accommodate for the fact that senders need to return a String. This is no longer the case"
        }
      ]
    },
    {
      "name": "Result2ClobWriter",
      "fullName": "org.frankframework.jdbc.Result2ClobWriter",
      "description": "{@link IResultHandler ResultHandler} that writes the transformed record to a CLOB.",
      "parent": "org.frankframework.jdbc.Result2LobWriterBase",
      "elementNames": [
        "Result2ClobWriterChild",
        "Result2ClobWriterResultHandler"
      ],
      "attributes": [
        {
          "name": "clobColumn",
          "description": "Column that contains the CLOB to be updated",
          "default": "1",
          "type": "int"
        }
      ]
    },
    {
      "name": "Result2Filewriter",
      "fullName": "org.frankframework.batch.Result2Filewriter",
      "description": "Resulthandler that writes the transformed record to a file.",
      "parent": "org.frankframework.batch.ResultWriter",
      "elementNames": [
        "Result2FilewriterChild",
        "Result2FilewriterResultHandler"
      ],
      "attributes": [
        {
          "name": "outputDirectory",
          "description": "Directory in which the resultfile must be stored"
        },
        {
          "name": "move2dirAfterFinalize",
          "description": "Directory to which the created file must be moved after finalization (is optional)"
        },
        {
          "name": "filenamePattern",
          "description": "Name of the file is created using the messageformat. Params: 1=inputfilename, 2=extension of file, 3=current date"
        }
      ]
    },
    {
      "name": "Result2LobWriterBase",
      "fullName": "org.frankframework.jdbc.Result2LobWriterBase",
      "abstract": true,
      "description": "Baseclass for batch {@link IResultHandler resultHandler} that writes the transformed record to a LOB.",
      "parent": "org.frankframework.batch.ResultWriter",
      "elementNames": [],
      "attributes": [
        {
          "name": "query",
          "description": "The SQL query text"
        },
        {
          "name": "datasourceName",
          "description": "JNDI name of datasource to be used, can be configured via jmsRealm, too",
          "default": "<code>jdbc.datasource.default</code>"
        },
        {
          "name": "jmsRealm",
          "description": "loads JNDI (and other) properties from a JmsRealm"
        }
      ],
      "parametersDescription": "any parameters defined on the resultHandler will be applied to the SQL statement"
    },
    {
      "name": "Result2StringWriter",
      "fullName": "org.frankframework.batch.Result2StringWriter",
      "description": "Resulthandler that writes the transformed record to a String, that is passed to the next Pipe literally.",
      "parent": "org.frankframework.batch.ResultWriter",
      "elementNames": [
        "Result2StringWriterChild",
        "Result2StringWriterResultHandler"
      ]
    },
    {
      "name": "ResultBlock2Sender",
      "fullName": "org.frankframework.batch.ResultBlock2Sender",
      "description": "ResultHandler that collects a number of records and sends them together to a sender.",
      "parent": "org.frankframework.batch.ResultWriter",
      "elementNames": [
        "ResultBlock2SenderChild",
        "ResultBlock2SenderResultHandler"
      ],
      "children": [
        {
          "multiple": false,
          "roleName": "sender",
          "description": "Sender to which each block of results is sent",
          "type": "org.frankframework.core.ISender"
        }
      ],
      "parametersDescription": "any parameters defined on the resultHandler will be handed to the sender, if this is a {@link ISenderWithParameters ISenderWithParameters}"
    },
    {
      "name": "ResultSet2FileSender",
      "fullName": "org.frankframework.jdbc.ResultSet2FileSender",
      "description": "QuerySender that writes each row in a ResultSet to a file.",
      "parent": "org.frankframework.jdbc.FixedQuerySender",
      "elementNames": ["ResultSet2FileSender"],
      "attributes": [
        {
          "name": "statusFieldType",
          "description": "type of the optional status field which is set after the row is written to the file: timestamp"
        },
        {
          "name": "filenameSessionKey",
          "mandatory": true,
          "description": "Key of session variable that contains the name of the file to use."
        },
        {
          "name": "append",
          "description": "If set <code>true</code> and the file already exists, the resultset rows are written to the end of the file.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "maxRecordsSessionKey",
          "description": "If set (and &gt;=0), this session key contains the maximum number of records which are processed.\n If <code>query</code> contains a group field (3), then also following records with the same group field value as the last record are processed"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "Please note that the default value of <code>trimSpaces</code> is `true`"
        }
      ]
    },
    {
      "name": "ResultSetIteratingPipe",
      "fullName": "org.frankframework.jdbc.ResultSetIteratingPipe",
      "description": "Pipe that iterates over rows in in ResultSet.\n\n Each row is send passed to the sender in the same format a row is usually returned from a query.",
      "parent": "org.frankframework.jdbc.JdbcIteratingPipeBase",
      "elementNames": ["ResultSetIteratingPipe"]
    },
    {
      "name": "ResultWriter",
      "fullName": "org.frankframework.batch.ResultWriter",
      "abstract": true,
      "description": "Baseclass for resulthandlers that write the transformed record to a writer.",
      "parent": "org.frankframework.batch.AbstractResultHandler",
      "elementNames": [],
      "attributes": [
        {
          "name": "onOpenDocument",
          "description": "string that is written before any data of results is written",
          "default": "&lt;document name=&quot;#name#&quot;&gt;"
        },
        {
          "name": "onCloseDocument",
          "description": "string that is written after all data of results is written",
          "default": "&lt;/document&gt;"
        },
        {
          "name": "onOpenBlock",
          "description": "string that is written before the start of each logical block, as defined in the flow",
          "default": "&lt;#name#&gt;"
        },
        {
          "name": "onCloseBlock",
          "description": "string that is written after the end of each logical block, as defined in the flow",
          "default": "&lt;/#name#&gt;"
        },
        {
          "name": "blockNamePattern",
          "description": "string that is replaced by name of block or name of stream in above strings",
          "default": "#name#"
        }
      ]
    },
    {
      "name": "Samba1Pipe",
      "fullName": "org.frankframework.pipes.Samba1Pipe",
      "description": "Uses the (old) SMB 1 protocol.\n <br/>\n Only supports NTLM authentication.",
      "parent": "org.frankframework.filesystem.AbstractFileSystemPipe",
      "elementNames": ["Samba1Pipe"],
      "attributes": [
        {
          "name": "share",
          "description": "The destination, aka smb://xxx/yyy share"
        },
        {
          "name": "username",
          "description": "The SMB share username"
        },
        {
          "name": "password",
          "description": "The SMB share password"
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain credentials for the SMB share"
        },
        {
          "name": "domainName",
          "description": "logon/authentication domain, in case the user account is bound to a domain such as Active Directory."
        },
        {
          "name": "force",
          "description": "when <code>true</code>, intermediate directories are created also",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "listHiddenFiles",
          "description": "controls whether hidden files are seen or not",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "Samba1Sender",
      "fullName": "org.frankframework.senders.Samba1Sender",
      "description": "Uses the (old) SMB 1 protocol.\n <br/>\n Only supports NTLM authentication.",
      "parent": "org.frankframework.filesystem.AbstractFileSystemSender",
      "elementNames": ["Samba1Sender"],
      "attributes": [
        {
          "name": "share",
          "description": "The destination, aka smb://xxx/yyy share"
        },
        {
          "name": "username",
          "description": "The SMB share username"
        },
        {
          "name": "password",
          "description": "The SMB share password"
        },
        {
          "name": "authAlias",
          "description": "Alias used to obtain credentials for the SMB share"
        },
        {
          "name": "domainName",
          "description": "logon/authentication domain, in case the user account is bound to a domain such as Active Directory."
        },
        {
          "name": "force",
          "description": "when <code>true</code>, intermediate directories are created also",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "listHiddenFiles",
          "description": "controls whether hidden files are seen or not",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "Samba2Listener",
      "fullName": "org.frankframework.receivers.Samba2Listener",
      "description": "File listener for an SMB2 or SMB3 share.\n\n {@link IPullingListener listener} that looks in a {@link IBasicFileSystem FileSystem} for files.\n When a file is found, it is moved to an in-process folder, so that it isn't found more than once.\n <br/>\n The information specified by {@link #setMessageType(IMessageType)} is then passed to the pipeline.",
      "parent": "org.frankframework.filesystem.AbstractFileSystemListener",
      "elementNames": ["Samba2Listener"],
      "attributes": [
        {
          "name": "messageType",
          "description": "Determines the contents of the message that is sent to the pipeline. The value of the attribute matching the searchKey is returned when using <code>ATTRIBUTE</code>",
          "default": "PATH",
          "enum": "org.frankframework.filesystem.AbstractFileSystemListener.MessageType"
        },
        {
          "name": "hostname",
          "mandatory": true,
          "description": "Hostname of the SMB share."
        },
        {
          "name": "port",
          "description": "Port to connect to.",
          "default": "445",
          "type": "int"
        },
        {
          "name": "authType",
          "description": "Type of the authentication either 'NTLM' or 'SPNEGO'.\n When setting SPNEGO, the host must use the FQDN, and must be registered on the KDC with a valid SPN.",
          "default": "SPNEGO",
          "enum": "org.frankframework.filesystem.smb.Samba2FileSystem.Samba2AuthType"
        },
        {
          "name": "authAlias",
          "description": "alias used to obtain credentials for the smb share"
        },
        {
          "name": "username",
          "description": "the smb share username"
        },
        {
          "name": "password",
          "description": "the smb share password"
        },
        {
          "name": "domainName",
          "description": "NTLM only: logon/authentication domain, in case the user account is bound to a domain such as Active Directory."
        },
        {
          "name": "share",
          "description": "May not contain '\\\\' characters. The destination share, aka smb://xxx/yyy share."
        },
        {
          "name": "kdc",
          "description": "SPNEGO only:\n Key Distribution Center, typically hosted on a domain controller.\n Stored in <code>java.security.krb5.kdc</code>"
        },
        {
          "name": "realm",
          "description": "SPNEGO only:\n Kerberos Realm, case sensitive. Typically upper case and the same as the domain name.\n An Active Directory domain acts as a Kerberos Realm.\n Stored in <code>java.security.krb5.realm</code>"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "To avoid problems with duplicate filenames in folders like the <code>errorFolder</code> or <code>processedFolder</code>,\n you should configure either <code>overwrite=&quot;true&quot;</code>, configure <code>numberOfBackups</code> to a value larger than 0, or\n configure an <code>inProcessFolder</code> and <code>fileTimeSensitive=&quot;true&quot;</code>.\n These options can be used together as well."
        },
        {
          "type": "WARNING",
          "value": "In addition to the above, prior to release 9.0 it was not sufficient to configure <code>inProcessFolder</code> and <code>fileTimeSensitive</code>\n to avoid potential duplicate filename errors. Prior to release 9.0, it is recommended to configure <code>numberOfBackups</code> to avoid these issues."
        }
      ]
    },
    {
      "name": "Samba2Pipe",
      "fullName": "org.frankframework.pipes.Samba2Pipe",
      "parent": "org.frankframework.filesystem.AbstractFileSystemPipe",
      "elementNames": ["Samba2Pipe"],
      "attributes": [
        {
          "name": "hostname",
          "mandatory": true,
          "description": "Hostname of the SMB share."
        },
        {
          "name": "port",
          "description": "Port to connect to.",
          "default": "445",
          "type": "int"
        },
        {
          "name": "authType",
          "description": "Type of the authentication either 'NTLM' or 'SPNEGO'.\n When setting SPNEGO, the host must use the FQDN, and must be registered on the KDC with a valid SPN.",
          "default": "SPNEGO",
          "enum": "org.frankframework.filesystem.smb.Samba2FileSystem.Samba2AuthType"
        },
        {
          "name": "authAlias",
          "description": "alias used to obtain credentials for the smb share"
        },
        {
          "name": "username",
          "description": "the smb share username"
        },
        {
          "name": "password",
          "description": "the smb share password"
        },
        {
          "name": "domainName",
          "description": "NTLM only: logon/authentication domain, in case the user account is bound to a domain such as Active Directory."
        },
        {
          "name": "share",
          "description": "May not contain '\\\\' characters. The destination share, aka smb://xxx/yyy share."
        },
        {
          "name": "kdc",
          "description": "SPNEGO only:\n Key Distribution Center, typically hosted on a domain controller.\n Stored in <code>java.security.krb5.kdc</code>"
        },
        {
          "name": "realm",
          "description": "SPNEGO only:\n Kerberos Realm, case sensitive. Typically upper case and the same as the domain name.\n An Active Directory domain acts as a Kerberos Realm.\n Stored in <code>java.security.krb5.realm</code>"
        }
      ]
    },
    {
      "name": "Samba2Sender",
      "fullName": "org.frankframework.senders.Samba2Sender",
      "description": "Uses the (newer) SMB 2 and 3 protocol.\n\n Possible error codes:\n <br/>\n Pre-authentication information was invalid (24) or Identifier doesn't match expected value (906): login information is incorrect\n Server not found in Kerberos database (7): Verify that the hostname is the FQDN and the server is using a valid SPN.",
      "parent": "org.frankframework.filesystem.AbstractFileSystemSender",
      "elementNames": ["Samba2Sender"],
      "attributes": [
        {
          "name": "hostname",
          "mandatory": true,
          "description": "Hostname of the SMB share."
        },
        {
          "name": "port",
          "description": "Port to connect to.",
          "default": "445",
          "type": "int"
        },
        {
          "name": "authType",
          "description": "Type of the authentication either 'NTLM' or 'SPNEGO'.\n When setting SPNEGO, the host must use the FQDN, and must be registered on the KDC with a valid SPN.",
          "default": "SPNEGO",
          "enum": "org.frankframework.filesystem.smb.Samba2FileSystem.Samba2AuthType"
        },
        {
          "name": "authAlias",
          "description": "alias used to obtain credentials for the smb share"
        },
        {
          "name": "username",
          "description": "the smb share username"
        },
        {
          "name": "password",
          "description": "the smb share password"
        },
        {
          "name": "domainName",
          "description": "NTLM only: logon/authentication domain, in case the user account is bound to a domain such as Active Directory."
        },
        {
          "name": "share",
          "description": "May not contain '\\\\' characters. The destination share, aka smb://xxx/yyy share."
        },
        {
          "name": "kdc",
          "description": "SPNEGO only:\n Key Distribution Center, typically hosted on a domain controller.\n Stored in <code>java.security.krb5.kdc</code>"
        },
        {
          "name": "realm",
          "description": "SPNEGO only:\n Kerberos Realm, case sensitive. Typically upper case and the same as the domain name.\n An Active Directory domain acts as a Kerberos Realm.\n Stored in <code>java.security.krb5.realm</code>"
        }
      ]
    },
    {
      "name": "SambaListener",
      "fullName": "org.frankframework.receivers.SambaListener",
      "deprecated": {
        "forRemoval": false,
        "since": "9.0",
        "description": "Class SambaListener is an alias for Samba2Listener. Use Samba2Listener instead."
      },
      "description": "This class is an alias for {@link Samba2Listener}, which should be used instead.\n\n File listener for an SMB2 or SMB3 share.\n\n {@link IPullingListener listener} that looks in a {@link IBasicFileSystem FileSystem} for files.\n When a file is found, it is moved to an in-process folder, so that it isn't found more than once.\n <br/>\n The information specified by {@link #setMessageType(IMessageType)} is then passed to the pipeline.",
      "parent": "org.frankframework.receivers.Samba2Listener",
      "elementNames": ["SambaListener"],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "To avoid problems with duplicate filenames in folders like the <code>errorFolder</code> or <code>processedFolder</code>,\n you should configure either <code>overwrite=&quot;true&quot;</code>, configure <code>numberOfBackups</code> to a value larger than 0, or\n configure an <code>inProcessFolder</code> and <code>fileTimeSensitive=&quot;true&quot;</code>.\n These options can be used together as well."
        },
        {
          "type": "WARNING",
          "value": "In addition to the above, prior to release 9.0 it was not sufficient to configure <code>inProcessFolder</code> and <code>fileTimeSensitive</code>\n to avoid potential duplicate filename errors. Prior to release 9.0, it is recommended to configure <code>numberOfBackups</code> to avoid these issues."
        }
      ]
    },
    {
      "name": "SambaPipe",
      "fullName": "org.frankframework.pipes.SambaPipe",
      "parent": "org.frankframework.pipes.Samba2Pipe",
      "elementNames": ["SambaPipe"]
    },
    {
      "name": "SapFunctionFacade",
      "fullName": "org.frankframework.extensions.sap.jco3.SapFunctionFacade",
      "abstract": true,
      "description": "Wrapper round SAP-functions, either SAP calling Ibis, or Ibis calling SAP.\n\n N.B. If no requestFieldIndex or requestFieldName is specified, input is converted from/to xml;\n If no replyFieldIndex or replyFieldName is specified, output is converted from/to xml.\n </p>",
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "description": "Name of the Ibis-object"
        },
        {
          "name": "sapSystemName",
          "description": "Name of the {@link SapSystem} used by this object"
        },
        {
          "name": "correlationIdFieldIndex",
          "description": "Index of the field in the ImportParameterList of the RFC function that contains the correlationId",
          "default": "0",
          "type": "int"
        },
        {
          "name": "correlationIdFieldName",
          "description": "Name of the field in the ImportParameterList of the RFC function that contains the correlationId"
        },
        {
          "name": "requestFieldIndex",
          "description": "Index of the field in the ImportParameterList of the RFC function that contains the whole request message contents",
          "default": "0",
          "type": "int"
        },
        {
          "name": "requestFieldName",
          "description": "Name of the field in the ImportParameterList of the RFC function that contains the whole request message contents"
        },
        {
          "name": "replyFieldIndex",
          "description": "Index of the field in the ExportParameterList of the RFC function that contains the whole reply message contents",
          "default": "0",
          "type": "int"
        },
        {
          "name": "replyFieldName",
          "description": "Name of the field in the ExportParameterList of the RFC function that contains the whole reply message contents"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "SapLUWManager",
      "fullName": "org.frankframework.extensions.sap.jco3.SapLUWManager",
      "description": "Manager for SAP Logical Units of Work (LUWs).\n Used to begin, commit or rollback LUWs. A SapLUWManager can be placed before a number\n of SapSenders. The SapLUWManager and the SapSenders must each use the same value for\n luwHandleSessionKey. By doing so, they use the same connection to SAP. This allows to\n perform a commit on a number of actions.<br/>\n The placement of the the first SapLUWManager is optionan: By specifying a new\n luwHandleSessionKey a new handle is created implicitly.<br/>\n To explicityly commit or rollback a set of actions, a SapLUWManager-pipe can be used, with\n the action-attribute set apropriately.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["SapLUWManagerPipe"],
      "attributes": [
        {
          "name": "sapSystemName",
          "description": "Name of the SapSystem used by this object"
        },
        {
          "name": "action",
          "description": "One of: begin, commit, rollback, release"
        },
        {
          "name": "luwHandleSessionKey",
          "description": "Session key under which information is stored"
        }
      ]
    },
    {
      "name": "SapListener",
      "fullName": "org.frankframework.extensions.sap.SapListener",
      "description": "Implementation of a {@link IPushingListener},\n that enables a Receiver to receive messages from SAP-systems.\n\n In SAP, the function to be called is an RFC-function to the destination that is registered using <code>progid</code>.\n </b>\n N.B. If no requestFieldIndex or requestFieldName is specified, input is converted to xml;\n If no replyFieldIndex or replyFieldName is specified, output is converted from xml.\n </p>",
      "parent": "org.frankframework.extensions.sap.jco3.SapListenerImpl",
      "elementNames": ["SapListener"]
    },
    {
      "name": "SapListener",
      "fullName": "org.frankframework.extensions.sap.jco3.SapListener",
      "deprecated": {
        "forRemoval": true,
        "since": "7.7.0",
        "description": "Please do not specify jco version in package name"
      },
      "parent": "org.frankframework.extensions.sap.jco3.SapListenerImpl",
      "elementNames": []
    },
    {
      "name": "SapListenerImpl",
      "fullName": "org.frankframework.extensions.sap.jco3.SapListenerImpl",
      "abstract": true,
      "description": "Implementation of a {@link IPushingListener},\n that enables a Receiver to receive messages from SAP-systems.\n\n In SAP, the function to be called is an RFC-function to the destination that is registered using <code>progid</code>.\n </b>\n N.B. If no requestFieldIndex or requestFieldName is specified, input is converted to xml;\n If no replyFieldIndex or replyFieldName is specified, output is converted from xml.\n </p>",
      "parent": "org.frankframework.extensions.sap.jco3.SapFunctionFacade",
      "elementNames": [],
      "attributes": [
        {
          "name": "sapSystemName",
          "mandatory": true,
          "description": "Name of the {@link SapSystem} used by this object"
        },
        {
          "name": "progid",
          "mandatory": true,
          "description": "Name of the RFC-destination to be registered in the SAP system"
        },
        {
          "name": "connectionCount",
          "description": "The number of connections that should be registered at the gateway",
          "default": "2"
        }
      ]
    },
    {
      "name": "SapSender",
      "fullName": "org.frankframework.extensions.sap.SapSender",
      "description": "Implementation of {@link ISender sender} that calls a SAP RFC-function.\n\n N.B. If no requestFieldIndex or requestFieldName is specified, input is converted from xml;\n If no replyFieldIndex or replyFieldName is specified, output is converted to xml.",
      "parent": "org.frankframework.extensions.sap.jco3.SapSenderImpl",
      "elementNames": ["SapSender"]
    },
    {
      "name": "SapSender",
      "fullName": "org.frankframework.extensions.sap.jco3.SapSender",
      "deprecated": {
        "forRemoval": true,
        "since": "7.7.0",
        "description": "Please do not specify jco version in package name"
      },
      "parent": "org.frankframework.extensions.sap.jco3.SapSenderImpl",
      "elementNames": []
    },
    {
      "name": "SapSenderBase",
      "fullName": "org.frankframework.extensions.sap.jco3.SapSenderBase",
      "abstract": true,
      "description": "Base class for functions that call SAP.",
      "parent": "org.frankframework.extensions.sap.jco3.SapFunctionFacade",
      "elementNames": [],
      "attributes": [
        {
          "name": "luwHandleSessionKey",
          "description": "Session key in which LUW information is stored. If set, actions that share a LUW-handle will be executed using the same destination. Can only be used for synchronous functions"
        },
        {
          "name": "sapSystemNameParam",
          "description": "Name of the parameter used to indicate the name of the {@link SapSystem} used by this object if the attribute <code>sapSystemName</code> is empty",
          "default": "sapSystemName"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ],
      "parameters": [
        {
          "name": "sapSystemName",
          "description": "points to {@link SapSystemImpl} to use; required when attribute <code>sapSystemName</code> is empty"
        }
      ]
    },
    {
      "name": "SapSenderImpl",
      "fullName": "org.frankframework.extensions.sap.jco3.SapSenderImpl",
      "abstract": true,
      "description": "Implementation of {@link ISender sender} that calls a SAP RFC-function.\n\n N.B. If no requestFieldIndex or requestFieldName is specified, input is converted from xml;\n If no replyFieldIndex or replyFieldName is specified, output is converted to xml.",
      "parent": "org.frankframework.extensions.sap.jco3.SapSenderBase",
      "elementNames": [],
      "attributes": [
        {
          "name": "synchronous",
          "description": "If <code>false</code>, the sender operates in RR mode: the a reply is expected from SAP, and the sender does not participate in a transaction. When <code>false</code>, the sender operates in FF mode: no reply is expected from SAP, and the sender joins the transaction, that must be present. The SAP transaction is committed right after the XA transaction is completed.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "functionName",
          "description": "Name of the RFC-function to be called in the SAP system"
        },
        {
          "name": "functionNameParam",
          "description": "Name of the parameter used to obtain the functionName from if the attribute <code>functionName</code> is empty",
          "default": "functionName"
        }
      ],
      "parameters": [
        {
          "name": "functionName",
          "description": "defines functionName; required when attribute <code>functionName</code> is empty"
        },
        {
          "name": "<i>inputfieldname</i>",
          "description": "The value of the parameter is set to the (simple) input field"
        },
        {
          "name": "<i>structurename</i>/<i>inputfieldname</i>",
          "description": "The value of the parameter is set to the named field of the named structure"
        }
      ]
    },
    {
      "name": "SapSystem",
      "fullName": "org.frankframework.extensions.sap.SapSystem",
      "description": "A SapSystem is a provider of repository information and connections to a SAP-system.",
      "parent": "org.frankframework.extensions.sap.jco3.SapSystemImpl",
      "elementNames": ["SapSystem"]
    },
    {
      "name": "SapSystem",
      "fullName": "org.frankframework.extensions.sap.jco3.SapSystem",
      "deprecated": {
        "forRemoval": true,
        "since": "7.7.0",
        "description": "Please do not specify jco version in package name"
      },
      "parent": "org.frankframework.extensions.sap.jco3.SapSystemImpl",
      "elementNames": []
    },
    {
      "name": "SapSystemImpl",
      "fullName": "org.frankframework.extensions.sap.jco3.SapSystemImpl",
      "abstract": true,
      "description": "A SapSystem is a provider of repository information and connections to a SAP-system.",
      "parent": "org.frankframework.util.SapSystemListItem",
      "elementNames": [],
      "attributes": [
        {
          "name": "host",
          "description": "Default value for ashost, gwhost and mshost (i.e. when ashost, gwhost and mshost are all the same, only host needs to be specified)"
        },
        {
          "name": "ashost",
          "description": "SAP application server"
        },
        {
          "name": "systemnr",
          "description": "SAP system nr",
          "default": "00"
        },
        {
          "name": "group",
          "description": "Group of SAP application servers, when specified logon group will be used and r3name and mshost need to be specified instead of ashost"
        },
        {
          "name": "r3name",
          "description": "System ID of the SAP system"
        },
        {
          "name": "mshost",
          "description": "SAP message server"
        },
        {
          "name": "msservOffset",
          "description": "Number added to systemNr to find corresponding message server port",
          "default": "3600",
          "type": "int"
        },
        {
          "name": "gwhost",
          "description": "Gateway host"
        },
        {
          "name": "gwservOffset",
          "description": "Number added to systemNr to find corresponding gateway port",
          "default": "3300",
          "type": "int"
        },
        {
          "name": "mandant",
          "description": "Mandant i.e. 'destination'",
          "default": "100"
        },
        {
          "name": "authAlias",
          "description": "Alias to obtain userid and password"
        },
        {
          "name": "userid",
          "description": "Userid used in the connection"
        },
        {
          "name": "passwd",
          "description": "Passwd used in the connection"
        },
        {
          "name": "language",
          "description": "Language indicator",
          "default": "NL"
        },
        {
          "name": "unicode",
          "description": "If set <code>true</code> the SAP system is interpreted as Unicode SAP system, otherwise as non-Unicode (only applies to SapListeners, not to SapSenders)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "maxConnections",
          "description": "Maximum number of connections that may connect simultaneously to the SAP system",
          "default": "10",
          "type": "int"
        },
        {
          "name": "traceLevel",
          "description": "Trace level (effective only when logging level is debug). 0=none, 10= maximum",
          "default": "0",
          "type": "int"
        },
        {
          "name": "sncEnabled",
          "description": "Enable or disable SNC",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "sncLibrary",
          "description": "Path where the SNC library has been installed"
        },
        {
          "name": "sncQop",
          "description": "SNC Quality of Protection. 1: Authentication only, 2: Authentication and integrity protection, 3: Authentication, integrity and privacy protection (encryption), 8: Global default configuration, 9: Maximum protection",
          "default": "8",
          "type": "int"
        },
        {
          "name": "myName",
          "description": "Own SNC name of the caller. For example: p:CN=MyUserID, O=ACompany, C=EN"
        },
        {
          "name": "partnerName",
          "description": "SNC name of the communication partner server. For example: p:CN=SID, O=ACompany, C=EN"
        },
        {
          "name": "sncAuthMethod",
          "description": "When using SNC, this specifies if SNC should authenticate via SSO or a username/password combination. 1=SSO, 0=username/password",
          "default": "0"
        },
        {
          "name": "sncSSO2",
          "description": "Use SAP Cookie Version 2 as logon ticket for SSO based authentication",
          "default": "1"
        },
        {
          "name": "serviceOffset",
          "deprecated": {
            "forRemoval": true,
            "since": "7.8.0",
            "description": "setServiceOffset not used in JCo3"
          },
          "type": "int"
        }
      ]
    },
    {
      "name": "SapSystemListItem",
      "fullName": "org.frankframework.util.SapSystemListItem",
      "abstract": true,
      "description": "Base class for items of global lists.\n The list itself is contained as a static field.\n New items are registerd using registerItem().\n Typical use: SapSystem.getSystem(name).&lt;method to execute&gt;\n <br/>",
      "elementNames": [],
      "attributes": [
        {
          "name": "name",
          "description": "The name under which the item can be retrieved."
        },
        {
          "name": "aliasFor",
          "description": "If this attribute is set, the item is only an alias for another item."
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "SapSystems",
      "fullName": "org.frankframework.configuration.extensions.SapSystems",
      "elementNames": ["SapSystems"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "sapSystem",
          "type": "org.frankframework.configuration.extensions.ISapSystem"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "ScanTibcoSolutionPipe",
      "fullName": "org.frankframework.extensions.svn.ScanTibcoSolutionPipe",
      "description": "Pipe which scans TIBCO sources in Subversion and creates a report in xml.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["ScanTibcoSolutionPipe"],
      "attributes": [
        {
          "name": "url"
        },
        {
          "name": "level",
          "type": "int"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "NN-Special"
        }
      ]
    },
    {
      "name": "Scheduler",
      "fullName": "org.frankframework.configuration.ScheduleManager",
      "description": "Container for jobs that are scheduled for periodic execution.\n <p>\n Configure/start/stop lifecycles are managed by Spring.",
      "elementNames": ["Scheduler"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "job",
          "description": "Job that is executed periodically. The time of execution can be configured within the job\n or from outside the configuration through the Frank!Console.",
          "type": "org.frankframework.scheduler.job.IJob"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "SchedulerSender",
      "fullName": "org.frankframework.scheduler.SchedulerSender",
      "deprecated": {
        "forRemoval": true,
        "since": "9.0"
      },
      "description": "Registers a trigger in the scheduler so that the message is sent to a {@link org.frankframework.receivers.JavaListener}\n at a scheduled time.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["SchedulerSender"],
      "attributes": [
        {
          "name": "cronExpressionPattern",
          "description": "expression that generates the cron trigger"
        },
        {
          "name": "jobGroup",
          "description": "job group in which the new trigger is to be created (optional)"
        },
        {
          "name": "jobNamePattern",
          "description": "pattern that leads to the name of the registered trigger(optional)"
        },
        {
          "name": "javaListener",
          "description": "java listener to be called when scheduler trigger fires"
        }
      ]
    },
    {
      "name": "SendGridSender",
      "fullName": "org.frankframework.senders.SendGridSender",
      "description": "Sender that sends a mail via SendGrid v3 (cloud-based SMTP provider).\n\n Sample XML file can be found in the path: iaf-core/src/test/resources/emailSamplesXML/emailSample.xml",
      "parent": "org.frankframework.senders.AbstractMailSender",
      "elementNames": ["SendGridSender"],
      "attributes": [
        {
          "name": "timeout",
          "description": "Timeout in ms of obtaining a connection/result.",
          "default": "10000",
          "type": "int"
        },
        {
          "name": "maxConnections",
          "description": "The maximum number of concurrent connections",
          "default": "10",
          "type": "int"
        },
        {
          "name": "maxExecuteRetries",
          "description": "The maximum number of times the execution is retried",
          "default": "1 (for repeatable messages) else 0",
          "type": "int"
        },
        {
          "name": "proxyHost",
          "description": "Proxy host"
        },
        {
          "name": "proxyPort",
          "description": "Proxy port",
          "default": "80",
          "type": "int"
        },
        {
          "name": "proxyAuthAlias",
          "description": "Alias used to obtain credentials for authentication to proxy"
        },
        {
          "name": "proxyUsername",
          "description": "Proxy username"
        },
        {
          "name": "proxyPassword",
          "description": "Proxy password"
        },
        {
          "name": "proxyRealm",
          "description": "Proxy realm"
        },
        {
          "name": "keystore",
          "description": "resource URL to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used."
        },
        {
          "name": "keystoreType",
          "description": "Type of keystore",
          "default": "pkcs12",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "keystoreAuthAlias",
          "description": "Authentication alias used to obtain keystore password"
        },
        {
          "name": "keystorePassword",
          "description": "Default password to access keystore"
        },
        {
          "name": "keystoreAlias",
          "description": "Alias to obtain specific certificate or key in keystore"
        },
        {
          "name": "keystoreAliasAuthAlias",
          "description": "Authentication alias to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keystoreAliasPassword",
          "description": "Default password to authenticate access to certificate or key indicated by <code>keystoreAlias</code>"
        },
        {
          "name": "keyManagerAlgorithm",
          "description": "Key manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "truststore",
          "description": "Resource URL to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used."
        },
        {
          "name": "truststoreType",
          "description": "Type of truststore",
          "default": "jks",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "truststoreAuthAlias",
          "description": "Authentication alias used to obtain truststore password"
        },
        {
          "name": "truststorePassword",
          "description": "Default password to access truststore"
        },
        {
          "name": "trustManagerAlgorithm",
          "description": "Trust manager algorithm. Can be left empty to use the servers default algorithm"
        },
        {
          "name": "verifyHostname",
          "description": "If <code>true</code>, the hostname in the certificate will be checked against the actual hostname of the peer",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "allowSelfSignedCertificates",
          "description": "If <code>true</code>, self signed certificates are accepted",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "ignoreCertificateExpiredException",
          "description": "If <code>true</code>, CertificateExpiredExceptions are ignored",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "followRedirects",
          "description": "If <code>true</code>, a redirect request will be honoured, e.g. to switch to HTTPS",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "staleChecking",
          "description": "Controls whether connections checked to be stale, i.e. appear open, but are not.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "staleTimeout",
          "description": "Used when <code>staleChecking</code> is <code>true</code>. Timeout after which an idle connection will be validated before being used.",
          "default": "5000 ms",
          "type": "int"
        },
        {
          "name": "protocol",
          "description": "Secure socket protocol (such as 'TLSv1.2') to use when a SSLContext object is generated.",
          "default": "TLSv1.2"
        }
      ]
    },
    {
      "name": "SendMessageJob",
      "fullName": "org.frankframework.scheduler.job.SendMessageJob",
      "description": "Scheduled job to send messages to a {@link FrankListener}.\n Message may be `null` (or empty).\n \n <h3>Possible cron expressions:</h3>\n <p>\n A \\\"Cron-Expression\\\" is a string comprised of 6 or 7 fields separated by\n white space. The 6 mandatory and 1 optional fields are as follows:<br/>\n </p>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Field Name</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Values</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Allowed Special Characters</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Seconds</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Minutes</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-59</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Hours</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">0-23</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-31</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Month</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-12 or JAN-DEC</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Day-of-Week</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">1-7 or SUN-SAT</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * ? / L C #</code></td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>Year (Optional)</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">>empty, 1970-2099</td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\"><code>, - * /</code></td>\n   </tr>\n </table>\n </p>\n\n <p>The '*' character is used to specify all values. For example, \\\"*\\\" in\n the minute field means \\\"every minute\\\".</p>\n\n <p>The '?' character is allowed for the day-of-month and day-of-week fields.\n It is used to specify 'no specific value'. This is useful when you need\n to specify something in one of the two fields, but not the other. See the\n examples below for clarification.</p>\n\n <p>The '-' character is used to specify ranges For example \\\"10-12\\\" in the\n hour field means \\\"the hours 10, 11 and 12\\\".</p>\n\n <p>The ',' character is used to specify additional values. For example\n \\\"MON,WED,FRI\\\" in the day-of-week field means \\\"the days Monday,\n Wednesday, and Friday\\\".</p>\n\n <p>The '/' character is used to specify increments. For example \\\"0/15\\\" in\n the seconds field means \\\"the seconds 0, 15, 30, and 45\\\".  And \\\"5/15\\\" in\n the seconds field means \\\"the seconds 5, 20, 35, and 50\\\".  You can also\n specify '/' after the '*' character - in this case '*' is equivalent to\n having '0' before the '/'.</p>\n\n <p>The 'L' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"last\\\", but it has different meaning in each of\n the two fields.  For example, the value \\\"L\\\" in the  day-of-month field means\n \\\"the last day of the month\\\" - day 31 for  January, day 28 for February on\n non-leap years.  If used in the day-of-week field by itself, it simply\n means \\\"7\\\" or \\\"SAT\\\". But if used in the day-of-week field after another value,\n it means \\\"the last xxx day of the month\\\" - for example \\\"6L\\\" means\n \\\"the last Friday of the month\\\".  When using the 'L' option, it is\n important not to specify lists, or ranges of values, as you'll get confusing\n results.</p>\n\n <p>The '#' character is allowed for the day-of-week field.  This character\n is used to specify \\\"the nth\\\" XX day of the month.  For example, the value\n of \\\"6#3\\\" in the day-of-week field means the third Friday of the month\n (day 6 = Friday and \\\"#3\\\" = the 3rd one in the month). Other\n examples: \\\"2#1\\\" = the first Monday of the month and  \\\"4#5\\\" = the fifth\n Wednesday of the month.  Note that if you specify \\\"#5\\\" and there is not 5 of\n the given day-of-week in the month, then no firing will occur that month.</p>\n\n <p>The 'C' character is allowed for the day-of-month and day-of-week fields.\n This character is short-hand for \\\"calendar\\\".  This means values are\n calculated against the associated calendar, if any.  If no calendar is\n associated, then it is equivalent to having an all-inclusive calendar.\n A value of \\\"5C\\\" in the day-of-month field means \\\"the first day included by\n the calendar on or after the 5th\\\".  A value of \\\"1C\\\" in the day-of-week field\n means \\\"the first day included by the calendar on or after Sunday\\\".</p>\n\n <p>The legal characters and the names of months and days of the week are not\n case sensitive.</p>\n\n <p>Here are some full examples:<br/>\n <table cellspacing=\\\"8\\\">\n   <tr>\n     <th align=\\\"left\\\">Expression</th>\n     <th align=\\\"left\\\">&nbsp;</th>\n     <th align=\\\"left\\\">Meaning</th>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0 12 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 12pm (noon) every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? *\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 * * ? 2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every day during the year 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 * 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:59pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0/5 14,18 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 0-5 14 * * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire every minute starting at 2pm and ending at 2:05pm, every day</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 10,44 14 ? 3 WED\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 2:10pm and at 2:44pm every Wednesday in the month of March.</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * MON-FRI\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 15 * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the 15th day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 L * ?\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last day of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the last Friday of every month</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6L 2002-2005\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on every last friday of every month during the years 2002, 2003, 2004 and 2005</td>\n   </tr>\n   <tr>\n     <td align=\\\"left\\\"><code>\\\"0 15 10 ? * 6#3\\\"</code></td>\n     <td align=\\\"left\\\">&nbsp;</th>\n     <td align=\\\"left\\\">Fire at 10:15am on the third Friday of every month</td>\n   </tr>\n </table>\n </p>\n\n <p>Pay attention to the effects of '?' and '*' in the day-of-week and\n day-of-month fields!</p>",
      "parent": "org.frankframework.scheduler.AbstractJobDef",
      "elementNames": ["SendMessageJob"],
      "attributes": [
        {
          "name": "javaListener",
          "mandatory": true,
          "description": "JavaListener to send the message to"
        },
        {
          "name": "message",
          "description": "message to be sent into the pipeline"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "Support for specifying both a day-of-week and a day-of-month\n          value is not complete (you'll need to use the '?' character in on of these fields)."
        },
        {
          "type": "INFO",
          "value": "Be careful when setting fire times between mid-night and 1:00 AM -\n          \"daylight savings\" can cause a skip or a repeat depending on whether\n          the time moves back or jumps forward."
        },
        {
          "type": "INFO",
          "value": "Specified in the Configuration.xml inside a <code>&lt;scheduler&gt;</code> element. \n          The scheduler element must be a direct child of configuration, not of adapter."
        },
        {
          "type": "TIP",
          "value": "All registered jobs are displayed in the Frank!Console under 'Scheduler'."
        },
        {
          "type": "WARNING",
          "value": "Support for the features described for the 'C' character is not complete."
        }
      ]
    },
    {
      "name": "SendTibcoMessage",
      "fullName": "org.frankframework.extensions.tibco.SendTibcoMessage",
      "description": "Sends a message to a Tibco queue.",
      "parent": "org.frankframework.pipes.TimeoutGuardPipe",
      "elementNames": ["SendTibcoMessagePipe"],
      "attributes": [
        {
          "name": "url",
          "description": "URL or base of URL to be used. When multiple URLs are defined (comma separated list), the first URL is used of which the server has an active state"
        },
        {
          "name": "authAlias",
          "description": "alias used to obtain credentials for authentication to host"
        },
        {
          "name": "username",
          "description": "username used in authentication to host"
        },
        {
          "name": "password",
          "description": "password used in authentication to host"
        },
        {
          "name": "queueName",
          "description": "The name of the queue which is used for browsing one queue"
        },
        {
          "name": "messageProtocol",
          "description": "Protocol of Tibco service to be called",
          "enum": "org.frankframework.extensions.tibco.SendTibcoMessage.MessageProtocol"
        },
        {
          "name": "replyTimeout",
          "description": "Maximum time in milliseconds to wait for a reply. 0 means no timeout. (Only for messageProtocol=RR)",
          "default": "5000",
          "type": "int"
        },
        {
          "name": "soapAction",
          "description": "If empty then derived from queueName (if $messagingLayer='P2P' then '$applicationFunction' else '$operationName_$operationVersion)"
        },
        {
          "name": "emsPropertiesFile",
          "description": "Location to a <code>jndi.properties</code> file for additional EMS (SSL) properties"
        }
      ],
      "parameters": [
        {
          "name": "url",
          "description": "When a parameter with name url is present, it is used instead of the url specified by the attribute"
        },
        {
          "name": "authAlias",
          "description": "When a parameter with name authAlias is present, it is used instead of the authAlias specified by the attribute"
        },
        {
          "name": "username",
          "description": "When a parameter with name userName is present, it is used instead of the userName specified by the attribute"
        },
        {
          "name": "password",
          "description": "When a parameter with name password is present, it is used instead of the password specified by the attribute"
        },
        {
          "name": "queueName",
          "description": "When a parameter with name queueName is present, it is used instead of the queueName specified by the attribute"
        },
        {
          "name": "messageProtocol",
          "description": "When a parameter with name messageProtocol is present, it is used instead of the messageProtocol specified by the attribute"
        },
        {
          "name": "replyTimeout",
          "description": "When a parameter with name replyTimeout is present, it is used instead of the replyTimeout specified by the attribute"
        },
        {
          "name": "When",
          "description": "a parameter with name soapAction is present, it is used instead of the soapAction specified by the attribute"
        }
      ]
    },
    {
      "name": "SenderMonitorAdapter",
      "fullName": "org.frankframework.monitoring.SenderMonitorAdapter",
      "deprecated": {
        "forRemoval": false,
        "since": ""
      },
      "description": "Class has been renamed to 'MonitorDestination'.",
      "parent": "org.frankframework.monitoring.MonitorDestination",
      "elementNames": ["SenderMonitorAdapterDestination"]
    },
    {
      "name": "SenderPipe",
      "fullName": "org.frankframework.pipes.SenderPipe",
      "description": "Sends a message using an {@link ISender sender} and optionally receives a reply from the same sender.",
      "parent": "org.frankframework.pipes.MessageSendingPipe",
      "elementNames": ["SenderPipe"],
      "children": [
        {
          "reintroduced": true,
          "multiple": false,
          "roleName": "messageLog",
          "description": "log of all messages sent",
          "type": "org.frankframework.core.ITransactionalStorage"
        },
        {
          "reintroduced": true,
          "multiple": false,
          "roleName": "inputWrapper",
          "description": "specification of Pipe to wrap or unwrap request messages",
          "type": "org.frankframework.core.IWrapperPipe"
        },
        {
          "reintroduced": true,
          "multiple": false,
          "roleName": "inputValidator",
          "description": "specification of Pipe to validate request messages, or request and response message if configured as mixed mode validator",
          "type": "org.frankframework.core.IValidator"
        },
        {
          "mandatory": true,
          "reintroduced": true,
          "multiple": false,
          "roleName": "sender",
          "description": "The sender that should send the message",
          "type": "org.frankframework.core.ISender"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "EIP",
          "value": "Endpoint"
        }
      ]
    },
    {
      "name": "SenderSeries",
      "fullName": "org.frankframework.senders.SenderSeries",
      "description": "Series of Senders, that are executed one after another.",
      "parent": "org.frankframework.senders.AbstractSenderWrapper",
      "elementNames": ["SenderSeriesSender"],
      "attributes": [
        {
          "name": "synchronous",
          "type": "bool"
        }
      ],
      "children": [
        {
          "mandatory": true,
          "multiple": true,
          "roleName": "sender",
          "description": "one or more specifications of senders that will be executed one after another. Each sender will get the result of the preceding one as input.",
          "type": "org.frankframework.core.ISender"
        }
      ]
    },
    {
      "name": "SenderWrapper",
      "fullName": "org.frankframework.senders.SenderWrapper",
      "description": "Wrapper for senders, that allows to get input from a session variable, and to store output in a session variable.",
      "parent": "org.frankframework.senders.AbstractSenderWrapper",
      "elementNames": ["SenderWrapperSender"],
      "children": [
        {
          "multiple": false,
          "roleName": "sender",
          "description": "specification of sender to send messages with",
          "type": "org.frankframework.core.ISender"
        }
      ],
      "parametersDescription": "any parameters defined on the SenderWrapper will be handed to the sender, if this is a {@link ISenderWithParameters}"
    },
    {
      "name": "SftpFileSystemListener",
      "fullName": "org.frankframework.receivers.SftpFileSystemListener",
      "description": "File listener for an SFTP connection.\n\n {@link IPullingListener listener} that looks in a {@link IBasicFileSystem FileSystem} for files.\n When a file is found, it is moved to an in-process folder, so that it isn't found more than once.\n <br/>\n The information specified by {@link #setMessageType(IMessageType)} is then passed to the pipeline.",
      "parent": "org.frankframework.filesystem.AbstractFileSystemListener",
      "elementNames": ["SftpFileSystemListener"],
      "attributes": [
        {
          "name": "messageType",
          "description": "Determines the contents of the message that is sent to the pipeline. The value of the attribute matching the searchKey is returned when using <code>ATTRIBUTE</code>",
          "default": "PATH",
          "enum": "org.frankframework.filesystem.AbstractFileSystemListener.MessageType"
        },
        {
          "name": "remoteDirectory",
          "description": "Path of the file or directory to start working.",
          "default": "Home folder of the sftp user"
        },
        {
          "name": "host",
          "description": "Name or ip address of remote host"
        },
        {
          "name": "port",
          "description": "Port number of remote host",
          "default": "21",
          "type": "int"
        },
        {
          "name": "authAlias",
          "description": "Name of the alias to obtain credentials to authenticatie on remote server"
        },
        {
          "name": "username",
          "description": "Name of the user to authenticatie on remote server"
        },
        {
          "name": "password",
          "description": "Password to authenticatie on remote server"
        },
        {
          "name": "proxyHost",
          "description": "Proxy hostname"
        },
        {
          "name": "proxyPort",
          "description": "Proxy port",
          "default": "1080",
          "type": "int"
        },
        {
          "name": "proxyAuthAlias",
          "description": "alias to obtain credentials to authenticate on proxy"
        },
        {
          "name": "proxyUsername",
          "description": "Default user name in case proxy requires authentication"
        },
        {
          "name": "proxyPassword",
          "description": "Default password in case proxy requires authentication"
        },
        {
          "name": "proxyTransportType",
          "description": "Transport type in case of sftp",
          "default": "SOCKS5",
          "enum": "org.frankframework.filesystem.sftp.SftpSession.TransportType"
        },
        {
          "name": "prefCSEncryption",
          "description": "Optional preferred encryption from client to server for sftp protocol"
        },
        {
          "name": "prefSCEncryption",
          "description": "Optional preferred encryption from server to client for sftp protocol"
        },
        {
          "name": "privateKeyFilePath",
          "description": "Path to private key file for sftp authentication"
        },
        {
          "name": "privateKeyAuthAlias",
          "description": "Name of the alias to obtain credentials for passphrase of private key file"
        },
        {
          "name": "privateKeyPassword",
          "description": "Passphrase of private key file"
        },
        {
          "name": "knownHostsPath",
          "description": "Path to file with knownhosts"
        },
        {
          "name": "strictHostKeyChecking",
          "description": "Verify the hosts againt the knownhosts file.",
          "default": "true",
          "type": "bool"
        }
      ],
      "notes": [
        {
          "type": "INFO",
          "value": "To avoid problems with duplicate filenames in folders like the <code>errorFolder</code> or <code>processedFolder</code>,\n you should configure either <code>overwrite=&quot;true&quot;</code>, configure <code>numberOfBackups</code> to a value larger than 0, or\n configure an <code>inProcessFolder</code> and <code>fileTimeSensitive=&quot;true&quot;</code>.\n These options can be used together as well."
        },
        {
          "type": "WARNING",
          "value": "In addition to the above, prior to release 9.0 it was not sufficient to configure <code>inProcessFolder</code> and <code>fileTimeSensitive</code>\n to avoid potential duplicate filename errors. Prior to release 9.0, it is recommended to configure <code>numberOfBackups</code> to avoid these issues."
        }
      ]
    },
    {
      "name": "SftpFileSystemSender",
      "fullName": "org.frankframework.senders.SftpFileSystemSender",
      "parent": "org.frankframework.filesystem.AbstractFileSystemSender",
      "elementNames": ["SftpFileSystemSender"],
      "attributes": [
        {
          "name": "remoteDirectory",
          "description": "Path of the file or directory to start working.",
          "default": "Home folder of the sftp user"
        },
        {
          "name": "host",
          "description": "Name or ip address of remote host"
        },
        {
          "name": "port",
          "description": "Port number of remote host",
          "default": "21",
          "type": "int"
        },
        {
          "name": "authAlias",
          "description": "Name of the alias to obtain credentials to authenticatie on remote server"
        },
        {
          "name": "username",
          "description": "Name of the user to authenticatie on remote server"
        },
        {
          "name": "password",
          "description": "Password to authenticatie on remote server"
        },
        {
          "name": "proxyHost",
          "description": "Proxy hostname"
        },
        {
          "name": "proxyPort",
          "description": "Proxy port",
          "default": "1080",
          "type": "int"
        },
        {
          "name": "proxyAuthAlias",
          "description": "alias to obtain credentials to authenticate on proxy"
        },
        {
          "name": "proxyUsername",
          "description": "Default user name in case proxy requires authentication"
        },
        {
          "name": "proxyPassword",
          "description": "Default password in case proxy requires authentication"
        },
        {
          "name": "proxyTransportType",
          "description": "Transport type in case of sftp",
          "default": "SOCKS5",
          "enum": "org.frankframework.filesystem.sftp.SftpSession.TransportType"
        },
        {
          "name": "prefCSEncryption",
          "description": "Optional preferred encryption from client to server for sftp protocol"
        },
        {
          "name": "prefSCEncryption",
          "description": "Optional preferred encryption from server to client for sftp protocol"
        },
        {
          "name": "privateKeyFilePath",
          "description": "Path to private key file for sftp authentication"
        },
        {
          "name": "privateKeyAuthAlias",
          "description": "Name of the alias to obtain credentials for passphrase of private key file"
        },
        {
          "name": "privateKeyPassword",
          "description": "Passphrase of private key file"
        },
        {
          "name": "knownHostsPath",
          "description": "Path to file with knownhosts"
        },
        {
          "name": "strictHostKeyChecking",
          "description": "Verify the hosts againt the knownhosts file.",
          "default": "true",
          "type": "bool"
        }
      ]
    },
    {
      "name": "ShadowSender",
      "fullName": "org.frankframework.senders.ShadowSender",
      "description": "Collection of Senders, that are executed all at the same time. Once the results are processed, all results will be sent to the resultSender,\n while the original sender will return its result to the pipeline.\n\n <p>Multiple sub-senders can be configured within the ShadowSender, the minimum amount of senders is 2 (originalSender + resultSender)</p>",
      "parent": "org.frankframework.senders.ParallelSenders",
      "elementNames": ["ShadowSender"],
      "attributes": [
        {
          "name": "originalSender",
          "description": "Name of the sender that is considered that is considered to be the golden standard, i.e. the source of truth.",
          "default": "the first sender specified"
        },
        {
          "name": "resultSender",
          "description": "The sender name which will process the results",
          "default": "the last sender specified"
        },
        {
          "name": "waitForShadowsToFinish",
          "description": "If set <code>true</code> the sender will wait for all shadows to have finished. Otherwise the collection of results will happen in a background thread.",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "SharedResources",
      "fullName": "org.frankframework.configuration.SharedResources",
      "elementNames": ["SharedResources"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "sharedResource",
          "type": "org.frankframework.core.SharedResource"
        },
        {
          "multiple": true,
          "roleName": "httpSession",
          "type": "org.frankframework.http.HttpSession"
        }
      ],
      "labels": [
        {
          "label": "Components",
          "value": "Other"
        }
      ]
    },
    {
      "name": "SignaturePipe",
      "fullName": "org.frankframework.pipes.SignaturePipe",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["SignaturePipe"],
      "attributes": [
        {
          "name": "action",
          "description": "Action to be taken when pipe is executed.",
          "default": "SIGN",
          "enum": "org.frankframework.pipes.SignaturePipe.Action"
        },
        {
          "name": "algorithm",
          "description": "The signing algorithm",
          "default": "ALGORITHM_DEFAULT"
        },
        {
          "name": "provider",
          "description": "Cryptography provider"
        },
        {
          "name": "signatureBase64",
          "description": "if true, the signature is (expected to be) base64 encoded",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "keystore",
          "mandatory": true,
          "description": "Keystore to obtain signing key"
        },
        {
          "name": "keystoreType",
          "description": "Type of keystore, can be pkcs12 or pem",
          "default": "pkcs12",
          "enum": "org.frankframework.encryption.KeystoreType"
        },
        {
          "name": "keystoreAuthAlias",
          "description": "Alias used to obtain keystore password"
        },
        {
          "name": "keystorePassword",
          "description": "Keystore password"
        },
        {
          "name": "keystoreAlias",
          "description": "Alias in keystore"
        },
        {
          "name": "keystoreAliasAuthAlias",
          "description": "Alias used to obtain keystoreAlias password"
        },
        {
          "name": "keystoreAliasPassword",
          "description": "KeystoreAlias password"
        },
        {
          "name": "keyManagerAlgorithm",
          "description": "Key manager algorithm. Can be left empty to use the servers default algorithm"
        }
      ],
      "parameters": [
        {
          "name": "signature",
          "description": "the signature to verify"
        }
      ],
      "forwards": [
        {
          "name": "failure",
          "description": "verification has failed"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "SimpleJdbcListener",
      "fullName": "org.frankframework.jdbc.SimpleJdbcListener",
      "description": "Database Listener that returns a count of messages available, but does not perform any locking or\n other management of processing messages in parallel.",
      "parent": "org.frankframework.jdbc.JdbcFacade",
      "elementNames": ["SimpleJdbcListener"],
      "attributes": [
        {
          "name": "selectQuery",
          "description": "count query that returns the number of available records. when there are available records the pipeline is activated"
        },
        {
          "name": "trace",
          "type": "bool"
        }
      ]
    },
    {
      "name": "SizePipe",
      "fullName": "org.frankframework.pipes.SizePipe",
      "description": "Returns the number of bytes or characters in the input.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["SizePipe"],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "SkipPipe",
      "fullName": "org.frankframework.pipes.SkipPipe",
      "description": "Skip a number of bytes or characters from the input message.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["SkipPipe"],
      "attributes": [
        {
          "name": "skip",
          "description": "Number of bytes (for binary input) or characters (for character input) to skip. An empty byte array or string is returned when skip is larger than the length of the input.",
          "default": "0",
          "type": "int"
        },
        {
          "name": "length",
          "description": "If length>=0 only these number of bytes (for binary input) or characters (for character input) is returned.",
          "default": "-1",
          "type": "int"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "SoapErrorMessage",
      "fullName": "org.frankframework.errormessageformatters.SoapErrorMessage",
      "deprecated": {
        "forRemoval": true,
        "since": "7.7.0",
        "description": "Use SoapErrorMessageFormatter instead"
      },
      "elementNames": ["SoapErrorMessageErrorMessageFormatter"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "SoapErrorMessageFormatter",
      "fullName": "org.frankframework.errormessageformatters.SoapErrorMessageFormatter",
      "description": "ErrorMessageFormatter that returns a soap fault message.",
      "elementNames": ["SoapErrorMessageFormatter"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "SoapValidator",
      "fullName": "org.frankframework.soap.SoapValidator",
      "description": "XmlValidator that will automatically add the SOAP envelope XSD to the set of XSD's used for validation.\n\n Before the <code>outputSoapBody</code> attribute was introduced, two validators were used for a request-reply pattern (an inputValidator for the request and an outputValidator for the reply).\n These inputValidator and outputValidator were identical except for the child element of the SOAP body. Because validators use relatively a lot of memory, the <code>outputSoapBody</code> attribute was added which replaces the outputValidator.\n Both the request and the reply are then validated by the inputValidator.\n <p>To generate a wsdl with a soap action included one of the following properties must be set to the expected soapAction</p>\n <table border=\\\"1\\\">\n <tr><td>wsdl.${adapterName}.${listenerName}.soapAction</td></tr>\n <tr><td>wsdl.${adapterName}.soapAction</td></tr>\n <tr><td>wsdl.soapAction</td></tr>\n </table>",
      "parent": "org.frankframework.pipes.Json2XmlValidator",
      "elementNames": [
        "SoapInputValidator",
        "SoapOutputValidator",
        "SoapValidatorPipe"
      ],
      "attributes": [
        {
          "name": "root",
          "deprecated": {
            "forRemoval": false,
            "since": ""
          },
          "description": "always envelope (not allowed to change)",
          "default": "envelope"
        },
        {
          "name": "soapBody",
          "description": "Name of the child element of the SOAP body, or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)"
        },
        {
          "name": "outputSoapBody",
          "description": "Identical to the <code>soapBody</code> attribute except that it's used for the output message instead of the input message. For more information see <a href=\\\"#note1\\\">note 1</a>"
        },
        {
          "name": "soapHeader",
          "description": "Name of the child element of the SOAP header, or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)"
        },
        {
          "name": "soapHeaderNamespace",
          "description": "Can be used when the SOAP header element exists multiple times"
        },
        {
          "name": "soapVersion",
          "description": "SOAP envelope XSD version to use",
          "default": "1.1",
          "enum": "org.frankframework.soap.SoapVersion"
        },
        {
          "name": "allowPlainXml",
          "description": "Allow plain XML, without a SOAP Envelope, too. Be aware that setting this true inhibits the capability to test for exit specific response roots in SOAP messages",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "ignoreUnknownNamespaces",
          "description": "Ignore namespaces in the input message which are unknown. If the XSD used has elementFormDefault=unqualified, it is necessary to set this to true. Be aware, however, that\n this will inhibit the validator to detect validation failures of namespaceless subelements of the SoapBody.",
          "default": "true when <code>schema</code> or <code>noNamespaceSchemaLocation</code> is used, false otherwise",
          "type": "bool"
        }
      ]
    },
    {
      "name": "SoapWrapperPipe",
      "fullName": "org.frankframework.soap.SoapWrapperPipe",
      "description": "Pipe to wrap or unwrap a message from/into a SOAP Envelope.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": [
        "SoapInputWrapper",
        "SoapOutputWrapper",
        "SoapWrapperPipe"
      ],
      "attributes": [
        {
          "name": "direction",
          "default": "wrap",
          "enum": "org.frankframework.core.IWrapperPipe.Direction"
        },
        {
          "name": "soapVersion",
          "description": "Soap version to use",
          "default": "auto",
          "enum": "org.frankframework.soap.SoapVersion"
        },
        {
          "name": "soapNamespace",
          "description": "(only used when direction=<code>wrap</code>) Namespace of the soap envelope",
          "default": "auto determined from soapVersion"
        },
        {
          "name": "soapNamespaceSessionKey",
          "description": "Key of session variable to store auto-detected soapNamespace",
          "default": "If configured as Pipeline Input Wrapper or PipeLine Output Wrapper: <code>soapNamespace</code>"
        },
        {
          "name": "soapHeaderSessionKey",
          "description": "Key of session variable to store soap header",
          "default": "If configured as Pipeline Input Wrapper and direction=<code>unwrap</code>: <code>soapHeader</code>"
        },
        {
          "name": "encodingStyle",
          "description": "The encodingStyle to be set in the soap header"
        },
        {
          "name": "serviceNamespace",
          "description": "The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent"
        },
        {
          "name": "soapHeaderStyleSheet",
          "description": "(only used when direction=<code>wrap</code>) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputType=<code>xml</code> and xsltVersion="
        },
        {
          "name": "soapBodyStyleSheet",
          "description": "(only used when direction=<code>wrap</code>) Stylesheet to apply to the input message. Note: outputType=<code>xml</code> and xsltVersion=2"
        },
        {
          "name": "removeOutputNamespaces",
          "description": "(only used when direction=<code>unwrap</code>) If <code>true</code>, namespaces (and prefixes) in the content of the soap body are removed",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "removeUnusedOutputNamespaces",
          "description": "(only used when direction=<code>unwrap</code> and <code>removeoutputnamespaces=false</code>) If <code>true</code>, unused namespaces in the content of the soap body are removed",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "outputNamespace",
          "description": "(only used when direction=<code>wrap</code>) If not empty, this namespace is added to the root element in the soap body"
        },
        {
          "name": "root",
          "description": "If not empty, the root element in the soap body is changed to this value"
        },
        {
          "name": "ignoreSoapFault",
          "description": "(only used when direction=<code>unwrap</code>) If <code>false</code> and the soap body contains a soap fault, a PipeRunException is thrown",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "allowPlainXml",
          "description": "For direction=<code>unwrap</code> only: if true, allow unwrapped xml too",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "wssAuthAlias",
          "description": "alias used to obtain credentials for authentication to WebServiceSecurity"
        },
        {
          "name": "wssUserName",
          "description": "Default username for WebServiceSecurity"
        },
        {
          "name": "wssPassword",
          "description": "Default password for WebServiceSecurity"
        },
        {
          "name": "wssPasswordDigest",
          "description": "If true, the password is sent digested; Otherwise it is sent in clear text",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "omitXmlDeclaration",
          "description": "For direction=<code>wrap</code> only: When false, adds an XML declaration to the output message.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "name",
          "description": "The functional name of this pipe. Can be referenced by the <code>path</code> attribute of a {@link PipeForward}."
        }
      ],
      "parametersDescription": "Any parameters defined on the pipe will be applied to the created transformer."
    },
    {
      "name": "StoredProcedureQuerySender",
      "fullName": "org.frankframework.jdbc.StoredProcedureQuerySender",
      "description": "StoredProcedureQuerySender is used to send stored procedure queries and retrieve the result.\n\n <p>\n     <h3>QueryType settings and OUTPUT parameters</h3>\n The StoredProcedureQuerySender class has the following features:\n <ul>\n     <li>It supports setting the output parameters of the stored procedure by setting 'mode' attribute of\n     the corresponding 'Param' to 'OUTPUT' or 'INOUT'.</li>\n     <li>The queryType can only be 'SELECT' or 'OTHER'.</li>\n     <li>Use queryType 'SELECT' when the stored procedure only returns a set of rows, and you need\n     the output to be the format as {@link FixedQuerySender} (see {@link DB2XMLWriter}).</li>\n     <li>Use queryType 'OTHER' if the stored procedure has one or more output parameters. With this query type,\n     the stored procedure can return a result-set along with returning some values in output parameters.\n     Depending on the database, the stored procedure can even returning multiple result sets or a combination\n     of result sets as return values, and result sets as REF_CURSOR OUT parameters. </li>\n </ul>\n </p>\n <p>\n     All stored procedure parameters that are not fixed, so specified in the query with a <code>?</code>, should\n     have a corresponding {@link IParameter} entry. Output parameters should have <code>mode=&quot;OUTPUT&quot;</code>, or\n     <code>mode=&quot;INOUT&quot;</code> depending on how the stored procedure is defined.\n </p>\n <p>\n\t<h3>Sample Output for queryType=OTHER</h3>\n\t<h4>Basic Example with Only Simple Output Parameters</h4>\n <pre><code>&lt;resultset&gt;\n \t   &lt;result param=&quot;r1&quot; type=&quot;STRING&quot;&gt;MESSAGE-CONTENTS&lt;/result&gt;\n     &lt;result param=&quot;r2&quot; type=&quot;STRING&quot;&gt;E&lt;/result&gt;\n &lt;/resultset&gt;</code></pre>\n\n\t<h4>Example with Resultset and Simple Output Parameters</h4>\n <pre><code>&lt;resultset&gt;\n \t\t &lt;result resultNr=&quot;1&quot;&gt;\n \t\t\t &lt;fielddefinition&gt;\n \t\t\t\t&lt;field name=&quot;FIELDNAME&quot;\n \t\t\t\t\t\t  type=&quot;columnType&quot;\n \t\t\t\t\t\t  columnDisplaySize=&quot;&quot;\n \t\t\t\t\t\t  precision=&quot;&quot;\n \t\t\t\t\t\t  scale=&quot;&quot;\n \t\t\t\t\t\t  isCurrency=&quot;&quot;\n \t\t\t\t\t\t  columnTypeName=&quot;&quot;\n \t\t\t\t\t\t  columnClassName=&quot;&quot;/&gt;\n \t\t\t\t &lt;field ...../&gt;\n  \t\t     &lt;/fielddefinition&gt;\n \t\t\t &lt;rowset&gt;\n \t\t\t\t &lt;row number=&quot;0&quot;&gt;\n \t\t\t\t\t &lt;field name=&quot;TKEY&quot;&gt;MSG-ID&lt;/field&gt;\n \t\t\t\t\t &lt;field name=&quot;TCHAR&quot;&gt;E&lt;/field&gt;\n \t\t\t\t\t &lt;field name=&quot;TMESSAGE&quot;&gt;MESSAGE-CONTENTS&lt;/field&gt;\n \t\t\t\t\t &lt;field name=&quot;TCLOB&quot; null=&quot;true&quot;/&gt;\n \t\t\t\t\t &lt;field name=&quot;TBLOB&quot; null=&quot;true&quot;/&gt;\n \t\t\t\t &lt;/row&gt;\n                  &lt;row number=&quot;1&quot; ...../&gt;\n \t\t\t &lt;/rowset&gt;\n \t\t &lt;/result&gt;\n \t\t &lt;result param=&quot;count&quot; type=&quot;INTEGER&quot;&gt;5&lt;/result&gt;\n &lt;/resultset&gt;</code></pre>\n\n\t<h4>Example with Simple and Cursor Output Parameters</h4>\n <pre><code>&lt;resultset&gt;\n \t\t&lt;result param=&quot;count&quot; type=&quot;INTEGER&quot;&gt;5&lt;/result&gt;\n \t\t&lt;result param=&quot;cursor1&quot; type=&quot;LIST&quot;&gt;\n \t\t\t &lt;fielddefinition&gt;\n \t\t\t\t&lt;field name=&quot;FIELDNAME&quot;\n \t\t\t\t\t\t  type=&quot;columnType&quot;\n \t\t\t\t\t\t  columnDisplaySize=&quot;&quot;\n \t\t\t\t\t\t  precision=&quot;&quot;\n \t\t\t\t\t\t  scale=&quot;&quot;\n \t\t\t\t\t\t  isCurrency=&quot;&quot;\n \t\t\t\t\t\t  columnTypeName=&quot;&quot;\n \t\t\t\t\t\t  columnClassName=&quot;&quot;/&gt;\n \t\t\t\t &lt;field ...../&gt;\n  \t\t&lt;/fielddefinition&gt;\n \t\t\t&lt;rowset&gt;\n \t\t\t\t&lt;row number=&quot;0&quot;&gt;\n \t\t\t\t\t&lt;field name=&quot;TKEY&quot;&gt;MSG-ID&lt;/field&gt;\n \t\t\t\t\t&lt;field name=&quot;TCHAR&quot;&gt;E&lt;/field&gt;\n \t\t\t\t\t&lt;field name=&quot;TMESSAGE&quot;&gt;MESSAGE-CONTENTS&lt;/field&gt;\n \t\t\t\t\t&lt;field name=&quot;TCLOB&quot; null=&quot;true&quot;/&gt;\n \t\t\t\t\t&lt;field name=&quot;TBLOB&quot; null=&quot;true&quot;/&gt;\n \t\t\t\t&lt;/row&gt;\n \t\t\t\t&lt;row number=&quot;1&quot; ..... /&gt;\n \t\t\t&lt;/rowset&gt;\n \t\t&lt;/result&gt;\n \t&lt;/resultset&gt;</code></pre>\n </p>",
      "parent": "org.frankframework.jdbc.FixedQuerySender",
      "elementNames": ["StoredProcedureQuerySender"],
      "attributes": [
        {
          "name": "query",
          "mandatory": true,
          "description": "A SQL statement that calls a stored procedure. The statement should begin with the <code>CALL</code> or <code>EXEC</code>\n SQL keyword depending on SQL dialect. In case of doubt, the safe choice is to always start with <code>CALL</code> and choose Oracle dialect."
        },
        {
          "name": "queryType",
          "description": "The query type. For stored procedures, valid query types are {@link AbstractJdbcQuerySender.QueryType#SELECT} and {@link AbstractJdbcQuerySender.QueryType#OTHER}.\n Use {@link AbstractJdbcQuerySender.QueryType#SELECT} when your stored procedure returns a row set (not supported by Oracle and PostgreSQL).\n Use {@link AbstractJdbcQuerySender.QueryType#OTHER} when your stored procedure returns values via <code>OUT</code> or <code>INOUT</code> parameters, or does not return\n anything at all.\n <p>\n Using any other value will be rejected.\n </p>",
          "default": "OTHER",
          "enum": "org.frankframework.jdbc.AbstractJdbcQuerySender.QueryType"
        }
      ],
      "nonInheritedAttributes": [
        "columnsReturned",
        "lockRows",
        "lockWait",
        "blobColumn",
        "blobSessionKey",
        "blobsCompressed",
        "blobBase64Direction",
        "blobCharset",
        "blobSmartGet",
        "clobColumn",
        "clobSessionKey",
        "avoidLocking",
        "maxRows",
        "startRow",
        "rowIdSessionKey"
      ],
      "parametersDescription": "All parameters present are applied to the query to be executed.",
      "notes": [
        {
          "type": "INFO",
          "value": "Support for stored procedures is currently experimental and changes in the currently produced output-format are expected."
        },
        {
          "type": "INFO",
          "value": "Please note that the default value of <code>trimSpaces</code> is `true`"
        }
      ]
    },
    {
      "name": "Stream2StringPipe",
      "fullName": "org.frankframework.pipes.Stream2StringPipe",
      "deprecated": {
        "forRemoval": true,
        "since": "7.6.0"
      },
      "description": "Return simply the input message from stream to string.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["Stream2StringPipe"]
    },
    {
      "name": "StreamLineIteratorPipe",
      "fullName": "org.frankframework.pipes.StreamLineIteratorPipe",
      "description": "Sends a message to a Sender for each line of its input, that must be an InputStream.",
      "parent": "org.frankframework.pipes.StringIteratorPipe",
      "elementNames": ["StreamLineIteratorPipe"],
      "attributes": [
        {
          "name": "endOfLineString",
          "description": "If set, each record has to end with this string. If a line read doesn't end with this string more lines are added (including line separators) until the total record ends with the given string"
        },
        {
          "name": "startOfLineString",
          "description": "Marks the start of a new record. If set, a new record is started when this line is read."
        },
        {
          "name": "closeInputstreamOnExit",
          "description": "If set to <code>false</code>, the inputstream is not closed after it has been used",
          "default": "true",
          "type": "bool"
        }
      ]
    },
    {
      "name": "StreamPipe",
      "fullName": "org.frankframework.pipes.StreamPipe",
      "description": "Stream an input stream to an output stream.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["StreamPipe"],
      "attributes": [
        {
          "name": "extractFirstStringPart",
          "description": "(only used for parameter <code>httprequest</code>) when true the first part is not put in a session key but returned to the pipeline (as the result of this pipe)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "multipartXmlSessionKey",
          "description": "(only used when <code>extractfirststringpart=true</code>) the session key to put the xml in with info about the stored parts",
          "default": "<code>multipartxml</code>"
        },
        {
          "name": "checkAntiVirus",
          "description": "(only used for parameter <code>httprequest</code>) when true parts are checked for antivirus scan returncode. these antivirus scan parts have been added by another application (so the antivirus scan is not performed in this pipe). for each file part an antivirus scan part have been added by this other application (directly after this file part)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "antiVirusPartName",
          "description": "(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) name of antivirus scan status parts",
          "default": "<code>antivirus_rc</code>"
        },
        {
          "name": "antiVirusMessagePartName",
          "description": "(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) name of antivirus scan message parts",
          "default": "<code>antivirus_msg</code>"
        },
        {
          "name": "antiVirusPassedMessage",
          "description": "(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) message of antivirus scan parts which indicates the antivirus scan passed",
          "default": "<code>pass</code>"
        },
        {
          "name": "antiVirusFailureAsSoapFault",
          "description": "(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) when true and the antivirusfailed forward is specified and the antivirus scan did not pass, a soap fault is returned instead of only a plain error message",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "antiVirusFailureReasonSessionKey",
          "description": "(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) if not empty and the antivirusfailed forward is specified and the antivirus scan did not pass, the error message (or soap fault) is stored in this session key and the first string part is returned to the pipeline"
        }
      ],
      "parameters": [
        {
          "name": "inputStream",
          "description": "the input stream object to use instead of an input stream object taken from pipe input"
        },
        {
          "name": "outputStream\t\tthe",
          "description": "output stream object to use unless httpResponse parameter is specified"
        },
        {
          "name": "httpResponse\t\tan",
          "description": "HttpServletResponse object to stream to (the output stream is retrieved by calling getOutputStream() on the HttpServletResponse object)"
        },
        {
          "name": "httpRequest\t\tan",
          "description": "HttpServletRequest object to stream from. Each part is put in a session key and the result of this pipe is a xml with info about these parts and the name of the session key"
        },
        {
          "name": "contentType\t\tthe",
          "description": "Content-Type header to set in case httpResponse was specified"
        },
        {
          "name": "contentDisposition\tthe",
          "description": "Content-Disposition header to set in case httpResponse was specified"
        },
        {
          "name": "redirectLocation\tthe",
          "description": "redirect location to set in case httpResponse was specified"
        }
      ],
      "forwards": [
        {
          "name": "antiVirusFailed",
          "description": "virus checking indicates a problem with the message"
        }
      ]
    },
    {
      "name": "StreamTransformerPipe",
      "fullName": "org.frankframework.batch.StreamTransformerPipe",
      "description": "Pipe for transforming a stream with records. Records in the stream must be separated with new line characters.\n\n For file containing only a single type of lines, a simpler configuration without managers and flows\n can be specified. A single recordHandler with key=\\\"*\\\" and (optional) a single resultHandler need to be specified.\n Each line will be handled by this recordHandler and resultHandler.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["StreamTransformerPipe"],
      "attributes": [
        {
          "name": "storeOriginalBlock",
          "description": "If set <code>true</code> the original block is stored under the session key <code>originalBlock</code>.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "closeInputstreamOnExit",
          "description": "If set to <code>false</code>, the inputstream is not closed after it has been used.",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "charset",
          "description": "Characterset used for reading file or inputstream\"",
          "default": "UTF-8"
        }
      ],
      "children": [
        {
          "deprecated": true,
          "multiple": true,
          "roleName": "child",
          "description": "Register a uniquely named manager.",
          "type": "org.frankframework.batch.IRecordHandlerManager"
        },
        {
          "mandatory": true,
          "multiple": true,
          "roleName": "manager",
          "description": "Manager determines which handlers are to be used for the current line. If no manager is specified, a default manager and flow are created.\n The default manager always uses the default flow. The default flow always uses the first registered recordHandler (if available)\n and the first registered resultHandler (if available).",
          "type": "org.frankframework.batch.IRecordHandlerManager"
        },
        {
          "deprecated": true,
          "multiple": true,
          "roleName": "child",
          "description": "Register a flow element that contains the handlers for a specific record type (key)",
          "type": "org.frankframework.batch.RecordHandlingFlow"
        },
        {
          "deprecated": true,
          "multiple": true,
          "roleName": "child",
          "description": "Register a uniquely named record manager.",
          "type": "org.frankframework.batch.IRecordHandler"
        },
        {
          "multiple": true,
          "roleName": "recordHandler",
          "description": "Handler for transforming records of a specific type",
          "type": "org.frankframework.batch.IRecordHandler"
        },
        {
          "deprecated": true,
          "multiple": true,
          "roleName": "child",
          "description": "Register a uniquely named result manager.",
          "type": "org.frankframework.batch.IResultHandler"
        },
        {
          "multiple": true,
          "roleName": "resultHandler",
          "description": "Handler for processing transformed records",
          "type": "org.frankframework.batch.IResultHandler"
        },
        {
          "multiple": false,
          "roleName": "readerFactory",
          "description": "Factory for the <code>reader</code>. The default implementation {@link InputStreamReaderFactory} converts using the specified character set.",
          "type": "org.frankframework.batch.IReaderFactory"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "StringIteratorPipe",
      "fullName": "org.frankframework.pipes.StringIteratorPipe",
      "abstract": true,
      "description": "IteratingPipe that has Strings as items.",
      "parent": "org.frankframework.pipes.IteratingPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "blockSize",
          "description": "Controls multiline behaviour. If set to a value greater than 0, it specifies the number of rows send in a block to the sender.",
          "default": "0 (one line at a time, no prefix of suffix)",
          "type": "int"
        },
        {
          "name": "startPosition",
          "description": "If <code>startPosition &gt;= 0</code>, this field contains the start position of the key in the current record (first character is 0);\n A sequence of lines with the same key is put in one block and send to the sender. Cannot be used in combination with blockSize.",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "endPosition",
          "description": "If <code>endPosition &gt;= startPosition</code>, this field contains the end position of the key in the current record",
          "default": "-1",
          "type": "int"
        },
        {
          "name": "combineBlocks",
          "description": "If <code>true</code>, all items in a block are sent at once. If set false, items are sent individually, potentially leveraging block enabled sending capabilities of the sender",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "blockPrefix",
          "description": "If <code>combineBlocks = true</code>, this string is inserted at the start of each block. Requires <code>blockSize</code> or <code>startPosition</code> and <code>endPosition</code> to be set too.",
          "default": "&lt;block&gt;"
        },
        {
          "name": "blockSuffix",
          "description": "If <code>combineBlocks = true</code>, this string is inserted at the end of the set of lines. Requires <code>blockSize</code> or <code>startPosition</code> and <code>endPosition</code> to be set too.",
          "default": "&lt;/block&gt;"
        },
        {
          "name": "linePrefix",
          "description": "This string is inserted at the start of each item"
        },
        {
          "name": "lineSuffix",
          "description": "This string is appended at the end of each item"
        },
        {
          "name": "escapeXml",
          "description": "Escape XML characters in each item",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "Text2XmlPipe",
      "fullName": "org.frankframework.pipes.Text2XmlPipe",
      "description": "Pipe for converting TEXT to XML.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["Text2XmlPipe"],
      "attributes": [
        {
          "name": "xmlTag",
          "mandatory": true,
          "description": "The xml tag to encapsulate the text in"
        },
        {
          "name": "splitLines",
          "description": "Controls whether the lines of the input are places in separated &lt;line&gt; tags",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "replaceNonXmlChars",
          "description": "Replace all non xml chars (not in the <a href=\"http://www.w3.org/tr/2006/rec-xml-20060816/#nt-char\">character range as specified by the xml specification</a>)\n with the inverted question mark (0x00bf)",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "useCdataSection",
          "description": "Controls whether the text to encapsulate should be put in a cdata section",
          "default": "true",
          "type": "bool"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "TextSplitterPipe",
      "fullName": "org.frankframework.pipes.TextSplitterPipe",
      "description": "Breaks up the text input in blocks of a maximum length.\n By default, the maximum block length is 160 characters, to enable them to be sent as SMS messages.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["TextSplitterPipe"],
      "attributes": [
        {
          "name": "maxBlockLength",
          "description": "Set the maximum number of characters of a block",
          "default": "160",
          "type": "int"
        },
        {
          "name": "softSplit",
          "description": "If true, try to break up the message at spaces, instead of in the middle of words",
          "default": "false",
          "type": "bool"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "TibcoLogJmsListener",
      "fullName": "org.frankframework.extensions.tibco.TibcoLogJmsListener",
      "parent": "org.frankframework.jms.PushingJmsListener",
      "elementNames": ["TibcoLogJmsListener"]
    },
    {
      "name": "TimeoutGuardPipe",
      "fullName": "org.frankframework.pipes.TimeoutGuardPipe",
      "abstract": true,
      "description": "Extension to FixedForwardPipe for interrupting processing when timeout is exceeded.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": [],
      "attributes": [
        {
          "name": "throwException",
          "description": "when <code>true</code>, a piperunexception is thrown. otherwise the output is only logged as an error (and returned in a xml string with 'error' tags)",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "timeout",
          "description": "timeout in seconds of obtaining a result",
          "default": "30",
          "type": "int"
        }
      ],
      "parameters": [
        {
          "name": "timeout",
          "description": "When a parameter with name timeout is present, it is used instead of the timeout specified by the attribute"
        }
      ]
    },
    {
      "name": "TransactionAttributes",
      "fullName": "org.frankframework.core.TransactionAttributes",
      "elementNames": [],
      "attributes": [
        {
          "name": "transacted",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "implemented as setting of transacted=true as transactionAttribute=Required and transacted=false as transactionAttribute=Supports"
          },
          "type": "bool"
        },
        {
          "name": "transactionTimeout",
          "description": "Set transactionTimeout in seconds.",
          "default": "<code>0</code> (use system default)",
          "type": "int"
        },
        {
          "name": "transactionAttribute",
          "description": "The <code>transactionAttribute</code> declares transactional behavior of execution. It applies both to database transactions and XA transactions.\n The pipeline uses this to start a new transaction or suspend the current one when required.\n For developers: it is equal to <a href=\\\"https://docs.oracle.com/javaee/7/tutorial/transactions003.htm\\\">EJB transaction attribute</a>.\n Possible values for transactionAttribute:\n   <table border=\\\"1\\\">\n     <tr><th>transactionAttribute</th><th>callers Transaction</th><th>Pipeline excecuted in Transaction</th></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">Required</td>    <td>none</td><td>T2</td></tr>\n \t\t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>T1</td></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">RequiresNew</td> <td>none</td><td>T2</td></tr>\n \t\t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>T2</td></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">Mandatory</td>   <td>none</td><td>error</td></tr>\n \t\t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>T1</td></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">NotSupported</td><td>none</td><td>none</td></tr>\n \t\t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>none</td></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">Supports</td>    <td>none</td><td>none</td></tr>\n  \t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>T1</td></tr>\n     <tr><td colspan=\\\"1\\\" rowspan=\\\"2\\\">Never</td>       <td>none</td><td>none</td></tr>\n \t\t\t\t\t\t\t\t\t\t\t      <tr><td>T1</td>  <td>error</td></tr>\n   </table>",
          "default": "Supports",
          "enum": "org.frankframework.core.TransactionAttribute"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "Trigger",
      "fullName": "org.frankframework.monitoring.Trigger",
      "description": "A Trigger that has its type configured at startup. Either use type = ALARM or type = CLEARING.",
      "elementNames": ["Trigger"],
      "attributes": [
        {
          "name": "eventCode"
        },
        {
          "name": "threshold",
          "description": "Amount of triggers required before sounding an alarm",
          "type": "int"
        },
        {
          "name": "period",
          "description": "Amount of hits required within 'x' amount of seconds before it counts as a trigger",
          "type": "int"
        },
        {
          "name": "severity",
          "enum": "org.frankframework.monitoring.Severity"
        },
        {
          "name": "sourceFiltering",
          "enum": "org.frankframework.monitoring.SourceFiltering"
        },
        {
          "name": "triggerType",
          "enum": "org.frankframework.monitoring.ITrigger.TriggerType"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "event",
          "description": "Adds one or more events to the trigger. Example: <Event>Pipe Exception</Event>.\n Each event requires it's own xml tag. It is not a comma-separated field."
        },
        {
          "multiple": true,
          "roleName": "adapterfilter",
          "type": "org.frankframework.monitoring.AdapterFilter"
        }
      ]
    },
    {
      "name": "UUIDGeneratorPipe",
      "fullName": "org.frankframework.pipes.UUIDGeneratorPipe",
      "description": "Pipe that generates an UUID (Universally Unique Identifier).\n\n Only type <code>alphanumeric</code> guarantees a 100% unique identifier, type <code>numeric</code> has a 0.01% chance of exactly the same id in case of multiple calls on the same host within a few milliseconds.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["UUIDGeneratorPipe"],
      "attributes": [
        {
          "name": "type",
          "description": "Format of generated string.",
          "default": "alphanumeric",
          "enum": "org.frankframework.pipes.UUIDGeneratorPipe.Type"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "UnzipPipe",
      "fullName": "org.frankframework.pipes.UnzipPipe",
      "description": "Assumes input to be the file name of a ZIP archive, and unzips it to a\n directory and/or an XML message.\n <br/>\n The output of each unzipped item is returned in XML as follows when\n collectFileContents is false:\n <pre>\n  &lt;results count=\\\"num_of_items\\\"&gt;\n    &lt;result item=\\\"1\\\"&gt;\n      &lt;zipEntry&gt;name in ZIP archive of first item&lt;/zipEntry&gt;\n      &lt;fileName&gt;filename of first item&lt;/fileName&gt;\n    &lt;/result&gt;\n    &lt;result item=\\\"2\\\"&gt;\n      &lt;zipEntry&gt;name in ZIP archive of second item&lt;/zipEntry&gt;\n      &lt;fileName&gt;filename of second item&lt;/fileName&gt;\n    &lt;/result&gt;\n       ...\n  &lt;/results&gt;\n </pre>\n\n <br/>\n The output of each unzipped item is returned in XML as follows when\n collectFileContents is true:\n <pre>\n  &lt;results count=\\\"num_of_items\\\"&gt;\n    &lt;result item=\\\"1\\\"&gt;\n      &lt;zipEntry&gt;name in ZIP archive of first item&lt;/zipEntry&gt;\n      &lt;fileContent&gt;content of first item&lt;/fileContent&gt;\n    &lt;/result&gt;\n    &lt;result item=\\\"2\\\"&gt;\n      &lt;zipEntry&gt;name in ZIP archive of second item&lt;/zipEntry&gt;\n      &lt;fileContent&gt;content of second item&lt;/fileContent&gt;\n    &lt;/result&gt;\n       ...\n  &lt;/results&gt;\n </pre>\n <br/>\n By default, this pipe takes care\n to produce unique file names, as follows. When the filename within\n the archive is:\n <pre>&lt;basename&gt; + \\\".\\\" + &lt;extension&gt;</pre>\n then the extracted filename (path omitted) becomes\n <pre>&lt;basename&gt; + &lt;unique number&gt; + \\\".\\\" + &lt;extension&gt;</pre>\n <br/>",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["UnzipPipe"],
      "attributes": [
        {
          "name": "directory",
          "description": "Directory to extract the archive to"
        },
        {
          "name": "directorySessionKey",
          "description": "Sessionkey with a directory value to extract the archive to"
        },
        {
          "name": "deleteOnExit",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "This flag is no longer supported as it leaks server memory. Temporary files should be removed by other means."
          },
          "description": "If true, file is automatically deleted upon normal JVM termination",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "collectResults",
          "description": "If set <code>false</code>, only a small summary (count of items in zip) is returned",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "collectFileContents",
          "description": "If set <code>true</code>, the contents of the files in the zip are returned in the result xml message of this pipe. Please note this can consume a lot of memory for large files or a large number of files",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "collectFileContentsBase64Encoded",
          "description": "Comma separated list of file extensions. Files with an extension which is part of this list will be base64 encoded. All other files are assumed to have UTF-8 when reading it from the zip and are added as escaped xml with non-unicode-characters being replaced by inverted question mark appended with #, the character number and ;",
          "default": "false"
        },
        {
          "name": "keepOriginalFileName",
          "description": "If set <code>false</code>, a suffix is added to the original filename to be sure it is unique",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "createSubDirectories",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "the attribute 'createSubDirectories' has been renamed to 'keepOriginalFilePath'"
          },
          "type": "bool"
        },
        {
          "name": "keepOriginalFilePath",
          "description": "If set <code>true</code>, the path of the zip entry will be preserved. Otherwise, the zip entries will be extracted to the root folder",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "assumeDirectoryExists",
          "description": "If set <code>true</code>, validation of directory is ignored",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "checkDirectory",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "the attribute 'checkDirectory' has been renamed to 'assumeDirectoryExists'"
          },
          "type": "bool"
        },
        {
          "name": "processFile",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "Please add a LocalFileSystemPipe with action=read in front of this pipe instead"
          },
          "description": "If set <code>true</code>, the input is assumed to be the name of a file to be processed. Otherwise, the input itself is used.",
          "default": "false",
          "type": "bool"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "WebServiceListener",
      "fullName": "org.frankframework.http.WebServiceListener",
      "description": "Listener that allows a {@link Receiver} to receive messages as a SOAP webservice.\n The structure of the SOAP messages is expressed in a WSDL (Web Services Description Language) document.\n The Frank!Framework generates a WSDL document for each adapter that contains WebServiceListeners. You can\n find these documents in the Frank!Console under main menu item Webservices, heading Available WSDL's.\n The WSDL documents that we generate document how the SOAP services can be accessed. In particular, the\n URL of a SOAP service can be found in an XML element <code>&lt;soap:address&gt;</code> with\n <code>soap</code> pointing to namespace <code>http://schemas.xmlsoap.org/wsdl/soap/</code>.\n\n <br/>If <code>address</code> is set, then for each request:<ul>\n <li>MIME headers are described in a 'mimeHeaders'-XML stored under session key 'mimeHeaders'</li>\n <li>Attachments present in the request are described by an 'attachments'-XML stored under session key 'attachments'</li>\n <li>SOAP protocol is stored under a session key 'soapProtocol'</li>\n <li>SOAP action is stored under a session key 'SOAPAction'</li>\n </ul>\n and for each response a multipart message is constructed if a 'multipart'-XML is provided in sessionKey specified by multipartXmlSessionKey.",
      "parent": "org.frankframework.http.PushingListenerAdapter",
      "elementNames": ["WebServiceListener"],
      "attributes": [
        {
          "name": "soap",
          "description": "If <code>true</code> the SOAP envelope is removed from received messages and a SOAP envelope is added to returned messages (SOAP envelope will not be visible to the pipeline)",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "serviceNamespaceURI",
          "description": "Namespace of the service that is provided by the adapter of this listener.\n If specified, requests posted to https://mydomain.com/ibis4something/servlet/rpcrouter that have this namespace in their body  will be handled by this listener,\n where mydomain.com and ibis4something refer to 'your ibis'."
        },
        {
          "name": "applicationFaultsAsSoapFaults",
          "type": "bool"
        },
        {
          "name": "address",
          "description": "The address to listen to, e.g the part &lt;address&gt; in https://mydomain.com/ibis4something/services/&lt;address&gt;,\n where mydomain.com and ibis4something refer to 'your ibis'."
        },
        {
          "name": "mtomEnabled",
          "description": "If set, MTOM is enabled on the SOAP binding",
          "type": "bool"
        },
        {
          "name": "attachmentSessionKeys",
          "description": "Comma separated list of session keys to hold contents of attachments of the request"
        },
        {
          "name": "multipartXmlSessionKey",
          "description": "Key of session variable that holds the description (name, sessionKey, mimeType) of the parts present in the request. Only used if attachmentSessionKeys are specified",
          "default": "multipartXml"
        }
      ]
    },
    {
      "name": "WebServiceNtlmSender",
      "fullName": "org.frankframework.http.WebServiceNtlmSender",
      "deprecated": {
        "forRemoval": true,
        "since": "8.0",
        "description": "NTLM authentication is unsecure and should be avoided."
      },
      "description": "Sender that sends a message via a WebService based on NTLM authentication.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["WebServiceNtlmSender"],
      "attributes": [
        {
          "name": "contentType",
          "description": "content-type of the request",
          "default": "text/html; charset=utf-8"
        },
        {
          "name": "url",
          "description": "url or base of url to be used"
        },
        {
          "name": "timeout",
          "description": "timeout in ms of obtaining a connection/result. 0 means no timeout",
          "default": "10000",
          "type": "int"
        },
        {
          "name": "maxConnections",
          "description": "the maximum number of concurrent connections",
          "default": "10",
          "type": "int"
        },
        {
          "name": "authAlias",
          "description": "alias used to obtain credentials for authentication to host"
        },
        {
          "name": "username",
          "description": "username used in authentication to host"
        },
        {
          "name": "password",
          "description": "password used to authenticate with the host"
        },
        {
          "name": "authDomain"
        },
        {
          "name": "proxyHost"
        },
        {
          "name": "proxyPort",
          "default": "80",
          "type": "int"
        },
        {
          "name": "soapAction",
          "description": "the soapactionuri to be set in the requestheader"
        }
      ]
    },
    {
      "name": "WebServiceSender",
      "fullName": "org.frankframework.http.WebServiceSender",
      "description": "Sender that sends a message via a WebService.",
      "parent": "org.frankframework.http.HttpSender",
      "elementNames": ["WebServiceSender"],
      "attributes": [
        {
          "name": "soap",
          "description": "when <code>true</code>, messages sent are put in a soap envelope and the soap envelope is removed from received messages (soap envelope will not be visible to the pipeline)",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "soapActionURI",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0",
            "description": "the attribute 'soapActionURI' has been renamed to 'soapAction'"
          }
        },
        {
          "name": "soapActionURIParam",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0",
            "description": "the attribute 'soapActionURIParam' has been renamed to 'soapActionParam'"
          }
        },
        {
          "name": "soapAction",
          "description": "the soapactionuri to be set in the requestheader"
        },
        {
          "name": "soapActionParam",
          "description": "parameter to obtain the soapactionuri"
        },
        {
          "name": "encodingStyleURI",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0",
            "description": "the attribute 'encodingStyleURI' has been renamed to 'encodingStyle'"
          }
        },
        {
          "name": "encodingStyle",
          "description": "the encodingstyle to be set in the messageheader"
        },
        {
          "name": "throwApplicationFaults",
          "description": "controls whether soap faults generated by the application generate an exception, or are treated as 'normal' messages",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "serviceNamespaceURI",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0",
            "description": "the attribute 'serviceNamespaceURI' has been renamed to 'serviceNamespace'"
          }
        },
        {
          "name": "serviceNamespace",
          "description": "the namespace of the message sent. identifies the service to be called. may be overriden by an actual namespace setting in the message to be sent"
        },
        {
          "name": "serviceNamespaceURIParam",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0",
            "description": "the attribute 'serviceNamespaceURIParam' has been renamed to 'serviceNamespaceParam'"
          }
        },
        {
          "name": "serviceNamespaceParam",
          "description": "parameter to obtain the servicenamespace"
        },
        {
          "name": "namespaceDefs",
          "description": "namespace defintions to be added in the soap envelope tag. must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions"
        },
        {
          "name": "wssUserName",
          "description": "username used to obtain credentials for authentication to web services security"
        },
        {
          "name": "wssPassword",
          "description": "password used to obtain credentials for authentication to web services security"
        },
        {
          "name": "wssAuthAlias",
          "description": "alias used to obtain credentials for authentication to web services security"
        },
        {
          "name": "wssPasswordDigest",
          "description": "when true, the password is sent digested. otherwise it is sent in clear text",
          "default": "true",
          "type": "bool"
        }
      ],
      "nonInheritedAttributes": ["methodType"]
    },
    {
      "name": "WsdlGeneratorPipe",
      "fullName": "org.frankframework.pipes.WsdlGeneratorPipe",
      "description": "Generate WSDL of parent or specified adapter.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["WsdlGeneratorPipe"],
      "attributes": [
        {
          "name": "from",
          "description": "either parent (adapter of pipeline which contains this pipe) or input (name of adapter specified by input of pipe), adapter must be within the same Configuration",
          "default": "parent"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Session"
        }
      ]
    },
    {
      "name": "WsdlXmlValidator",
      "fullName": "org.frankframework.pipes.WsdlXmlValidator",
      "description": "XmlValidator that will read the XSD's to use from a WSDL. As it extends the\n SoapValidator is will also add the SOAP envelope XSD.",
      "parent": "org.frankframework.soap.SoapValidator",
      "elementNames": [
        "WsdlXmlInputValidator",
        "WsdlXmlOutputValidator",
        "WsdlXmlValidatorPipe"
      ],
      "attributes": [
        {
          "name": "wsdl",
          "description": "The WSDL to read the XSDs from"
        },
        {
          "name": "soapBody",
          "description": "Name of the child element of the SOAP body, or a comma separated list of names to choose from (only one is allowed) (WSDL generator will use the first element) (use empty value to allow an empty SOAP body, for example to allow element x and an empty SOAP body use: x,). In case the request contains SOAPAction header and the WSDL contains an element specific to that SOAPAction, it will use that element as SOAP body."
        },
        {
          "name": "schemaLocationToAdd",
          "description": "Pairs of URI references which will be added to the WSDL"
        },
        {
          "name": "soapBodyNamespace",
          "description": "Creates <code>schemaLocation</code> attribute based on the WSDL and replaces the namespace of the soap body element"
        }
      ]
    },
    {
      "name": "XComSender",
      "fullName": "org.frankframework.xcom.XComSender",
      "description": "XCom client voor het versturen van files via XCom.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["XComSender"],
      "attributes": [
        {
          "name": "fileOption",
          "description": "one of create, append or replace",
          "enum": "org.frankframework.xcom.XComSender.FileOptionType"
        },
        {
          "name": "remoteDirectory",
          "description": "remote directory is prefixed witht the remote file"
        },
        {
          "name": "carriageflag",
          "enum": "org.frankframework.xcom.XComSender.CarriageFlagType"
        },
        {
          "name": "codeflag",
          "description": "characterset conversion",
          "enum": "org.frankframework.xcom.XComSender.CodeType"
        },
        {
          "name": "compress",
          "enum": "org.frankframework.xcom.XComSender.CompressType"
        },
        {
          "name": "logfile",
          "description": "name of logfile for xcomtcp to be used"
        },
        {
          "name": "password",
          "description": "password of user on remote system"
        },
        {
          "name": "port",
          "description": "port of remote host"
        },
        {
          "name": "queue",
          "description": "set queue off or on",
          "type": "bool"
        },
        {
          "name": "remoteSystem",
          "description": "hostname or tcpip adres of remote host"
        },
        {
          "name": "tracelevel",
          "description": "set between 0 (no trace) and 10",
          "type": "int"
        },
        {
          "name": "truncation",
          "description": "set truncation off or on",
          "type": "bool"
        },
        {
          "name": "userid",
          "description": "loginname of user on remote system"
        },
        {
          "name": "remoteFilePattern",
          "description": "remote file to create. if empty, the name is equal to the local file"
        },
        {
          "name": "workingDirName",
          "mandatory": true,
          "description": "directory in which to run the xcomtcp command"
        },
        {
          "name": "xcomtcp",
          "description": "path to xcomtcp command"
        },
        {
          "name": "configFile"
        },
        {
          "name": "authAlias",
          "description": "name of the alias to obtain credentials to authenticatie on remote server"
        }
      ]
    },
    {
      "name": "XQueryPipe",
      "fullName": "org.frankframework.pipes.XQueryPipe",
      "description": "Perform an XQuery.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["XQueryPipe"],
      "attributes": [
        {
          "name": "xqueryName",
          "description": "name of the file (resource) on the classpath to read the xquery from"
        },
        {
          "name": "xqueryFile",
          "description": "name of the file on the file system to read the xquery from"
        }
      ],
      "parametersDescription": "any parameters defined on the pipe will be passed as external variable to the XQuery",
      "labels": [
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "XercesXmlValidator",
      "fullName": "org.frankframework.validation.XercesXmlValidator",
      "description": "Xerces based XML validator.\n\n N.B. noNamespaceSchemaLocation may contain spaces, but not if the schema is stored in a .jar or .zip file on the class path.",
      "parent": "org.frankframework.validation.AbstractXmlValidator",
      "elementNames": []
    },
    {
      "name": "XfbSender",
      "fullName": "org.frankframework.extensions.xfb.XfbSender",
      "description": "Sender for transferring files using the XFB protocol. Assumes sender input is local filename.\n <br/>\n Some comments from Richard Maddox (FTO) about UNIX File permissions:\n <br/>\n <br/>\n In case of AIX or SUN systems we advise the following user and directory permissions:\n <br/>\n <br/>\n SENDING CFT:\n <br/>\n - App_user must have secondary group: xfbgw\n <br/>\n - Folder should have ownership: app_user:xfbgw   (owner:group)\n <br/>\n - Folder should have access rights: 770  (rwx.rwx.---)  so nobody other then app_user and group xfbgw can do something in this folder\n <br/>\n - Folder should have SGID bit set so that all files what is copied to this folder get group ownership xfbgw\n <br/>\n - send file must have rights 660 after putting the file in the send directory.\n <br/>\n <br/>\n RECEIVING CFT:\n <br/>\n - App_user (the application user of customer) should have secondary group: xfbgw\n <br/>\n - Folder should have ownership:  app_user:xfbgw   (owner:group)\n <br/>\n - Folder should have access rights: 770  (rwx.rwx.---)  so nobody other then app_user and group xfbgw can do something in this folder\n <br/>\n - Folder should have SGID bit set, so that all files what is copied to this folder get group ownership xfbgw\n <br/>\n <br/>\n There are of course more solutions to get the job done, but this is the solution we can guarantee.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["XfbSender"],
      "attributes": [
        {
          "name": "script",
          "description": "Full pathname to the XFB script to be executed to transfer the file"
        },
        {
          "name": "ft"
        },
        {
          "name": "flow"
        },
        {
          "name": "appli"
        },
        {
          "name": "noname"
        },
        {
          "name": "copy",
          "description": "When set to <code>true</code>, the file is copied before calling the XFB script.\n Reasons to copy the file:\n - XFB will rename the file (prefix it with FXB_) and delete it.\n - On Linux the sticky bit (drwxrws--- wasadmin xfbgw) isn't honoured with a move (only with a copy) (on AIX the sticky bit works for both move and copy).",
          "type": "bool"
        },
        {
          "name": "copyPrefix",
          "description": "Prefix for the name of the copied or original filename. When the name of the original file starts with this prefix, it is removed. Otherwise this prefix is added to the filename of the copied file."
        }
      ]
    },
    {
      "name": "XmlBuilderPipe",
      "fullName": "org.frankframework.pipes.XmlBuilderPipe",
      "deprecated": {
        "forRemoval": false,
        "since": ""
      },
      "description": "Pipe for converting special characters to their xml equivalents.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["XmlBuilderPipe"],
      "attributes": [
        {
          "name": "substringStart",
          "description": "substring to start translation"
        },
        {
          "name": "substringEnd",
          "description": "substring to end translation"
        }
      ]
    },
    {
      "name": "XmlFileElementIteratorPipe",
      "fullName": "org.frankframework.pipes.XmlFileElementIteratorPipe",
      "deprecated": {
        "forRemoval": true,
        "since": "7.6.0",
        "description": "Please replace with ForEachChildElementPipe. ElementName and elementChain can be replaced with containerElement and/or targetElement. It is not a 1 to 1 replacement, different values may be required!"
      },
      "description": "Sends a message to a Sender for each element in the XML file that the input message refers to.",
      "parent": "org.frankframework.pipes.IteratingPipe",
      "elementNames": ["XmlFileElementIteratorPipe"],
      "attributes": [
        {
          "name": "elementName",
          "description": "the name of the element to iterate over (alternatively: <code>elementChain</code>)"
        },
        {
          "name": "elementChain",
          "description": "the name of the element to iterate over, preceded with all ancestor elements and separated by semicolons (e.g. adapter;pipeline;pipe)"
        }
      ]
    },
    {
      "name": "XmlIf",
      "fullName": "org.frankframework.pipes.XmlIf",
      "deprecated": {
        "forRemoval": true,
        "since": "9.0.0"
      },
      "description": "Selects a forward, based on XPath evaluation",
      "parent": "org.frankframework.pipes.IfPipe",
      "elementNames": ["XmlIfPipe"],
      "attributes": [
        {
          "name": "regex",
          "deprecated": {
            "forRemoval": true,
            "since": "9.0",
            "description": "Please use the RegExPipe instead"
          },
          "description": "Regular expression to be applied to the input-message (ignored if either <code>xpathExpression</code> or <code>jsonPathExpression</code> is specified).\n The input-message <b>fully</b> matching the given regular expression leads to the 'then'-forward"
        },
        {
          "name": "sessionKey",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "Please use getInputFromSessionKey instead."
          },
          "description": "name of the key in the <code>pipelinesession</code> to retrieve the input-message from. if not set, the current input message of the pipe is taken. n.b. same as <code>getinputfromsessionkey</code>"
        }
      ],
      "nonInheritedAttributes": ["jsonPathExpression"],
      "forwards": [
        {
          "name": "*",
          "description": "when `thenForwardName` or `elseForwardName` are used"
        },
        {
          "name": "then",
          "description": "the configured condition is met"
        },
        {
          "name": "else",
          "description": "the configured condition is not met"
        }
      ],
      "labels": [
        {
          "label": "EIP",
          "value": "Router"
        }
      ]
    },
    {
      "name": "XmlJmsBrowserSender",
      "fullName": "org.frankframework.jms.XmlJmsBrowserSender",
      "description": "Sender for browsing and removing queue messages (with input and output in a XML message).\n\n <p>\n When input root element is <code>browse</code> all queue messages are returned.\n </p>\n <p>\n When input root element is <code>remove</code> all queue messages are removed.\n </p>\n <p>\n <b>example (input):</b>\n <pre><code>&lt;browse&gt;\n    &lt;jmsRealm&gt;qcf&lt;/jmsRealm&gt;\n    &lt;destinationName&gt;jms/GetPolicyDetailsRequest&lt;/destinationName&gt;\n    &lt;destinationType&gt;QUEUE&lt;/destinationType&gt;\n &lt;/browse&gt;</code></pre>\n </p>\n <p>\n <b>example (browse output):</b>\n <pre><code>&lt;result&gt;\n   &lt;items count=&quot;2&quot;&gt;\n      &lt;item&gt;\n         &lt;timestamp&gt;Thu Nov 20 13:36:31 CET 2014&lt;/timestamp&gt;\n         &lt;messageId&gt;ID:LPAB00000003980-61959-1416486781822-3:5:33:1:1&lt;/messageId&gt;\n         &lt;correlationId&gt;...&lt;/correlationId&gt;\n         &lt;message&gt;&lt;![CDATA[...]]&gt;&lt;/message&gt;\n      &lt;/item&gt;\n      &lt;item&gt;\n         &lt;timestamp&gt;Thu Dec 12 11:59:22 CET 2014&lt;/timestamp&gt;\n         &lt;messageId&gt;ID:LPAB00000003980-58359-1721486799722-3:4:19:1:1&lt;/messageId&gt;\n         &lt;correlationId&gt;...&lt;/correlationId&gt;\n         &lt;message&gt;&lt;![CDATA[...]]&gt;&lt;/message&gt;\n      &lt;/item&gt;\n \t &lt;/items&gt;\n &lt;/result&gt;</code></pre>\n </p>\n\n <p>\n <b>example (remove output):</b>\n <pre><code>&lt;result&gt;\n     &lt;itemsRemoved&gt;2&lt;/itemsRemoved&gt;\n &lt;/result&gt;</code></pre>",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["XmlJmsBrowserSender"]
    },
    {
      "name": "XmlParameter",
      "fullName": "org.frankframework.parameters.XmlParameter",
      "parent": "org.frankframework.parameters.AbstractParameter",
      "elementNames": ["XmlParam"],
      "attributes": [
        {
          "name": "type",
          "deprecated": {
            "forRemoval": false,
            "since": "",
            "description": "use element XmlParameter with attribute xmlType instead"
          },
          "enum": "org.frankframework.parameters.ParameterType"
        },
        {
          "name": "xmlType",
          "enum": "org.frankframework.parameters.XmlParameter.XmlType"
        }
      ]
    },
    {
      "name": "XmlQuerySender",
      "fullName": "org.frankframework.jdbc.XmlQuerySender",
      "description": "QuerySender that transforms the input message to a query.\n <br/>\n <pre><code>select\n  delete\n  insert\n  update - tableName\n         - columns [0..1] - column [1..n] - name\n                                          - value [0..1]\n                                          - type [0..1] one of {string;function;number;datetime;blob;clob;xmldatetime}, string by default\n                                          - decimalSeparator [0..1] only applicable for type=number\n                                          - groupingSeparator [0..1] only applicable for type=number\n                                          - formatString [0..1] only applicable for type=datetime, yyyy-MM-dd HH:mm:ss.SSS by default\n         - where [0..1]\n         - order [0..1]\n\n  alter - sequenceName\n        - startWith\n\n  sql   - type [0..1] one of {select;ddl;other}, other by default\n        - query</code></pre>\n <br/>",
      "parent": "org.frankframework.jdbc.AbstractJdbcQuerySender",
      "elementNames": ["XmlQuerySender"],
      "notes": [
        {
          "type": "INFO",
          "value": "Please note that the default value of <code>trimSpaces</code> is `true`"
        }
      ]
    },
    {
      "name": "XmlSwitch",
      "fullName": "org.frankframework.pipes.XmlSwitch",
      "description": "Selects an exitState, based on either the content of the input message, by means\n of a XSLT-stylesheet, the content of a session variable or, by default, by returning the name of the root-element.",
      "parent": "org.frankframework.pipes.AbstractPipe",
      "elementNames": ["XmlSwitchPipe"],
      "attributes": [
        {
          "name": "styleSheetName",
          "description": "stylesheet may return a string representing the forward to look up",
          "default": "<i>a stylesheet that returns the name of the root-element</i>"
        },
        {
          "name": "serviceSelectionStylesheetFilename",
          "deprecated": {
            "forRemoval": true,
            "since": "7.6.0",
            "description": "Please use the attribute styleSheetName."
          },
          "description": "stylesheet may return a string representing the forward to look up",
          "default": "<i>a stylesheet that returns the name of the root-element</i>"
        },
        {
          "name": "xpathExpression",
          "description": "xpath-expression that returns a string representing the forward to look up. It's possible to refer to a parameter (which e.g. contains a value from a sessionkey) by using the parameter name prefixed with $"
        },
        {
          "name": "namespaceDefs",
          "description": "Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace."
        },
        {
          "name": "sessionKey",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "Please use 'getInputFromSessionKey' or 'forwardNameSessionKey' attribute instead."
          },
          "description": "Name of the key in the <code>PipeLineSession</code> to retrieve the input message from, if a styleSheetName or a xpathExpression is specified.\n If no styleSheetName or xpathExpression is specified, the value of the session variable is used as the name of the forward.\n If none of sessionKey, styleSheetName or xpathExpression are specified, the element name of the root node of the input message is taken as the name of forward."
        },
        {
          "name": "notFoundForwardName",
          "description": "Forward returned when the pipename derived from the stylesheet could not be found."
        },
        {
          "name": "emptyForwardName",
          "description": "Forward returned when the content, on which the switch is performed, is empty. if <code>emptyforwardname</code> is not specified, <code>notfoundforwardname</code> is used."
        },
        {
          "name": "xsltVersion",
          "description": "If set to <code>2</code> or <code>3</code> a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). <code>0</code> will auto-detect",
          "default": "0",
          "type": "int"
        },
        {
          "name": "storeForwardInSessionKey",
          "description": "Selected forward name will be stored in the specified session key."
        },
        {
          "name": "forwardNameSessionKey",
          "description": "Session key that will be used to get the forward name from."
        },
        {
          "name": "namespaceAware",
          "description": "controls namespace-awareness of XSLT transformation",
          "default": "true",
          "type": "bool"
        }
      ],
      "forwards": [
        {
          "name": "*",
          "description": "name of the root-element"
        },
        {
          "name": "*",
          "description": "result of transformation, when <code>styleSheetName</code> or <code>xpathExpression</code> is specified"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "EIP",
          "value": "Router"
        }
      ]
    },
    {
      "name": "XmlValidator",
      "fullName": "org.frankframework.pipes.XmlValidator",
      "description": "Pipe that validates the input message against an XML Schema.",
      "parent": "org.frankframework.pipes.AbstractValidator",
      "elementNames": [
        "XmlInputValidator",
        "XmlOutputValidator",
        "XmlValidatorPipe"
      ],
      "attributes": [
        {
          "name": "schema",
          "description": "The filename of the schema on the classpath. It is not possible to specify a namespace using this attribute. (effectively the same as noNamespaceSchemaLocation)\n An example value would be \"xml/xsd/GetPartyDetail.xsd\".\n The value of the schema attribute is only used if the schemaLocation attribute and the noNamespaceSchemaLocation are not set."
        },
        {
          "name": "schemaLocation",
          "description": "Pairs of URI references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name).<br/>\n The syntax is the same as for schemaLocation attributes in instance documents: e.g, \"http://www.example.com file%20name.xsd\".<br/>\n The user can specify more than one XML Schema in the list.<br/>\n <b>Note</b> that spaces are considered separators for this attributed. This means that, for example, spaces in filenames should be escaped to %20."
        },
        {
          "name": "noNamespaceSchemaLocation",
          "description": "A uri reference as a hint as to the location of a schema document with no target namespace."
        },
        {
          "name": "root",
          "description": "Name of the root element, or a comma separated list of element names. The validation fails if the root element is not present in the list. N.B. for WSDL generation only the first element is used"
        },
        {
          "name": "responseRoot",
          "description": "Name of the response root element, or a comma separated list of element names. The validation fails if the root element is not present in the list. N.B. for WSDL generation only the first element is used"
        },
        {
          "name": "fullSchemaChecking",
          "description": "Enable full schema grammar constraint checking, including checking which\n may be time-consuming or memory intensive. Currently, particle unique\n attribution constraint checking and particle derivation restriction\n checking are controlled by this option.\n <p>\n see property\n http://apache.org/xml/features/validation/schema-full-checking\n </p>",
          "default": "<code>false</code>",
          "type": "bool"
        },
        {
          "name": "throwException",
          "description": "Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined.",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "reasonSessionKey",
          "description": "If set: key of session variable to store reasons of mis-validation in",
          "default": "failureReason"
        },
        {
          "name": "xmlReasonSessionKey",
          "description": "Like <code>reasonSessionKey</code> but stores reasons in xml format and more extensive",
          "default": "xmlFailureReason"
        },
        {
          "name": "validateFile",
          "description": "If set <code>true</code>, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "charset",
          "description": "Characterset used for reading file, only used when <code>validateFile</code> is <code>true</code>",
          "default": "utf-8"
        },
        {
          "name": "addNamespaceToSchema",
          "description": "If set <code>true</code>, the namespace from schemalocation is added to the schema document as targetnamespace",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "importedSchemaLocationsToIgnore",
          "description": "Comma separated list of schemaLocations which are excluded from an import or include in the schema document"
        },
        {
          "name": "useBaseImportedSchemaLocationsToIgnore",
          "description": "If set <code>true</code>, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "importedNamespacesToIgnore",
          "description": "Comma separated list of namespaces which are excluded from an import or include in the schema document"
        },
        {
          "name": "warn",
          "description": "If set <code>true</code>, send warnings to logging and console about syntax problems in the configured schema('s).\n Alternatively, warnings can be switched off using suppression properties <code>XSD_VALIDATION_WARNINGS_SUPPRESS_KEY</code>, <code>XSD_VALIDATION_ERROR_SUPPRESS_KEY</code> and <code>XSD_VALIDATION_FATAL_ERROR_SUPPRESS_KEY</code>",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "ignoreUnknownNamespaces",
          "description": "Ignore namespaces in the input message which are unknown",
          "default": "true when <code>schema</code> or <code>noNamespaceSchemaLocation</code> is used, false otherwise",
          "type": "bool"
        },
        {
          "name": "ignoreCaching",
          "description": "If set <code>true</code>, the number for caching validators in appConstants is ignored and no caching is done (for this validator only)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "xmlSchemaVersion",
          "description": "If set to <code>1.0</code>, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with <code>xsd.processor.version</code> property.",
          "default": "<code>1.1</code>"
        },
        {
          "name": "soapNamespace",
          "deprecated": {
            "forRemoval": false,
            "since": ""
          },
          "description": "The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message,\n the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate.\n Please note that this functionality is deprecated, using {@link SoapValidator} is now the preferred solution in case a SOAP\n message needs to be validated, in other cases give this property an empty value.",
          "default": "http://schemas.xmlsoap.org/soap/envelope/"
        },
        {
          "name": "rootElementSessionKey",
          "description": "Key of session variable to store the name of the root element"
        },
        {
          "name": "rootNamespaceSessionKey",
          "description": "Key of session variable to store the namespace of the root element"
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        }
      ]
    },
    {
      "name": "XmlValidatorSender",
      "fullName": "org.frankframework.senders.XmlValidatorSender",
      "description": "Sender that validates the input message against a XML Schema.\n\n N.B. noNamespaceSchemaLocation may contain spaces, but not if the schema is stored in a .jar or .zip file on the class path.",
      "parent": "org.frankframework.validation.AbstractXmlValidator",
      "elementNames": ["XmlValidatorSender"],
      "attributes": [
        {
          "name": "name",
          "description": "The functional name of the object."
        }
      ],
      "labels": [
        {
          "label": "Category",
          "value": "Advanced"
        }
      ]
    },
    {
      "name": "XmlWellFormedChecker",
      "fullName": "org.frankframework.pipes.XmlWellFormedChecker",
      "description": "<code>Pipe</code> that checks the well-formedness of the input message.\n If <code>root</code> is given then this is also checked.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": [
        "XmlWellFormedCheckerInputValidator",
        "XmlWellFormedCheckerOutputValidator",
        "XmlWellFormedCheckerPipe"
      ],
      "attributes": [
        {
          "name": "root",
          "description": "name of the root element"
        },
        {
          "name": "name",
          "description": "The functional name of this pipe. Can be referenced by the <code>path</code> attribute of a {@link PipeForward}."
        }
      ],
      "forwards": [
        {
          "name": "parserError",
          "description": "a parser exception occurred, probably caused by non-well-formed XML. If not specified, \"failure\" is used in such a case"
        },
        {
          "name": "failure",
          "description": "the document is not well formed"
        }
      ]
    },
    {
      "name": "XslErrorMessageFormatter",
      "fullName": "org.frankframework.errormessageformatters.XslErrorMessageFormatter",
      "description": "Applies a XSLT-stylesheet to the standard error generated by an {@link ErrorMessageFormatter}.\n\n If the transformation does not succeed, this 'standard' error message is returned and an exception is logged.\n\n Hint: use <code>xpathExression=\\\"/errorMessage/@message\\\"</code> for a single compact string as errormessage.",
      "elementNames": ["XslErrorMessageFormatter"],
      "attributes": [
        {
          "name": "styleSheet",
          "description": "URL to the stylesheet used to transform the output of the standard {@link ErrorMessageFormatter}"
        },
        {
          "name": "xpathExpression",
          "description": "xPathExpression to use for transformation"
        },
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ],
      "children": [
        {
          "multiple": true,
          "roleName": "param",
          "type": "org.frankframework.parameters.IParameter"
        }
      ]
    },
    {
      "name": "XsltPipe",
      "fullName": "org.frankframework.pipes.XsltPipe",
      "description": "Perform an XSLT transformation with a specified stylesheet.",
      "parent": "org.frankframework.pipes.FixedForwardPipe",
      "elementNames": ["XsltPipe"],
      "attributes": [
        {
          "name": "streamingXslt",
          "description": "If true, then this pipe will process the XSLT while streaming in a different thread. Can be used to switch streaming xslt off for debugging purposes",
          "default": "set by appconstant xslt.streaming.default",
          "type": "bool"
        },
        {
          "name": "styleSheetName",
          "description": "Location of stylesheet to apply to the input message"
        },
        {
          "name": "styleSheetNameSessionKey",
          "description": "Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute"
        },
        {
          "name": "styleSheetCacheSize",
          "description": "Size of cache of stylesheets retrieved from styleSheetNameSessionKey",
          "default": "100",
          "type": "int"
        },
        {
          "name": "xpathExpression",
          "description": "Alternatively: XPath-expression to create stylesheet from"
        },
        {
          "name": "omitXmlDeclaration",
          "description": "Omit the XML declaration on top of the output. If not set, the value specified in the stylesheet is followed",
          "default": "false, if not set in stylesheet",
          "type": "bool"
        },
        {
          "name": "disableOutputEscaping",
          "description": "If set <code>true</code>, any output is reparsed before being handled as XML again. If not set, the stylesheet is searched for <code>@disable-output-escaping='yes'</code> and the value is set accordingly",
          "default": "false, if not set in stylesheet",
          "type": "bool"
        },
        {
          "name": "namespaceDefs",
          "description": "Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions. For some other use cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.\n If left empty, an the xpathExpression will match any namespace"
        },
        {
          "name": "outputType",
          "description": "For xpathExpression only",
          "default": "text",
          "enum": "org.frankframework.util.TransformerPool.OutputType"
        },
        {
          "name": "indentXml",
          "description": "If set <code>true</code>, result is pretty-printed. If not set, the value specified in the stylesheet is followed",
          "default": "false, if not set in stylesheet",
          "type": "bool"
        },
        {
          "name": "removeNamespaces",
          "description": "If set <code>true</code> namespaces (and prefixes) in the input message are removed before transformation",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "handleLexicalEvents",
          "description": "If set <code>true</code>, the transformer is enabled to handle lexical events, allowing it for example to process comments and to distinghuish CDATA from escaped text.\n Beware that this option can cause spurious NullPointerExceptions due to a race condition in streaming XSLT 1.0 processing in Xalan 2.7.2",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "skipEmptyTags",
          "description": "If set <code>true</code> empty tags in the output are removed after transformation",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "xsltVersion",
          "description": "If set to <code>2</code> or <code>3</code> a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). <code>0</code> will auto-detect",
          "default": "0",
          "type": "int"
        },
        {
          "name": "sessionKey",
          "deprecated": {
            "forRemoval": true,
            "since": "7.7.0",
            "description": "Please use 'storeResultInSessionKey' with preserveInput=true"
          },
          "description": "If set, then the XsltPipe stores it result in the session using the supplied sessionKey, and returns its input as result"
        }
      ],
      "parametersDescription": "any parameters defined on the pipe will be applied to the created transformer",
      "labels": [
        {
          "label": "Category",
          "value": "Basic"
        },
        {
          "label": "EIP",
          "value": "Translator"
        }
      ]
    },
    {
      "name": "XsltSender",
      "fullName": "org.frankframework.senders.XsltSender",
      "description": "Perform an XSLT transformation with a specified stylesheet or XPath-expression.",
      "parent": "org.frankframework.senders.AbstractSenderWithParameters",
      "elementNames": ["XsltSender"],
      "attributes": [
        {
          "name": "streamingXslt",
          "description": "If true, then this sender will process the XSLT while streaming in a different thread. Can be used to switch streaming off for debugging purposes",
          "default": "set by appconstant xslt.streaming.default",
          "type": "bool"
        },
        {
          "name": "styleSheetName",
          "description": "Location of stylesheet to apply to the input message"
        },
        {
          "name": "styleSheetNameSessionKey",
          "description": "Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute"
        },
        {
          "name": "styleSheetCacheSize",
          "description": "Size of cache of stylesheets retrieved from styleSheetNameSessionKey",
          "default": "100",
          "type": "int"
        },
        {
          "name": "xpathExpression",
          "description": "Alternatively: XPath-expression to create stylesheet from"
        },
        {
          "name": "omitXmlDeclaration",
          "description": "Omit the XML declaration on top of the output. If not set, the value specified in the stylesheet is followed",
          "default": "false, if not set in stylesheet",
          "type": "bool"
        },
        {
          "name": "disableOutputEscaping",
          "description": "If set <code>true</code>, any output is reparsed before being handled as XML again. If not set, the stylesheet is searched for <code>@disable-output-escaping='yes'</code> and the value is set accordingly",
          "default": "false, if not set in stylesheet",
          "type": "bool"
        },
        {
          "name": "namespaceDefs",
          "description": "Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions. For some other use cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.\n If left empty, an the xpathExpression will match any namespace"
        },
        {
          "name": "outputType",
          "description": "For xpathExpression only",
          "default": "text",
          "enum": "org.frankframework.util.TransformerPool.OutputType"
        },
        {
          "name": "indentXml",
          "description": "If set <code>true</code>, result is pretty-printed. If not set, the value specified in the stylesheet is followed",
          "default": "false, if not set in stylesheet",
          "type": "bool"
        },
        {
          "name": "removeNamespaces",
          "description": "If set <code>true</code> namespaces (and prefixes) in the input message are removed before transformation",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "handleLexicalEvents",
          "description": "If set <code>true</code>, the transformer is enabled to handle lexical events, allowing it for example to process comments and to distinghuish CDATA from escaped text.\n Beware that this option can cause spurious NullPointerExceptions due to a race condition in streaming XSLT 1.0 processing in Xalan 2.7.2",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "skipEmptyTags",
          "description": "If set <code>true</code> empty tags in the output are removed after transformation",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "xsltVersion",
          "description": "If set to <code>2</code> or <code>3</code> a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). <code>0</code> will auto-detect",
          "default": "0",
          "type": "int"
        },
        {
          "name": "debugInput",
          "description": "If set <code>true</code> the input is written to the log file, at DEBUG level",
          "default": "false",
          "type": "bool"
        }
      ],
      "parametersDescription": "any parameters defined on the sender will be applied to the created transformer"
    },
    {
      "name": "Y01ErrorMessageFormatter",
      "fullName": "org.frankframework.errormessageformatters.Y01ErrorMessageFormatter",
      "deprecated": {
        "forRemoval": false,
        "since": ""
      },
      "description": "ErrorMessageFormatter for JUICE, introduced with the Y01-project.",
      "elementNames": ["Y01ErrorMessageFormatter"],
      "attributes": [
        {
          "name": "active",
          "description": "If defined and empty or false, then this element and all its children are ignored"
        }
      ]
    },
    {
      "name": "ZipIteratorPipe",
      "fullName": "org.frankframework.compression.ZipIteratorPipe",
      "description": "Sends a message to a Sender for each entry of its input, that must be an ZipInputStream. The input of the pipe must be one of:\n <ul>\n \t<li>String refering to a filename</li>\n  <li>File</li>\n  <li>InputStream</li>\n </ul>\n The message sent each time to the sender is the filename of the entry found in the archive.\n The contents of the archive is available as a Stream or a String in a session variable.\n <p>\n <br/>",
      "parent": "org.frankframework.pipes.IteratingPipe",
      "elementNames": ["ZipIteratorPipe"],
      "attributes": [
        {
          "name": "contentsSessionKey",
          "description": "Session key used to store contents of each zip entry",
          "default": "zipdata"
        },
        {
          "name": "streamingContents",
          "description": "If set to <code>false</code>, a string containing the contents of the entry is placed under the session key, instead of the inputstream to the contents",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "closeInputstreamOnExit",
          "description": "If set to <code>false</code>, the inputstream is not closed after it has been used",
          "default": "true",
          "type": "bool"
        },
        {
          "name": "charset",
          "description": "Charset used when reading the contents of the entry (only used if streamingContents=false)",
          "default": "utf-8"
        },
        {
          "name": "processFile",
          "deprecated": {
            "forRemoval": true,
            "since": "7.8.0",
            "description": "Please add a LocalFileSystemPipe with action=read in front of this pipe instead"
          },
          "description": "If set <code>true</code>, each entry is assumed to be the name of a file to be compressed. Otherwise, the input itself is compressed.",
          "default": "false",
          "type": "bool"
        }
      ]
    },
    {
      "name": "ZipWriterPipe",
      "fullName": "org.frankframework.compression.ZipWriterPipe",
      "description": "Pipe that creates a ZIP archive (on action close).\n <p>\n A chain of zipWriterPipes can be used to create a ZIP archive. You can use the pipe with different actions (see specified below).\n Action <code>CLOSE</code> will generate the ZIP archive which is returned as the pipe ouput.\n </p>",
      "parent": "org.frankframework.collection.AbstractCollectorPipe",
      "elementNames": ["ZipWriterPipe"],
      "attributes": [
        {
          "name": "zipWriterHandle",
          "deprecated": {
            "forRemoval": true,
            "since": "7.9.0",
            "description": "Replaced with attribute collectionName"
          },
          "description": "Session key used to refer to zip session. Must be specified with another value if ZipWriterPipes are nested. Deprecated, use collectionName instead.",
          "default": "zipwriterhandle"
        },
        {
          "name": "completeFileHeader",
          "description": "Only for action='write': If set to <code>true</code>, the fields 'crc-32', 'compressed size' and 'uncompressed size' in the zip entry file header are set explicitly (note: compression ratio is zero)",
          "default": "false",
          "type": "bool"
        },
        {
          "name": "backwardsCompatibility",
          "deprecated": {
            "forRemoval": true,
            "since": "7.9.0"
          },
          "description": "When action is OPEN: If input is a string, it's assumed it's the location where to save the Zip Archive.\n When action is WRITE: Input will be 'piped' to the output, and the message will be preserved.\n Avoid using this if possible.",
          "type": "bool"
        }
      ],
      "parameters": [
        {
          "name": "filename",
          "description": "only for <code>action=WRITE</code>: the filename of the zip-entry"
        },
        {
          "name": "contents",
          "description": "only for <code>action=WRITE</code>: contents of the zip-entry, If not specified, the input is used."
        }
      ]
    },
    {
      "name": "ZipWriterSender",
      "fullName": "org.frankframework.compression.ZipWriterSender",
      "description": "Sender that writes an entry to a ZipStream, similar to ZipWriterPipe with action='write'.\n Filename and contents are taken from parameters. If one of the parameters is not present, the input message\n is used for either filename or contents.",
      "parent": "org.frankframework.collection.AbstractCollectorSender",
      "elementNames": ["ZipWriterSender"],
      "attributes": [
        {
          "name": "zipWriterHandle",
          "deprecated": {
            "forRemoval": true,
            "since": "7.9.0",
            "description": "Replaced with attribute collectionName"
          },
          "description": "Session key used to refer to zip session. Must be specified with another value if ZipWriterPipes are nested",
          "default": "zipwriterhandle"
        },
        {
          "name": "backwardsCompatibility",
          "deprecated": {
            "forRemoval": true,
            "since": "7.9.0"
          },
          "description": "Input will be 'piped' to the output, and the message will be preserved. Avoid using this if possible.",
          "type": "bool"
        }
      ],
      "parameters": [
        {
          "name": "filename",
          "description": "filename of the zipentry"
        },
        {
          "name": "contents",
          "description": "contents of the zipentry"
        }
      ]
    }
  ],
  "enums": [
    {
      "name": "org.frankframework.core.Adapter.MessageLogLevel",
      "values": [
        {
          "label": "OFF",
          "description": "No logging"
        },
        {
          "label": "INFO",
          "description": "Logs information from adapter level messages"
        },
        {
          "label": "BASIC",
          "description": "Same as INFO",
          "deprecated": true
        },
        {
          "label": "DEBUG",
          "description": "Logs information from pipe messages"
        },
        {
          "label": "TERSE",
          "description": "Same as DEBUG",
          "deprecated": true
        }
      ]
    },
    {
      "name": "org.frankframework.core.TransactionAttribute",
      "values": [
        {
          "label": "Required",
          "description": "Support a current transaction; create a new one if none exists."
        },
        {
          "label": "Supports",
          "description": "Support a current transaction; execute non-transactionally if none exists."
        },
        {
          "label": "Mandatory",
          "description": "Support a current transaction; throw an exception if no current transaction exists."
        },
        {
          "label": "RequiresNew",
          "description": "Create a new transaction, suspending the current transaction if one exists."
        },
        {
          "label": "NotSupported",
          "description": "Do not support a current transaction; rather always execute non-transactionally."
        },
        {
          "label": "Never",
          "description": "Do not support a current transaction; throw an exception if a current transaction exists."
        }
      ]
    },
    {
      "name": "org.frankframework.scheduler.job.ActionJob.AvailableAction",
      "values": [
        {
          "label": "STOPADAPTER"
        },
        {
          "label": "STARTADAPTER"
        },
        {
          "label": "STOPRECEIVER"
        },
        {
          "label": "STARTRECEIVER"
        }
      ]
    },
    {
      "name": "org.frankframework.scheduler.JobDefFunctions",
      "values": [
        {
          "label": "StopAdapter"
        },
        {
          "label": "StartAdapter"
        },
        {
          "label": "StopReceiver"
        },
        {
          "label": "StartReceiver"
        },
        {
          "label": "SendMessage"
        },
        {
          "label": "ExecuteQuery"
        },
        {
          "label": "cleanupDatabase"
        },
        {
          "label": "cleanupFileSystem"
        },
        {
          "label": "recoverAdapters"
        },
        {
          "label": "checkReload"
        },
        {
          "label": "loadDatabaseSchedules"
        }
      ]
    },
    {
      "name": "org.frankframework.util.RunState",
      "values": [
        {
          "label": "ERROR"
        },
        {
          "label": "STARTING"
        },
        {
          "label": "EXCEPTION_STARTING"
        },
        {
          "label": "STARTED"
        },
        {
          "label": "STOPPING"
        },
        {
          "label": "EXCEPTION_STOPPING"
        },
        {
          "label": "STOPPED"
        }
      ]
    },
    {
      "name": "org.frankframework.receivers.Receiver.OnError",
      "values": [
        {
          "label": "CONTINUE",
          "description": "Don't stop the receiver when an error occurs."
        },
        {
          "label": "RECOVER",
          "description": "If an error occurs (e.g. connection is lost) the receiver will be stopped and marked as ERROR\n Once every <code>recover.adapters.interval</code> it attempts to (re-) start the receiver."
        },
        {
          "label": "CLOSE",
          "description": "Stop the receiver when an error occurs."
        }
      ]
    },
    {
      "name": "org.frankframework.receivers.Receiver.CheckForDuplicatesMethod",
      "values": [
        {
          "label": "MESSAGEID"
        },
        {
          "label": "CORRELATIONID"
        }
      ]
    },
    {
      "name": "org.frankframework.core.IMessageBrowser.HideMethod",
      "values": [
        {
          "label": "ALL",
          "description": "to mask the entire string"
        },
        {
          "label": "FIRSTHALF",
          "description": "to only mask the first half of the string"
        }
      ]
    },
    {
      "name": "org.frankframework.util.Locker.LockType",
      "values": [
        {
          "label": "T",
          "description": "Temporary"
        },
        {
          "label": "P",
          "description": "Permanent"
        }
      ]
    },
    {
      "name": "org.frankframework.monitoring.EventType",
      "values": [
        {
          "label": "TECHNICAL"
        },
        {
          "label": "FUNCTIONAL"
        },
        {
          "label": "HEARTBEAT"
        },
        {
          "label": "CLEARING"
        }
      ]
    },
    {
      "name": "org.frankframework.monitoring.Severity",
      "values": [
        {
          "label": "HARMLESS"
        },
        {
          "label": "WARNING"
        },
        {
          "label": "CRITICAL"
        },
        {
          "label": "FATAL"
        }
      ]
    },
    {
      "name": "org.frankframework.http.AbstractHttpSession.OauthAuthenticationMethod",
      "values": [
        {
          "label": "CLIENT_CREDENTIALS_BASIC_AUTH",
          "description": "Requires `tokenEndpoint`, `clientId` and `clientSecret` to be set.\n Implements <a href=\"https://datatracker.ietf.org/doc/html/rfc6749#section-4.4\">rfc6749</a>. The `clientId` and `clientSecret` are sent as basic authorization\n to the authorization server. The `accessToken` is then used in the Authorization header to authenticate against the resource server."
        },
        {
          "label": "CLIENT_CREDENTIALS_QUERY_PARAMETERS",
          "description": "Requires `tokenEndpoint`, `clientId` and `clientSecret` to be set.\n Implements <a href=\"https://datatracker.ietf.org/doc/html/rfc6749#section-4.4\">rfc6749</a>. The `clientId` and `clientSecret` are sent in the form body\n to the authorization server. The `accessToken` is then used in the Authorization header to authenticate against the resource server."
        },
        {
          "label": "RESOURCE_OWNER_PASSWORD_CREDENTIALS_BASIC_AUTH",
          "description": "Requires `tokenEndpoint`, `clientId`, `clientSecret`, `username` and `password` to be set.\n Implements <a href=\"https://datatracker.ietf.org/doc/html/rfc6749#section-4.3\">rfc6749</a>. The `clientId` and `clientSecret` are sent as basic authorization\n to the authorization server. The `username` and `password` are sent in the form body to the authorization server.\n The `accessToken` is then used in the Authorization header to authenticate against the resource server."
        },
        {
          "label": "RESOURCE_OWNER_PASSWORD_CREDENTIALS_QUERY_PARAMETERS",
          "description": "Requires `tokenEndpoint`, `clientId`, `clientSecret`, `username` and `password` to be set.\n Implements <a href=\"https://datatracker.ietf.org/doc/html/rfc6749#section-4.3\">rfc6749</a>. The `clientId`, `clientSecret`, `username`\n and `password` are sent in the form body to the authorization server.\n The `accessToken` is then used in the Authorization header to authenticate against the resource server."
        },
        {
          "label": "SAML_ASSERTION",
          "description": "Requires `samlNameId`, `samlIssuer`, `samlAudience`, `samlAssertionExpiry`, and a certificate and private key.\n Generates a new SAML assertion, which will be exchanged for a token by the authorization server. The `accessToken` is then used\n in the Authorization header to authenticate against the resource server."
        }
      ]
    },
    {
      "name": "org.frankframework.encryption.KeystoreType",
      "values": [
        {
          "label": "PEM",
          "description": "Currently only used by the SignaturePipe to use a PEM certificate directly as a truststore."
        },
        {
          "label": "PKCS12"
        },
        {
          "label": "JKS"
        },
        {
          "label": "JCEKS"
        }
      ]
    },
    {
      "name": "org.frankframework.jms.JMSFacade.MessageClass",
      "values": [
        {
          "label": "AUTO",
          "description": "Automatically determine the type of the outgoing {@link jakarta.jms.Message} based\n on the value of {@link Message#isBinary()}."
        },
        {
          "label": "TEXT",
          "description": "Create the outgoing message as {@link TextMessage}."
        },
        {
          "label": "BYTES",
          "description": "Create the outgoing message as {@link BytesMessage}."
        }
      ]
    },
    {
      "name": "org.frankframework.jms.JMSFacade.DestinationType",
      "values": [
        {
          "label": "QUEUE"
        },
        {
          "label": "TOPIC"
        }
      ]
    },
    {
      "name": "org.frankframework.jms.JMSFacade.AcknowledgeMode",
      "values": [
        {
          "label": "none"
        },
        {
          "label": "auto",
          "description": "auto or auto_acknowledge: Specifies that the session is to automatically acknowledge consumer receipt of\n messages when message processing is complete."
        },
        {
          "label": "client",
          "description": "client or client_acknowledge: Specifies that the consumer is to acknowledge all messages delivered in this session.\n The Frank application will acknowledge all messages processed correctly. The skipping of the acknowledgement of messages\n processed in error will cause them to be redelivered, thus providing an automatic retry."
        },
        {
          "label": "dups",
          "description": "dups or dups_ok_acknowledge: Specifies that the session is to \"lazily\" acknowledge the\n delivery of messages to the consumer. \"Lazy\" means that the consumer can delay the acknowledgment\n of messages to the server until a convenient time; meanwhile the server might redeliver messages.\n This mode reduces the session overhead. If JMS fails, the consumer may receive duplicate messages."
        }
      ]
    },
    {
      "name": "org.frankframework.jms.JMSFacade.SubscriberType",
      "values": [
        {
          "label": "DURABLE"
        },
        {
          "label": "TRANSIENT"
        }
      ]
    },
    {
      "name": "org.frankframework.jms.JMSFacade.DeliveryMode",
      "values": [
        {
          "label": "NOT_SET"
        },
        {
          "label": "PERSISTENT"
        },
        {
          "label": "NON_PERSISTENT"
        }
      ]
    },
    {
      "name": "org.frankframework.core.IListenerConnector.CacheMode",
      "values": [
        {
          "label": "CACHE_NONE"
        },
        {
          "label": "CACHE_CONNECTION"
        },
        {
          "label": "CACHE_SESSION"
        },
        {
          "label": "CACHE_CONSUMER"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.esb.EsbJmsListener.MessageProtocol",
      "values": [
        {
          "label": "FF",
          "description": "Fire & Forget protocol"
        },
        {
          "label": "RR",
          "description": "Request-Reply protocol"
        }
      ]
    },
    {
      "name": "org.frankframework.http.RestListener.MediaTypes",
      "values": [
        {
          "label": "XML"
        },
        {
          "label": "JSON"
        },
        {
          "label": "TEXT"
        }
      ]
    },
    {
      "name": "org.frankframework.http.rest.ApiListener.HttpMethod",
      "values": [
        {
          "label": "GET"
        },
        {
          "label": "PUT"
        },
        {
          "label": "POST"
        },
        {
          "label": "PATCH"
        },
        {
          "label": "DELETE"
        },
        {
          "label": "HEAD"
        },
        {
          "label": "OPTIONS"
        }
      ]
    },
    {
      "name": "org.frankframework.http.rest.MediaTypes",
      "values": [
        {
          "label": "ANY"
        },
        {
          "label": "DETECT"
        },
        {
          "label": "TEXT"
        },
        {
          "label": "XML"
        },
        {
          "label": "JSON"
        },
        {
          "label": "PDF"
        },
        {
          "label": "OCTET"
        },
        {
          "label": "MULTIPART_RELATED"
        },
        {
          "label": "MULTIPART_FORMDATA"
        },
        {
          "label": "MULTIPART"
        },
        {
          "label": "TXT"
        },
        {
          "label": "CSS"
        },
        {
          "label": "CSV"
        },
        {
          "label": "MJS"
        },
        {
          "label": "HTML"
        },
        {
          "label": "JAR"
        },
        {
          "label": "DOC"
        },
        {
          "label": "EPUB"
        },
        {
          "label": "VSD"
        },
        {
          "label": "AZW"
        },
        {
          "label": "PPT"
        },
        {
          "label": "XLS"
        },
        {
          "label": "RAR"
        },
        {
          "label": "RTF"
        },
        {
          "label": "ICO"
        },
        {
          "label": "ICS"
        },
        {
          "label": "BMP"
        },
        {
          "label": "GIF"
        },
        {
          "label": "PNG"
        },
        {
          "label": "SVG"
        },
        {
          "label": "TIFF"
        },
        {
          "label": "JPG"
        },
        {
          "label": "OTF"
        },
        {
          "label": "TTF"
        },
        {
          "label": "WOFF"
        },
        {
          "label": "WOFF2"
        },
        {
          "label": "MPEG"
        },
        {
          "label": "MP3"
        },
        {
          "label": "MP4"
        },
        {
          "label": "MIDI"
        },
        {
          "label": "AAC"
        },
        {
          "label": "AVI"
        },
        {
          "label": "TS"
        },
        {
          "label": "WAV"
        },
        {
          "label": "WEBA"
        },
        {
          "label": "WEBM"
        },
        {
          "label": "WEBP"
        },
        {
          "label": "GZ"
        },
        {
          "label": "TAR"
        },
        {
          "label": "BZ"
        },
        {
          "label": "BZ2"
        },
        {
          "label": "ZIP"
        }
      ]
    },
    {
      "name": "org.frankframework.http.rest.ApiListener.AuthenticationMethods",
      "values": [
        {
          "label": "NONE"
        },
        {
          "label": "COOKIE"
        },
        {
          "label": "HEADER"
        },
        {
          "label": "AUTHROLE"
        },
        {
          "label": "JWT"
        }
      ]
    },
    {
      "name": "org.frankframework.http.HttpEntityType",
      "values": [
        {
          "label": "RAW",
          "description": "The input message is sent unchanged as character data, like text, XML or JSON, with possibly parameter data appended.\n When there are no parameters to be appended, the output of this option is the same as {@link #BINARY}."
        },
        {
          "label": "BINARY",
          "description": "The input message is sent unchanged as binary or character data. The mimetype and character set on the HTTP entity\n will determine how the client interprets the data."
        },
        {
          "label": "URLENCODED",
          "description": "Yields a x-www-form-urlencoded form entity"
        },
        {
          "label": "FORMDATA",
          "description": "Yields a multipart/form-data form entity"
        },
        {
          "label": "MTOM",
          "description": "Yields a MTOM multipart/related form entity"
        }
      ]
    },
    {
      "name": "org.frankframework.jdbc.JdbcListener.MessageFieldType",
      "values": [
        {
          "label": "STRING"
        },
        {
          "label": "CLOB"
        },
        {
          "label": "BLOB"
        }
      ]
    },
    {
      "name": "org.frankframework.documentbuilder.DocumentFormat",
      "values": [
        {
          "label": "XML"
        },
        {
          "label": "JSON"
        }
      ]
    },
    {
      "name": "org.frankframework.filesystem.AbstractFileSystemListener.MessageType",
      "values": [
        {
          "label": "NAME"
        },
        {
          "label": "PATH"
        },
        {
          "label": "CONTENTS"
        },
        {
          "label": "INFO"
        }
      ]
    },
    {
      "name": "org.frankframework.filesystem.ftp.FtpSession.FtpType",
      "values": [
        {
          "label": "FTP"
        },
        {
          "label": "FTPSI"
        },
        {
          "label": "FTPSX(TLS)"
        },
        {
          "label": "FTPSX(SSL)"
        }
      ]
    },
    {
      "name": "org.frankframework.filesystem.ftp.FtpSession.FileType",
      "values": [
        {
          "label": "ASCII"
        },
        {
          "label": "BINARY"
        }
      ]
    },
    {
      "name": "org.frankframework.filesystem.ftp.FtpSession.TransportType",
      "values": [
        {
          "label": "DIRECT"
        },
        {
          "label": "HTTP"
        },
        {
          "label": "SOCKS"
        }
      ]
    },
    {
      "name": "org.frankframework.filesystem.ftp.FtpSession.Prot",
      "values": [
        {
          "label": "C",
          "description": "Clear"
        },
        {
          "label": "S",
          "description": "Safe(SSL protocol only)"
        },
        {
          "label": "E",
          "description": "Confidential(SSL protocol only)"
        },
        {
          "label": "P",
          "description": "Private"
        }
      ]
    },
    {
      "name": "org.frankframework.filesystem.AbstractMailListener.MessageType",
      "values": [
        {
          "label": "EMAIL"
        },
        {
          "label": "CONTENTS"
        },
        {
          "label": "MIME"
        },
        {
          "label": "NAME"
        },
        {
          "label": "PATH"
        }
      ]
    },
    {
      "name": "org.frankframework.filesystem.smb.Samba2FileSystem.Samba2AuthType",
      "values": [
        {
          "label": "NTLM"
        },
        {
          "label": "SPNEGO"
        },
        {
          "label": "ANONYMOUS"
        }
      ]
    },
    {
      "name": "org.frankframework.filesystem.sftp.SftpSession.TransportType",
      "values": [
        {
          "label": "HTTP"
        },
        {
          "label": "SOCKS4"
        },
        {
          "label": "SOCKS5"
        }
      ]
    },
    {
      "name": "org.frankframework.jms.JmsSender.LinkMethod",
      "values": [
        {
          "label": "MESSAGEID",
          "description": "use the generated messageId as the correlationId in the selector for response messages"
        },
        {
          "label": "CORRELATIONID",
          "description": "set the correlationId of the pipeline as the correlationId of the message sent, and use that as the correlationId in the selector for response messages"
        },
        {
          "label": "CORRELATIONID_FROM_MESSAGE",
          "description": "do not automatically set the correlationId of the message sent, but use use the value found in that header after sending the message as the selector for response messages"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.esb.EsbJmsSender.MessageProtocol",
      "values": [
        {
          "label": "FF",
          "description": "Fire & Forget protocol"
        },
        {
          "label": "RR",
          "description": "Request-Reply protocol"
        }
      ]
    },
    {
      "name": "org.frankframework.core.IMessageBrowser.SortOrder",
      "values": [
        {
          "label": "NONE"
        },
        {
          "label": "ASC"
        },
        {
          "label": "DESC"
        }
      ]
    },
    {
      "name": "org.frankframework.parameters.AbstractParameter.ParameterMode",
      "values": [
        {
          "label": "INPUT"
        },
        {
          "label": "OUTPUT"
        },
        {
          "label": "INOUT"
        }
      ]
    },
    {
      "name": "org.frankframework.parameters.ParameterType",
      "values": [
        {
          "label": "STRING",
          "description": "Renders the contents of the first node (in combination with xslt or xpath). Please note that\n if there are child nodes, only the contents are returned, use <code>XML</code> if the xml tags are required"
        },
        {
          "label": "XML",
          "description": "Renders an xml-nodeset as an xml-string (in combination with xslt or xpath). This will include the xml tags"
        },
        {
          "label": "NODE",
          "description": "Renders the CONTENTS of the first node as a nodeset\n that can be used as such when passed as xslt-parameter (only for XSLT 1.0).\n Please note that the nodeset may contain multiple nodes, without a common root node.\n N.B. The result is the set of children of what you might expect it to be...",
          "deprecated": true
        },
        {
          "label": "DOMDOC",
          "description": "Renders XML as a DOM document; similar to <code>node</code>\n\t\twith the distinction that there is always a common root node (required for XSLT 2.0)"
        },
        {
          "label": "DATE",
          "description": "Converts the result to a Date, by default using formatString <code>yyyy-MM-dd</code>.\n When applied as a JDBC parameter, the method setDate() is used"
        },
        {
          "label": "TIME",
          "description": "Converts the result to a Date, by default using formatString <code>HH:mm:ss</code>.\n When applied as a JDBC parameter, the method setTime() is used"
        },
        {
          "label": "DATETIME",
          "description": "Converts the result to a Date, by default using formatString <code>yyyy-MM-dd HH:mm:ss</code>.\n When applied as a JDBC parameter, the method setTimestamp() is used"
        },
        {
          "label": "TIMESTAMP",
          "description": "Similar to <code>DATETIME</code>, except for the formatString that is <code>yyyy-MM-dd HH:mm:ss.SSS</code> by default"
        },
        {
          "label": "XMLDATETIME",
          "description": "Converts the result from a XML formatted dateTime to a Date.\n When applied as a JDBC parameter, the method setTimestamp() is used"
        },
        {
          "label": "NUMBER",
          "description": "Converts the result to a Number, using decimalSeparator and groupingSeparator.\n When applied as a JDBC parameter, the method setDouble() is used"
        },
        {
          "label": "INTEGER",
          "description": "Converts the result to an Integer"
        },
        {
          "label": "BOOLEAN",
          "description": "Converts the result to a Boolean"
        },
        {
          "label": "INPUTSTREAM",
          "description": "Only applicable as a JDBC parameter, the method setBinaryStream() is used",
          "deprecated": true
        },
        {
          "label": "BYTES",
          "description": "Only applicable as a JDBC parameter, the method setBytes() is used",
          "deprecated": true
        },
        {
          "label": "BINARY",
          "description": "Forces the parameter value to be treated as binary data (e.g. when using a SQL BLOB field).\n When applied as a JDBC parameter, the method setBinaryStream() or setBytes() is used"
        },
        {
          "label": "CHARACTER",
          "description": "Forces the parameter value to be treated as character data (e.g. when using a SQL CLOB field).\n When applied as a JDBC parameter, the method setCharacterStream() or setString() is used"
        },
        {
          "label": "LIST",
          "description": "Used for StoredProcedure OUT parameters when the database type is a <code>CURSOR</code> or {@link java.sql.JDBCType#REF_CURSOR}.\n See also {@link org.frankframework.jdbc.StoredProcedureQuerySender}.\n <br/>\n DEPRECATED: Type LIST can also be used in larva test to Convert a List to an xml-string (&lt;items&gt;&lt;item&gt;...&lt;/item&gt;&lt;item&gt;...&lt;/item&gt;&lt;/items&gt;)"
        },
        {
          "label": "MAP",
          "description": "(Used in larva only) Converts a Map&lt;String, String&gt; object to a xml-string (&lt;items&gt;&lt;item name='...'&gt;...&lt;/item&gt;&lt;item name='...'&gt;...&lt;/item&gt;&lt;/items&gt;)",
          "deprecated": true
        }
      ]
    },
    {
      "name": "org.frankframework.parameters.DateParameter.DateFormatType",
      "values": [
        {
          "label": "DATE"
        },
        {
          "label": "DATETIME"
        },
        {
          "label": "TIMESTAMP"
        },
        {
          "label": "TIME"
        },
        {
          "label": "XMLDATETIME"
        }
      ]
    },
    {
      "name": "org.frankframework.parameters.XmlParameter.XmlType",
      "values": [
        {
          "label": "NODE"
        },
        {
          "label": "DOMDOC"
        }
      ]
    },
    {
      "name": "org.frankframework.soap.SoapVersion",
      "values": [
        {
          "label": "1.1"
        },
        {
          "label": "1.2"
        },
        {
          "label": "none",
          "description": "No wrapping or unwrapping will be done"
        },
        {
          "label": "auto",
          "description": "Try to auto-detect the value"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.esb.EsbSoapValidator.Direction",
      "values": [
        {
          "label": "INPUT"
        },
        {
          "label": "OUTPUT"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.esb.EsbSoapWrapperPipe.Mode",
      "values": [
        {
          "label": "I2T",
          "description": "ifsa2tibco"
        },
        {
          "label": "REG",
          "description": "Regular"
        },
        {
          "label": "BIS",
          "description": "Business Integration Services"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.fxf.FxfXmlValidator.Direction",
      "values": [
        {
          "label": "SEND"
        },
        {
          "label": "RECEIVE"
        }
      ]
    },
    {
      "name": "org.frankframework.core.IWrapperPipe.Direction",
      "values": [
        {
          "label": "WRAP"
        },
        {
          "label": "UNWRAP"
        }
      ]
    },
    {
      "name": "org.frankframework.core.PipeLine.ExitState",
      "values": [
        {
          "label": "SUCCESS"
        },
        {
          "label": "ERROR"
        },
        {
          "label": "REJECTED"
        }
      ]
    },
    {
      "name": "org.frankframework.util.TransformerPool.OutputType",
      "values": [
        {
          "label": "TEXT"
        },
        {
          "label": "XML"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.MessageSendingPipe.LinkMethod",
      "values": [
        {
          "label": "MESSAGEID"
        },
        {
          "label": "CORRELATIONID"
        }
      ]
    },
    {
      "name": "org.frankframework.collection.AbstractCollectorPipe.Action",
      "values": [
        {
          "label": "OPEN",
          "description": "To initiate a new collection"
        },
        {
          "label": "WRITE",
          "description": "Add an item to an existing collection"
        },
        {
          "label": "LAST",
          "description": "Combination of WRITE and CLOSE: Add an item to an existing collection, then finalize the collection"
        },
        {
          "label": "CLOSE",
          "description": "Finalize the collection"
        },
        {
          "label": "STREAM",
          "deprecated": true
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.aspose.pipe.PdfPipe.DocumentAction",
      "values": [
        {
          "label": "CONVERT"
        },
        {
          "label": "COMBINE"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.rekenbox.Adios2XmlPipe.Direction",
      "values": [
        {
          "label": "Xml2Adios",
          "description": "Transform an Adios-XML file to ASCII-Adios"
        },
        {
          "label": "Adios2Xml",
          "description": "Transform an ASCII-Adios file to Adios-XML"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.tibco.SendTibcoMessage.MessageProtocol",
      "values": [
        {
          "label": "RR",
          "description": "Request-Reply"
        },
        {
          "label": "FF",
          "description": "Fire & Forget"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.tibco.pipes.ObfuscatePipe.Direction",
      "values": [
        {
          "label": "OBFUSCATE"
        },
        {
          "label": "DEOBFUSCATE"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.Base64Pipe.Direction",
      "values": [
        {
          "label": "ENCODE"
        },
        {
          "label": "DECODE"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.hash.Algorithm",
      "values": [
        {
          "label": "MD5"
        },
        {
          "label": "SHA"
        },
        {
          "label": "SHA256"
        },
        {
          "label": "SHA384"
        },
        {
          "label": "SHA512"
        },
        {
          "label": "CRC32"
        },
        {
          "label": "ADLER32"
        },
        {
          "label": "HmacMD5"
        },
        {
          "label": "HmacSHA1"
        },
        {
          "label": "HmacSHA256"
        },
        {
          "label": "HmacSHA384"
        },
        {
          "label": "HmacSHA512"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.HashPipe.HashEncoding",
      "values": [
        {
          "label": "Base64"
        },
        {
          "label": "Hex"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.CompressPipe.FileFormat",
      "values": [
        {
          "label": "GZ",
          "description": "Gzip format; also used when direction is compress and resultIsContent=<code>true</code>\n or when direction is decompress and messageIsContent=<code>true</code>"
        },
        {
          "label": "ZIP",
          "description": "Zip format; also used when direction is compress and resultIsContent=<code>false</code>\n or when direction is decompress and messageIsContent=<code>false</code>"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.CsvParserPipe.HeaderCase",
      "values": [
        {
          "label": "LOWERCASE"
        },
        {
          "label": "UPPERCASE"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.DataSonnetPipe.DataSonnetOutputType",
      "values": [
        {
          "label": "JSON"
        },
        {
          "label": "CSV"
        },
        {
          "label": "XML"
        },
        {
          "label": "YAML"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.EscapePipe.Direction",
      "values": [
        {
          "label": "ENCODE"
        },
        {
          "label": "DECODE"
        },
        {
          "label": "CDATA2TEXT"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.EtagHandlerPipe.EtagAction",
      "values": [
        {
          "label": "GENERATE"
        },
        {
          "label": "GET"
        },
        {
          "label": "SET"
        },
        {
          "label": "DELETE"
        },
        {
          "label": "FLUSH"
        },
        {
          "label": "CLEAR"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.IfPipe.SupportedMediaType",
      "values": [
        {
          "label": "XML"
        },
        {
          "label": "JSON"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.JsonPipe.Direction",
      "values": [
        {
          "label": "JSON2XML"
        },
        {
          "label": "XML2JSON"
        }
      ]
    },
    {
      "name": "org.frankframework.larva.LarvaLogLevel",
      "values": [
        {
          "label": "DEBUG"
        },
        {
          "label": "PIPELINE_MESSAGES_PREPARED_FOR_DIFF"
        },
        {
          "label": "PIPELINE_MESSAGES"
        },
        {
          "label": "WRONG_PIPELINE_MESSAGES_PREPARED_FOR_DIFF"
        },
        {
          "label": "WRONG_PIPELINE_MESSAGES"
        },
        {
          "label": "STEP_PASSED_FAILED"
        },
        {
          "label": "SCENARIO_PASSED_FAILED"
        },
        {
          "label": "SCENARIO_FAILED"
        },
        {
          "label": "TOTALS"
        },
        {
          "label": "ERROR"
        }
      ]
    },
    {
      "name": "org.frankframework.filesystem.FileSystemActor.FileSystemAction",
      "values": [
        {
          "label": "list",
          "description": "list files in a folder/directory, specified by attribute <code>inputFolder</code>, parameter <code>inputFolder</code> or input message"
        },
        {
          "label": "info",
          "description": "show info about a single file, specified by attribute <code>filename</code>, parameter <code>filename</code> or input message"
        },
        {
          "label": "read",
          "description": "read a file, specified by attribute <code>filename</code>, parameter <code>filename</code> or input message"
        },
        {
          "label": "download",
          "description": "replaced by <code>read</code>",
          "deprecated": true
        },
        {
          "label": "readDelete",
          "description": "like <code>read</code>, but deletes the file after it has been read"
        },
        {
          "label": "move",
          "description": "move a file, specified by attribute <code>filename</code>, parameter <code>filename</code> or input message, to a folder specified by attribute <code>destination</code> or parameter <code>destination</code>"
        },
        {
          "label": "copy",
          "description": "copy a file, specified by attribute <code>filename</code>, parameter <code>filename</code> or input message, to a folder specified by attribute <code>destination</code> or parameter <code>destination</code>"
        },
        {
          "label": "delete",
          "description": "delete a file, specified by attribute <code>filename</code>, parameter <code>filename</code> or input message"
        },
        {
          "label": "mkdir",
          "description": "create a folder/directory, specified by attribute <code>inputFolder</code>, parameter <code>inputFolder</code> or input message"
        },
        {
          "label": "rmdir",
          "description": "remove a folder/directory, specified by attribute <code>inputFolder</code>, parameter <code>inputFolder</code> or input message"
        },
        {
          "label": "write",
          "description": "Creates file and writes contents, specified by parameter <code>contents</code> or input message, to a file, specified by attribute <code>filename</code>, parameter <code>filename</code> or input message.\n  At least one of the parameters must be specified. The missing parameter defaults to the input message. For streaming operation, the parameter <code>filename</code> must be specified."
        },
        {
          "label": "upload",
          "description": "replaced by <code>write</code>",
          "deprecated": true
        },
        {
          "label": "append",
          "description": "(only for filesystems that support 'append') append contents, specified by parameter <code>contents</code> or input message, to a file, specified by attribute <code>filename</code>, parameter <code>filename</code> or input message.\n  At least one of the parameters must be specified. The missing parameter defaults to the input message. For streaming operation, the parameter <code>filename</code> must be specified."
        },
        {
          "label": "create",
          "description": "create empty file, specified by attribute <code>filename</code>, parameter <code>filename</code> or input message"
        },
        {
          "label": "rename",
          "description": "change the name of a file, specified by attribute <code>filename</code>, parameter <code>filename</code> or input message, to the value specified by attribute <code>destination</code> or parameter <code>destination</code>"
        },
        {
          "label": "forward",
          "description": "(for MailFileSystems only:) forward an existing file, specified by parameter <code>contents</code> or input message, to a file, to an email address specified by attribute <code>destination</code> or parameter <code>destination</code>"
        },
        {
          "label": "listAttachments",
          "description": "Specific to FileSystemSenderWithAttachments"
        }
      ]
    },
    {
      "name": "org.frankframework.filesystem.TypeFilter",
      "values": [
        {
          "label": "FILES_ONLY"
        },
        {
          "label": "FOLDERS_ONLY"
        },
        {
          "label": "FILES_AND_FOLDERS"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.PGPPipe.Action",
      "values": [
        {
          "label": "ENCRYPT",
          "description": "Encrypts the given input. Requires the publicKey to be set to recipients public key, and recipients to be set to recipients email addresses."
        },
        {
          "label": "SIGN",
          "description": "Encrypts and then signs the given input. On top of the requirements for Encrypt action, signing requires senders to bet set for user's email; and secretKey & secretPassword to be set to private key's path and it's password (password is optional, if private key does not have protection)."
        },
        {
          "label": "DECRYPT",
          "description": "Decrypts the given input. Requires secretKey and secretPassword to bet set to private key's path and it's password. Just like signing, password is not required, if private key does not have protection."
        },
        {
          "label": "VERIFY",
          "description": "Decrypts and verifies the given input. On top of the requirements for Decrypt action, verification expects list of senders' email's and corresponding public keys. However, sender emails does not have to be set, and in that case, this pipe will only validate that someone signed the input."
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.RegExPipe.RegExFlag",
      "values": [
        {
          "label": "CANON_EQ"
        },
        {
          "label": "CASE_INSENSITIVE"
        },
        {
          "label": "COMMENTS"
        },
        {
          "label": "DOT_ALL"
        },
        {
          "label": "LITERAL"
        },
        {
          "label": "MULTILINE"
        },
        {
          "label": "UNICODE_CASE"
        },
        {
          "label": "UNICODE_CHARACTER_CLASS"
        },
        {
          "label": "UNIX_LINES"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.SignaturePipe.Action",
      "values": [
        {
          "label": "SIGN",
          "description": "signs the input"
        },
        {
          "label": "VERIFY",
          "description": "verifies a signature"
        }
      ]
    },
    {
      "name": "org.frankframework.pipes.UUIDGeneratorPipe.Type",
      "values": [
        {
          "label": "ALPHANUMERIC",
          "description": "the UUID will not have a fixed length which will be about 42"
        },
        {
          "label": "NUMERIC",
          "description": "a UUID with fixed length 31 will be generated"
        }
      ]
    },
    {
      "name": "org.frankframework.http.AbstractHttpSender.HttpMethod",
      "values": [
        {
          "label": "GET"
        },
        {
          "label": "POST"
        },
        {
          "label": "PUT"
        },
        {
          "label": "PATCH"
        },
        {
          "label": "DELETE"
        },
        {
          "label": "HEAD"
        },
        {
          "label": "REPORT"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.akamai.HashAlgorithm",
      "values": [
        {
          "label": "MD5"
        },
        {
          "label": "SHA1"
        },
        {
          "label": "SHA256"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.akamai.NetStorageSender.Action",
      "values": [
        {
          "label": "DU"
        },
        {
          "label": "DIR"
        },
        {
          "label": "DELETE"
        },
        {
          "label": "UPLOAD"
        },
        {
          "label": "MKDIR"
        },
        {
          "label": "RMDIR"
        },
        {
          "label": "RENAME"
        },
        {
          "label": "MTIME"
        },
        {
          "label": "DOWNLOAD"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.cmis.CmisSender.CmisAction",
      "values": [
        {
          "label": "CREATE",
          "description": "Create a document"
        },
        {
          "label": "DELETE",
          "description": "Delete a document"
        },
        {
          "label": "GET",
          "description": "Get the content of a document (and optional the properties)"
        },
        {
          "label": "FIND",
          "description": "Perform a query that returns properties"
        },
        {
          "label": "UPDATE",
          "description": "Update the properties of an existing document"
        },
        {
          "label": "FETCH",
          "description": "Get the (meta)data of a folder or document"
        },
        {
          "label": "DYNAMIC",
          "description": "Determine action based on the incoming CmisEvent"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.cmis.CmisSessionBuilder.BindingTypes",
      "values": [
        {
          "label": "ATOMPUB"
        },
        {
          "label": "WEBSERVICES"
        },
        {
          "label": "BROWSER"
        }
      ]
    },
    {
      "name": "org.frankframework.extensions.idin.IdinSender.Action",
      "values": [
        {
          "label": "DIRECTORY"
        },
        {
          "label": "RESPONSE"
        },
        {
          "label": "AUTHENTICATE"
        }
      ]
    },
    {
      "name": "org.frankframework.jdbc.AbstractJdbcQuerySender.QueryType",
      "values": [
        {
          "label": "SELECT",
          "description": "For queries that return data"
        },
        {
          "label": "UPDATEBLOB",
          "description": "For queries that update a BLOB"
        },
        {
          "label": "UPDATECLOB",
          "description": "For queries that update a CLOB"
        },
        {
          "label": "PACKAGE",
          "description": "To execute Oracle PL/SQL package"
        },
        {
          "label": "OTHER",
          "description": "For queries that return no data"
        },
        {
          "label": "INSERT",
          "description": "Deprecated: Use OTHER instead",
          "deprecated": true
        },
        {
          "label": "DELETE",
          "description": "Deprecated: Use OTHER instead",
          "deprecated": true
        },
        {
          "label": "UPDATE",
          "description": "Deprecated: Use OTHER instead",
          "deprecated": true
        }
      ]
    },
    {
      "name": "org.frankframework.ldap.LdapSender.Operation",
      "values": [
        {
          "label": "read",
          "description": "Read the contents of an entry. Configuration requirements:\n <ul>\n \t  <li>parameter 'entryName', resolving to RDN of entry to read</li>\n \t  <li>optional xml-inputmessage containing attributes to be returned</li>\n </ul>"
        },
        {
          "label": "create",
          "description": "Create an attribute or an entry. Configuration requirements:\n <ul>\n \t  <li>parameter 'entryName', resolving to RDN of entry to create</li>\n \t  <li>xml-inputmessage containing attributes to create</li>\n </ul>"
        },
        {
          "label": "update",
          "description": "Update an attribute or an entry. Configuration requirements:\n <ul>\n \t  <li>parameter 'entryName', resolving to RDN of entry to update</li>\n \t  <li>xml-inputmessage containing attributes to update</li>\n \t  <li>optional parameter 'newEntryName', new RDN of entry</li>\n </ul>"
        },
        {
          "label": "delete",
          "description": "Delete an attribute or an entry. Configuration requirements:\n <ul>\n \t  <li>parameter 'entryName', resolving to RDN of entry to delete</li>\n \t  <li>when manipulationSubject is set to attribute: xml-inputmessage containing attributes to be deleted</li>\n </ul>"
        },
        {
          "label": "search",
          "description": "Search for an entry in the direct children of the specified root. Configuration requirements:\n <ul>\n \t  <li>parameter 'entryName', resolving to RDN of entry to read</li>\n    <li>parameter 'filterExpression', specifying the entries searched for</li>\n \t  <li>optional attribute 'attributesToReturn' containing attributes to be returned</li>\n </ul>"
        },
        {
          "label": "deepSearch",
          "description": "Search for an entry in the complete tree below the specified root. Configuration requirements:\n <ul>\n \t  <li>parameter 'entryName', resolving to RDN of entry to read</li>\n    <li>parameter 'filterExpression', specifying the entries searched for</li>\n \t  <li>optional attribute 'attributesToReturn' containing attributes to be returned</li>\n </ul>"
        },
        {
          "label": "getSubContexts",
          "description": "Get a list of the direct children of the specifed root. Configuration requirements:\n <ul>\n \t  <li>parameter 'entryName', resolving to RDN of entry to read</li>\n \t  <li>optional attribute 'attributesToReturn' containing attributes to be returned</li>\n </ul>"
        },
        {
          "label": "getTree",
          "description": "Get a copy of the complete tree below the specified root. Configuration requirements:\n <ul>\n \t  <li>parameter 'entryName', resolving to RDN of entry to read</li>\n \t  <li>optional attribute 'attributesToReturn' containing attributes to be returned</li>\n </ul>"
        },
        {
          "label": "challenge",
          "description": "Check username and password against LDAP specifying principal and credential using parameters. Configuration requirements:\n <ul>\n \t  <li>parameter 'principal', resolving to RDN of user who's password should be verified</li>\n \t  <li>parameter 'credentials', password to verify</li>\n </ul>"
        },
        {
          "label": "changeUnicodePwd",
          "description": "Typical user change-password operation (one of the two methods to modify the unicodePwd attribute in AD (http://support.microsoft.com/kb/263991)). Configuration requirements:\n <ul>\n \t  <li>parameter 'entryName', resolving to RDN of user who's password should be changed</li>\n \t  <li>parameter 'oldPassword', current password, will be encoded as required by Active Directory (a UTF-16 encoded Unicode string containing the password surrounded by quotation marks) before sending it to the LDAP server. It's advised to set attribute hidden to true for parameter.</li>\n \t  <li>parameter 'newPassword', new password, will be encoded as required by Active Directory (a UTF-16 encoded Unicode string containing the password surrounded by quotation marks) before sending it to the LDAP server. It's advised to set attribute hidden to true for parameter.</li>\n </ul>"
        }
      ]
    },
    {
      "name": "org.frankframework.ldap.LdapSender.Manipulation",
      "values": [
        {
          "label": "ENTRY"
        },
        {
          "label": "ATTRIBUTE"
        }
      ]
    },
    {
      "name": "org.frankframework.mongodb.MongoDbSender.MongoAction",
      "values": [
        {
          "label": "INSERTONE"
        },
        {
          "label": "INSERTMANY"
        },
        {
          "label": "FINDONE"
        },
        {
          "label": "FINDMANY"
        },
        {
          "label": "UPDATEONE"
        },
        {
          "label": "UPDATEMANY"
        },
        {
          "label": "DELETEONE"
        },
        {
          "label": "DELETEMANY"
        }
      ]
    },
    {
      "name": "org.frankframework.senders.FrankSender.Scope",
      "values": [
        {
          "label": "JVM"
        },
        {
          "label": "DLL"
        },
        {
          "label": "ADAPTER"
        },
        {
          "label": "LISTENER"
        }
      ]
    },
    {
      "name": "org.frankframework.senders.JavascriptSender.JavaScriptEngines",
      "values": [
        {
          "label": "J2V8"
        },
        {
          "label": "GRAALJS"
        }
      ]
    },
    {
      "name": "org.frankframework.xcom.XComSender.FileOptionType",
      "values": [
        {
          "label": "CREATE"
        },
        {
          "label": "APPEND"
        },
        {
          "label": "REPLACE"
        }
      ]
    },
    {
      "name": "org.frankframework.xcom.XComSender.CarriageFlagType",
      "values": [
        {
          "label": "YES"
        },
        {
          "label": "VLR"
        },
        {
          "label": "VLR2"
        },
        {
          "label": "MPACK"
        },
        {
          "label": "XPACK"
        },
        {
          "label": "NO"
        }
      ]
    },
    {
      "name": "org.frankframework.xcom.XComSender.CodeType",
      "values": [
        {
          "label": "EBCDIC"
        },
        {
          "label": "ASCII"
        }
      ]
    },
    {
      "name": "org.frankframework.xcom.XComSender.CompressType",
      "values": [
        {
          "label": "YES"
        },
        {
          "label": "COMPACT"
        },
        {
          "label": "LZLARGE"
        },
        {
          "label": "LZMEDIUM"
        },
        {
          "label": "LZSMALL"
        },
        {
          "label": "RLE"
        },
        {
          "label": "NO"
        }
      ]
    },
    {
      "name": "org.frankframework.monitoring.SourceFiltering",
      "values": [
        {
          "label": "NONE"
        },
        {
          "label": "ADAPTER"
        },
        {
          "label": "SOURCE"
        }
      ]
    },
    {
      "name": "org.frankframework.monitoring.ITrigger.TriggerType",
      "values": [
        {
          "label": "ALARM"
        },
        {
          "label": "CLEARING"
        }
      ]
    }
  ],
  "labels": [
    {
      "label": "Category",
      "values": ["Advanced", "Basic", "NN-Special"]
    },
    {
      "label": "Components",
      "values": ["Batch", "Monitoring", "Other"]
    },
    {
      "label": "EIP",
      "values": [
        "Endpoint",
        "Errorhandling",
        "Iterator",
        "Router",
        "Session",
        "Translator",
        "Validator"
      ]
    }
  ],
  "properties": [
    {
      "name": "Application",
      "properties": [
        {
          "name": "SPRING.CONFIG.LOCATIONS",
          "description": "use application.server.type to set the type of application server, if it is not properly autodetected\nset application.server.type.custom to e.g. 'ACTIVEMQ' or 'TIBCO', to enable additional features.",
          "defaultValue": "spring${application.server.type}${application.server.type.custom}.xml,springIbisDebuggerAdvice.xml,springCustom.xml"
        },
        {
          "name": "ADDITIONAL.PROPERTIES.FILE",
          "description": "These files will be loaded in the specified order",
          "defaultValue": "DeploymentSpecifics.properties,BuildInfo.properties,ServerSpecifics_${application.server.type}${application.server.type.custom}.properties,SideSpecifics_${dtap.side}.properties,StageSpecifics_${dtap.stage}.properties,Test.properties"
        },
        {
          "name": "ADDITIONAL.PROPERTIES.FILE.SUFFIX",
          "description": "should not be used anymore",
          "flags": ["Deprecated"]
        },
        {
          "name": "application.server.type",
          "description": "If started from a container, this property will automatically be determined/set during startup"
        },
        {
          "name": "application.server.type.custom",
          "defaultValue": "${transactionmanager.type.default}"
        },
        {
          "name": "application.security.http.allowUnsecureOptionsRequests"
        },
        {
          "name": "transactionmanager.type.default",
          "description": "the transactionmanager.type.default property allows an overridable default to be set by a hosting platform"
        },
        {
          "name": "application.security.http.authentication",
          "description": "If TRUE, authentication is enforced on ALL servlets\nWhen left empty the default is TRUE, and FALSE when dtap.stage == LOC"
        },
        {
          "name": "application.security.http.transportGuarantee",
          "description": "Either NONE or CONFIDENTIAL. When set to CONFIDENTIAL a secure protocol (SSL/TLS/HTTPS) is enforced for ALL servlets\nWhen left empty the default is CONFIDENTIAL, and NONE when dtap.stage == LOC"
        },
        {
          "name": "application.security.http.authenticators",
          "description": "Authenticators for HTTP endpoints",
          "defaultValue": "myADAuth"
        },
        {
          "name": "application.security.http.authenticators.myADAuth.type",
          "defaultValue": "AD"
        },
        {
          "name": "application.security.http.authenticators.myADAuth.baseDn",
          "defaultValue": "DC"
        },
        {
          "name": "application.security.http.authenticators.myADAuth.url",
          "defaultValue": "ldap://10.1.2.3"
        },
        {
          "name": "application.security.http.authenticators"
        },
        {
          "name": "application.security.http.authenticator",
          "description": "Default authenticator for HTTP endpoints.",
          "defaultValue": "CONTAINER"
        },
        {
          "name": "application.name",
          "defaultValue": "IAF"
        },
        {
          "name": "application.version",
          "description": "Deprecated as we now use maven this will be determined dynamically during the build pipeline.",
          "defaultValue": "${frankframework-core.version}",
          "flags": ["Deprecated", "Generated"]
        }
      ]
    },
    {
      "name": "Configuration",
      "properties": [
        {
          "name": "instance.name",
          "description": "The name of this instance of the Frank!Framework",
          "defaultValue": "Frank"
        },
        {
          "name": "instance.name.lc",
          "description": "Lowercase of ${instance.name}",
          "flags": ["Generated"]
        },
        {
          "name": "instance.version",
          "description": "${project.version} of the instance can be set by using `BuildInfo.properties` in a maven pipeline."
        },
        {
          "name": "instance.timestamp",
          "description": "timestamp in YYYYMMDD-HHMM format can be set by using `BuildInfo.properties` in a maven pipeline."
        },
        {
          "name": "configurations.names.application",
          "defaultValue": "IAF_Util,${configurations.names}"
        },
        {
          "name": "configurations.names",
          "defaultValue": "${instance.name}"
        },
        {
          "name": "configurations.directory"
        },
        {
          "name": "configurations.autoStart",
          "defaultValue": "true"
        },
        {
          "name": "configurations.validate",
          "defaultValue": "true"
        },
        {
          "name": "configurations.validation",
          "defaultValue": "${configurations.validate}"
        },
        {
          "name": "adapters.autoStart",
          "defaultValue": "true"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "ibis.tmpdir",
          "description": "Temporary directory in which the Frank!Framework can write temporary files such as J2V8, the flow diagrams, etc.",
          "defaultValue": "${java.io.tmpdir}/${instance.name}"
        }
      ]
    },
    {
      "name": "Flow",
      "properties": [
        {
          "name": "flow.adapter.dir",
          "defaultValue": "${ibis.tmpdir}/flow/adapter"
        },
        {
          "name": "flow.config.dir",
          "defaultValue": "${ibis.tmpdir}/flow/config"
        },
        {
          "name": "flow.generator",
          "defaultValue": "org.frankframework.util.flow.MermaidFlowGenerator"
        },
        {
          "name": "flow.javascript.engines",
          "defaultValue": "org.frankframework.javascript.J2V8"
        }
      ]
    },
    {
      "name": "Cache",
      "properties": [
        {
          "name": "cache.dir",
          "description": "cache.dir is used by caches, to store data on disk.",
          "defaultValue": "${log.dir}"
        },
        {
          "name": "cache.default.maxElementsInMemory",
          "defaultValue": "100"
        },
        {
          "name": "cache.default.memoryStoreEvictionPolicy",
          "defaultValue": "LRU"
        },
        {
          "name": "cache.default.eternal",
          "defaultValue": "false"
        },
        {
          "name": "cache.default.timeToLiveSeconds",
          "defaultValue": "36000"
        },
        {
          "name": "cache.default.timeToIdleSeconds",
          "defaultValue": "36000"
        },
        {
          "name": "cache.default.overflowToDisk",
          "defaultValue": "false"
        },
        {
          "name": "cache.default.maxElementsOnDisk",
          "defaultValue": "10000"
        },
        {
          "name": "cache.default.diskPersistent",
          "defaultValue": "false"
        },
        {
          "name": "cache.default.diskExpiryThreadIntervalSeconds",
          "defaultValue": "600"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "log.logIntermediaryResults",
          "description": "indicates whether (with loglevel debug) the results between calling pipes have to be logged.",
          "defaultValue": "true"
        },
        {
          "name": "log.dir"
        },
        {
          "name": "log.hideRegex"
        },
        {
          "name": "log.level"
        },
        {
          "name": "log.maxFileSize"
        },
        {
          "name": "browse.messages.max ",
          "description": "The number of messages displayed in browsers, e.g. for the errorStorage and messageLog",
          "defaultValue": " 100"
        },
        {
          "name": "browse.messages.order ",
          "defaultValue": " DESC"
        },
        {
          "name": "browse.errors.order ",
          "defaultValue": " ASC"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "receiver.defaultMaxBackoffDelay",
          "defaultValue": "60"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "transactionmanager.log.dir",
          "defaultValue": "${log.dir}/transactionlogs/${instance.name.lc}"
        },
        {
          "name": "transactionmanager.uid"
        },
        {
          "name": "transactionmanager.defaultTransactionTimeout",
          "description": "Maximum timeout (in s) that can be allowed for transactions.",
          "defaultValue": "180"
        },
        {
          "name": "transactionmanager.narayana.reapTime",
          "description": "Amount of time (in ms) between runs of the TX maintenance thread.",
          "defaultValue": "120000"
        },
        {
          "name": "transactionmanager.narayana.stuckTime",
          "description": "Interval (in ms) allowed for a single active connection to be in use to the backend resource before it is considered to be *stuck.*",
          "defaultValue": "180000"
        },
        {
          "name": "transactionmanager.narayana.stuckTimerTime",
          "description": "How often (in ms) the connection pool checks for stuck connections.",
          "defaultValue": "30000"
        }
      ]
    },
    {
      "name": "Narayana ObjectStore",
      "properties": [
        {
          "name": "transactionmanager.narayana.objectStoreType",
          "description": "When using the database the FQDN must be used, eg; com.arjuna.ats.internal.arjuna.objectstore.jdbc.JDBCStore",
          "defaultValue": "com.arjuna.ats.internal.arjuna.objectstore.ShadowNoFileLockStore"
        },
        {
          "name": "transactionmanager.narayana.objectStoreDatasource",
          "description": "JNDI DataSource name, should not be XA-capable and will be managed + pooled by the framework."
        },
        {
          "name": "transactionmanager.narayana.dropTable",
          "defaultValue": "false"
        },
        {
          "name": "transactionmanager.narayana.createTable",
          "defaultValue": "true"
        }
      ]
    },
    {
      "name": "JDBC connection pool",
      "properties": [
        {
          "name": "transactionmanager.jdbc.connection.minPoolSize",
          "description": "use `transactionmanager.jdbc.connection.minIdle` instead",
          "defaultValue": "0",
          "flags": ["Deprecated"]
        },
        {
          "name": "transactionmanager.jdbc.connection.minIdle",
          "description": "Minimum number of physical connections that should be maintained in IDLE state when the pool is not full.\nKeeping idle connections available in the pool can increase performance.",
          "defaultValue": "${transactionmanager.jdbc.connection.minPoolSize}"
        },
        {
          "name": "transactionmanager.jdbc.connection.maxPoolSize",
          "description": "Maximum number of physical connections that you can create in this pool.",
          "defaultValue": "20"
        },
        {
          "name": "transactionmanager.jdbc.connection.maxIdle",
          "description": "Maximum number of physical connections that are allowed to be idle in the pool.",
          "defaultValue": "2"
        },
        {
          "name": "transactionmanager.jdbc.connection.maxLifeTime",
          "description": "The maximum lifetime (in seconds) that a connection can stay in the pool before getting closed.",
          "defaultValue": "0"
        },
        {
          "name": "transactionmanager.jdbc.connection.checkInterval",
          "description": "The interval (in seconds) between checks on idle connections in the pool",
          "defaultValue": "300"
        },
        {
          "name": "transactionmanager.jdbc.connection.testQuery",
          "description": "Optional test-query for validation of the connection. If not set, JDBC4 driver based validation will be used."
        }
      ]
    },
    {
      "name": "JMS Connection Pool properties for Narayana",
      "properties": [
        {
          "name": "transactionmanager.narayana.jms.connection.maxPoolSize",
          "description": "Maximum number of physical connections that you can create in this pool.",
          "defaultValue": "10"
        },
        {
          "name": "transactionmanager.narayana.jms.connection.maxIdleTime",
          "description": "Amount of time a connection can be unused or idle until it can be discarded.",
          "defaultValue": "60"
        },
        {
          "name": "transactionmanager.narayana.jms.connection.maxSessions",
          "description": "Maximum number of jms sessions per connection that can be created in the connection pool.",
          "defaultValue": "100"
        },
        {
          "name": "transactionmanager.narayana.jms.connection.checkInterval",
          "description": "When set (in seconds), connections are validated, and either kept or removed from the pool, at this interval.",
          "defaultValue": "300"
        },
        {
          "name": "transactionmanager.narayana.jms.connections.sessionWaitTimeout",
          "description": "Max time to wait (in seconds) for a connection to become available if no connections are available from the pool",
          "defaultValue": "15"
        },
        {
          "name": "transactionmanager.narayana.jdbc.connection.minPoolSize",
          "description": "Instead use transactionmanager.jdbc.connection.minIdle",
          "defaultValue": "${transactionmanager.jdbc.connection.minIdle}",
          "flags": ["Deprecated"]
        },
        {
          "name": "transactionmanager.narayana.jdbc.connection.minIdle",
          "description": "Instead use transactionmanager.jdbc.connection.minIdle.",
          "defaultValue": "${transactionmanager.narayana.jdbc.connection.minPoolSize}",
          "flags": ["Deprecated"]
        }
      ]
    },
    {
      "name": "JDBC",
      "properties": [
        {
          "name": "jdbc.required",
          "description": "When set to true the application will not start up if there is no (valid) database connection.",
          "defaultValue": "true"
        },
        {
          "name": "jdbc.datasource.default",
          "description": "Automatically set to the application's instance name (lower case).",
          "defaultValue": "jdbc/${instance.name.lc}",
          "flags": ["Generated"]
        },
        {
          "name": "jdbc.migrator.active",
          "description": "Whether to run Liquibase migrations",
          "defaultValue": "false"
        },
        {
          "name": "jdbc.migrator.datasource",
          "defaultValue": "${jdbc.datasource.default}"
        },
        {
          "name": "liquibase.changeLogFile",
          "description": "The liquibase migration changeset to run on the specified datasource",
          "defaultValue": "DatabaseChangelog.xml"
        },
        {
          "name": "jdbc.sqlDialect"
        },
        {
          "name": "jdbc.storage.useIndexHint",
          "defaultValue": "false"
        },
        {
          "name": "jdbc.storage.useFirstRowsHint",
          "defaultValue": "true"
        },
        {
          "name": "jdbc.storage.useParameters",
          "defaultValue": "true"
        },
        {
          "name": "jdbc.storage.assumePrimaryKeyUnique",
          "defaultValue": "true"
        },
        {
          "name": "jdbc.storage.checkTable",
          "defaultValue": "true"
        },
        {
          "name": "jdbc.storage.checkIndices",
          "defaultValue": "true"
        },
        {
          "name": "jdbc.dateFormat",
          "defaultValue": "yyyy-MM-dd"
        },
        {
          "name": "jdbc.timestampFormat",
          "defaultValue": "yyyy-MM-dd HH:mm:ss"
        },
        {
          "name": "jdbc.convertFieldnamesToUppercase",
          "defaultValue": "true"
        },
        {
          "name": "AppConstants.properties.jdbc",
          "defaultValue": "false"
        },
        {
          "name": "dbmssupport.mssql.queuereading.rowlock",
          "description": "Disable use of MSSQL WITH(rowlock) by setting dbmssupport.mssql.queuereading.rowlock=false,\nbecause MsSql Server starts with a rowlock, escalates to higher level (page lock, table lock) when it thinks it is appropriate",
          "defaultValue": "false"
        }
      ]
    },
    {
      "name": "Logging",
      "properties": [
        {
          "name": "logging.path",
          "description": "The path where the logging can be found, respectively the wildcard for log-files",
          "defaultValue": "${log.dir}",
          "flags": ["Generated"]
        },
        {
          "name": "logging.wildcard",
          "description": "Use 'log.viewer.wildcard' instead",
          "defaultValue": "*",
          "flags": ["Deprecated"]
        },
        {
          "name": "logging.showdirectories",
          "description": "Use 'log.viewer.showdirectories' instead",
          "defaultValue": "true",
          "flags": ["Deprecated"]
        },
        {
          "name": "logging.items.max",
          "description": "Use 'log.viewer.maxitems' instead",
          "defaultValue": "500",
          "flags": ["Deprecated"]
        },
        {
          "name": "log.viewer.wildcard",
          "defaultValue": "${logging.wildcard}"
        },
        {
          "name": "log.viewer.showdirectories",
          "defaultValue": "${logging.showdirectories}"
        },
        {
          "name": "log.viewer.maxitems",
          "defaultValue": "${logging.items.max}"
        }
      ]
    },
    {
      "name": "Statistics",
      "properties": [
        {
          "name": "Statistics.boundaries",
          "description": "Class boundaries for StatisticsKeeper. [milliseconds]\nThese map to percentiles in exported metrics",
          "defaultValue": "100,1000,2000,10000"
        },
        {
          "name": "Statistics.size.boundaries",
          "description": "Class boundaries for SizeStatisticsKeeper. [bytes]\nThese map to percentiles in exported metrics",
          "defaultValue": "100000,1000000"
        },
        {
          "name": "Statistics.percentiles",
          "description": "Percentiles for StatisticsKeeper.\nThese map to Service Level Objectives in exported metrics",
          "defaultValue": "50,90,95,98"
        },
        {
          "name": "Statistics.percentiles.precision",
          "description": "Determines the number of digits of precision to maintain on the dynamic range\nhistogram used to compute percentile approximations. The higher the degrees of\nprecision, the more accurate the approximation is at the cost of more memory.",
          "defaultValue": "1"
        },
        {
          "name": "Statistics.percentiles.publish",
          "description": "Set Statistics.percentiles.publish=true to support and export percentiles and service level objectives in a non-aggregatable way.\nMemory requirements will increase from 0.1kB to about 6kB per measured value.\nEach Pipe has at least message size and duration measured.",
          "defaultValue": "false"
        },
        {
          "name": "Statistics.histograms.publish",
          "description": "Set Statistics.histograms.publish=true to support and export histograms, percentiles and service level objectives that can be aggregated.\nMemory requirements will increase from about 0.1kB to 12kB per measured value at precision=1.\nEach Pipe has at least message size and duration measured.\nsee also https://micrometer.io/docs/concepts#_distribution_summaries",
          "defaultValue": "false"
        },
        {
          "name": "statistics.retention",
          "description": "number of days statistics are kept on the filesystem",
          "defaultValue": "42"
        },
        {
          "name": "statistics.cron",
          "description": "cron pattern to be used by dump statistics",
          "defaultValue": "0 45 23 * * ?"
        },
        {
          "name": "statistics.size",
          "defaultValue": "true"
        },
        {
          "name": "management.metrics.export.local.enabled",
          "defaultValue": "true"
        },
        {
          "name": "management.metrics.export.local.configurator",
          "defaultValue": "org.frankframework.metrics.LocalRegistryConfigurator"
        },
        {
          "name": "management.metrics.export.prometheus.enabled",
          "defaultValue": "false"
        },
        {
          "name": "management.metrics.export.prometheus.configurator",
          "defaultValue": "org.frankframework.metrics.PrometheusRegistryConfigurator"
        },
        {
          "name": "management.metrics.export.cloudwatch.enabled",
          "defaultValue": "false"
        },
        {
          "name": "management.metrics.export.cloudwatch.configurator",
          "defaultValue": "org.frankframework.metrics.CloudWatchRegistryConfigurator"
        },
        {
          "name": "management.metrics.export.cloudwatch.namespace",
          "defaultValue": "${instance.name.lc}"
        },
        {
          "name": "management.metrics.export.cloudwatch.step",
          "defaultValue": "15m"
        },
        {
          "name": "management.metrics.export.statsd.enabled",
          "defaultValue": "false"
        },
        {
          "name": "management.metrics.export.statsd.configurator",
          "defaultValue": "org.frankframework.metrics.StatsDRegistryConfigurator"
        },
        {
          "name": "management.metrics.export.statsd.flavor",
          "defaultValue": "etsy"
        },
        {
          "name": "management.metrics.export.statsd.step",
          "defaultValue": "15m"
        },
        {
          "name": "management.metrics.export.influx.enabled",
          "defaultValue": "false"
        },
        {
          "name": "management.metrics.export.influx.configurator",
          "defaultValue": "org.frankframework.metrics.InfluxRegistryConfigurator"
        },
        {
          "name": "management.metrics.export.influx.uri",
          "defaultValue": "http://localhost:8086"
        },
        {
          "name": "management.metrics.export.influx.org",
          "defaultValue": "waf"
        },
        {
          "name": "management.metrics.export.influx.bucket",
          "defaultValue": "${instance.name.lc}"
        },
        {
          "name": "management.metrics.export.influx.authAlias",
          "defaultValue": "influx"
        },
        {
          "name": "management.metrics.export.kairos.enabled",
          "defaultValue": "false"
        },
        {
          "name": "management.metrics.export.kairos.configurator",
          "defaultValue": "org.frankframework.metrics.KairosDbRegistryConfigurator"
        },
        {
          "name": "management.metrics.export.kairos.uri",
          "defaultValue": "http://localhost:8080/api/v1/datapoints"
        },
        {
          "name": "management.metrics.export.kairos.authAlias"
        },
        {
          "name": "management.gateway.outbound.class",
          "description": "Default management control endpoints",
          "defaultValue": "org.frankframework.management.bus.LocalGateway"
        },
        {
          "name": "management.gateway.inbound.class"
        }
      ]
    },
    {
      "name": "Database cleanup",
      "properties": [
        {
          "name": "cleanup.database.cron",
          "description": "cron pattern to be used by cleanup the database",
          "defaultValue": "0 45 1 * * ?"
        },
        {
          "name": "cleanup.database.maxrows",
          "description": "maximum number of rows to delete from ibisstore table in one execution of job. Set to 0 for unlimited.",
          "defaultValue": "25000"
        },
        {
          "name": "cleanup.database.active",
          "defaultValue": "true"
        },
        {
          "name": "cleanup.filesystem.cron",
          "description": "cron pattern to be used by cleanup the file system",
          "defaultValue": "0 35 1 * * ?"
        },
        {
          "name": "cleanup.filesystem.active",
          "defaultValue": "true"
        },
        {
          "name": "cleanup.log.dir.retention",
          "defaultValue": "60d"
        },
        {
          "name": "recover.adapters.interval",
          "description": "cron pattern to be used by recover adapters",
          "defaultValue": "300000"
        },
        {
          "name": "checkReload.interval",
          "defaultValue": "60000"
        },
        {
          "name": "loadDatabaseSchedules.active",
          "defaultValue": "false"
        },
        {
          "name": "loadDatabaseSchedules.interval",
          "defaultValue": "60000"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "xml.namespaceAware.default",
          "defaultValue": "true"
        },
        {
          "name": "xslt.streaming.default",
          "description": "set xslt.streaming.default=true to use streaming Xslt.\nN.B. 2019-11-25 this appeared to cause NullPointerExceptions in Xalans TransformerHandlerImpl, therefor we then disabled this setting\n(also because it is using more memory than expected, e.g. ForEachChildElementPipe with elementXPathExpression still goes out of memory on large files)",
          "defaultValue": "true"
        },
        {
          "name": "xslt.auto.reload",
          "defaultValue": "false"
        },
        {
          "name": "xslt.bufsize",
          "defaultValue": "4096"
        },
        {
          "name": "xslt.version.default",
          "description": "Sets the default XSLT version throughout the entire application except the ForEachChildElementPipe.\nThe ForEachChildElementPipe usually works with large files and thus is streaming preferred.\nCurrently streaming is only supported with XSLT version 1.\nTherefore this property will not change the XSLT version in the ForEachChildElementPipe.\nIf desired, the XSLT version can be changed for each individual ForEachChildElementPipe using xsltVersion=2.",
          "defaultValue": "2"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "xmlValidator.warn",
          "defaultValue": "true"
        },
        {
          "name": "xmlValidator.lazyInit",
          "description": "When true don't initialize validators at startup (initialize validator when it\nis called for the first time)",
          "defaultValue": "false"
        },
        {
          "name": "xmlValidator.maxInitialised",
          "description": "Maximum number of validators to keep initialized after which the least recent\nused validator will be reset and needs to be initialized again when it is\ncalled. A low value will result in more initialization calls (hence more CPU\nusage and less performance). A high value will result in more initialized\nobjects being held in memory (hence more memory usage). A value of -1 will\nkeep all validators initialized",
          "defaultValue": "-1"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "jms.connectionsArePooled",
          "defaultValue": "true"
        },
        {
          "name": "jms.sessionsArePooled",
          "defaultValue": "true"
        },
        {
          "name": "jms.useSingleDynamicReplyQueue",
          "description": "IF (jms.connectionsArePooled==true) THEN jms.useSingleDynamicReplyQueue=false",
          "defaultValue": "false"
        },
        {
          "name": "jms.createDestination",
          "defaultValue": "false"
        },
        {
          "name": "jms.lookupDestination",
          "description": "default value for the lookupDestination attribute in jms classes",
          "defaultValue": "true"
        },
        {
          "name": "jms.messageClass.default",
          "description": "Default class of messages for outgoing JMS message: AUTO, TEXT, or BYTES.\nIn case of AUTO the system will send BytesMessage for binary messages, TextMessage otherwise.",
          "defaultValue": "AUTO"
        },
        {
          "name": "jms.cleanUpOnClose",
          "defaultValue": "true"
        },
        {
          "name": "jms.esb.rr.forceMessageIdAsCorrelationId.default",
          "description": "Default value for forceMessageIdAsCorrelationId in the EsbJmsListener for RR protocol,\nwhen no attribute is specified in the configuration."
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "application.security.jwt.allowWeakSecrets",
          "defaultValue": "false"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "fxf.version",
          "description": "set fxf.version to 'auto' for automatic version detection\nalternatively set to '1' or '2'",
          "defaultValue": "auto"
        },
        {
          "name": "fxf.dir"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "jta.userTransactionUrl1",
          "defaultValue": "java:comp/UserTransaction"
        },
        {
          "name": "jta.userTransactionUrl2",
          "defaultValue": "jta/usertransaction"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "monitoring.enabled",
          "description": "Monitoring",
          "defaultValue": "false"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "otap.stage",
          "description": "use property `dtap.stage` instead.",
          "defaultValue": "xxx",
          "flags": ["Deprecated"]
        },
        {
          "name": "otap.side",
          "description": "use property `dtap.side` instead.",
          "defaultValue": "xxx",
          "flags": ["Deprecated"]
        },
        {
          "name": "dtap.stage",
          "description": "Development pipeline phase: local `LOC`, development `DEV`, test `TST`, acceptance `ACC` and production `PRD`.",
          "defaultValue": "${otap.stage}"
        },
        {
          "name": "dtap.side",
          "description": "Development pipeline side, such as EP (External) and SI (Single Instance) AS (Associates).",
          "defaultValue": "${otap.side}"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "query.includeFieldDefinition.default",
          "defaultValue": "true"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "msg.log.level.default",
          "description": "Enable ${instance.name.lc}-messages.log (see Adapter.msgLogLevel also)",
          "defaultValue": "INFO"
        },
        {
          "name": "msg.log.hidden.default",
          "description": "Log the size of the message instead of the content of the message (see Adapter.msgLogHidden also)",
          "defaultValue": "true"
        },
        {
          "name": "msg.log.keys",
          "description": "Optionally override keys to log on listener level with <listener xPathLoggingKeys=\"conversationId,testId\" ... /> (see JmsListenerBase.xPathLoggingKeys also)",
          "defaultValue": "conversationId"
        },
        {
          "name": "msg.log.xPath.conversationId",
          "description": "Define xPath for key conversationId",
          "defaultValue": "*[local-name()"
        },
        {
          "name": ""
        },
        {
          "name": "Display duration in human-readable format by appending a duration letter such as 'S' (second) or 'M' (minute)"
        },
        {
          "name": "msg.log.humanReadable",
          "defaultValue": "false"
        },
        {
          "name": "sec.log.includeMessage",
          "defaultValue": "false"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "adapter.message.max.size",
          "defaultValue": "1000"
        },
        {
          "name": "message.size.warn.default",
          "defaultValue": "30MB"
        }
      ]
    },
    {
      "name": "Larva",
      "properties": [
        {
          "name": "stub4testtool.configuration",
          "description": "perform stubbing of the configuration for Larva Test Tool",
          "defaultValue": "false"
        },
        {
          "name": "larva.timeout",
          "description": "setting for changing the default timeout in larva",
          "defaultValue": "10000"
        },
        {
          "name": "larva.parallel.blacklistDirs",
          "description": "setting when using parallel executement, to exclude from the scenario list, and run in sequential order instead."
        },
        {
          "name": "larva.parallel.threads",
          "description": "setting when using parallel executement, how many threads may be used in parallel.",
          "defaultValue": "4"
        },
        {
          "name": "larva.javasource.directory",
          "description": "Larva Test Tool properties to use when deviating from default settings (in LarvaTool.java)",
          "defaultValue": "${webapp.realpath}/../resources"
        },
        {
          "name": "larva.configuration.directory",
          "defaultValue": "${webapp.realpath}/../Configuration"
        },
        {
          "name": "larva.windiff.command",
          "defaultValue": "${webapp.realpath}/../../../../IbisAlgemeenWasbak/WinDiff/WinDiff.Exe"
        },
        {
          "name": "larva.diffs.autosave",
          "defaultValue": "true"
        },
        {
          "name": "ibistesttool.custom",
          "description": "Optionally use a custom configuration for the Ladybug Test Tool"
        },
        {
          "name": "ibistesttool.springConfigFile",
          "description": "Spring XML file that loads all TestTool beans",
          "defaultValue": "springIbisTestTool${ibistesttool.custom}.xml"
        },
        {
          "name": "ibistesttool.maxCheckpoints",
          "description": "Maximum number of checkpoints per report",
          "defaultValue": "2500"
        },
        {
          "name": "ibistesttool.maxMemoryUsage",
          "description": "Maximum estimated memory usage per report, in bytes",
          "defaultValue": "100000000"
        },
        {
          "name": "ibistesttool.maxMessageLength",
          "description": "Maximum character length for a report message. NOTE: Log4j messages can be capped with the 'log.lengthLogRecords'\nproperty in the log4j4ibis.properties file.",
          "defaultValue": "1000000"
        },
        {
          "name": "ibistesttool.reportTransformation",
          "description": "Report transformation xslt",
          "defaultValue": "TestTool/xsl/Default.xsl"
        },
        {
          "name": "ibistesttool.maxStorageSize",
          "description": "Maximum database size. When necessary the oldest report(s) will be deleted when adding a new one (default is 100MB)",
          "defaultValue": "100MB"
        },
        {
          "name": "ibistesttool.maxFileSize",
          "description": "Maximum file size for debug storage (.tts) files (default is 1MB)",
          "defaultValue": "1MB"
        },
        {
          "name": "ibistesttool.maxBackupIndex",
          "description": "Maximum number of debug storage backup (.tts) files (default is 9)",
          "defaultValue": "9"
        },
        {
          "name": "ibistesttool.freeSpaceMinimum",
          "description": "When free space on disk drops below freeSpaceMinimum the user will see a warning in the Ladybug Debug tab and reports\nfor debugging will be discarded (not saved to disk anymore) (default is maxFileSize * (maxBackupIndex + 1) * 10)",
          "defaultValue": "10MB"
        },
        {
          "name": "ibistesttool.regexFilter",
          "description": "Regex filter for reports to show up in debug tab (leave empty to not apply any thread filter regex). This was used\nwith old GUI: ibistesttool.regexFilter=^(?!Pipeline WebControl).*"
        },
        {
          "name": "ibistesttool.directory",
          "description": "Root directory for xml storage (Frank!Runner will override it with a system property)",
          "defaultValue": "${log.dir}/testtool"
        },
        {
          "name": "ladybug.jdbc.migrator.active",
          "description": "Enable running the Ladybug Liquibase scripts (proxy storage will switch to file storage when table not present)\n(default is ${jdbc.migrator.active} when available, otherwise default is false)",
          "defaultValue": "true"
        },
        {
          "name": "ladybug.jdbc.datasource",
          "description": "DataSource to be used by Ladybug, and it's Liquibase script (default is ${jdbc.datasource.default})"
        },
        {
          "name": "testtool.enabled",
          "description": "Enable report generator in all environments (default: false when dtap.stage=ACC or dtap.stage=PRD, otherwise true)",
          "defaultValue": "true"
        },
        {
          "name": "validators.disabled"
        },
        {
          "name": "ibistesttool.defaultView"
        },
        {
          "name": "ibistesttool.freeSpaceMinimum"
        },
        {
          "name": "ibistesttool.maxStorageSize"
        },
        {
          "name": "ibistesttool.maxBackupIndex"
        },
        {
          "name": "ibistesttool.maxFileSize"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "messageLog.count.show",
          "description": "the property messageLog.check is replaced by property warnings.suppress.integrityCheck, which can be set on the adapterlevel too and means effectively its opposite",
          "defaultValue": "true"
        },
        {
          "name": "errorStore.count.show",
          "defaultValue": "true"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "FileViewerServlet.permission.rules",
          "description": "",
          "defaultValue": "${logging.path} * allow",
          "flags": ["Deprecated"]
        },
        {
          "name": "FileViewer.permission.rules",
          "description": "Definitions for the FileViewer",
          "defaultValue": "${FileViewerServlet.permission.rules}"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "browseJdbcTable.permission.rules",
          "defaultValue": "* * allow"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "adapterServiceWatchedDirectory"
        },
        {
          "name": "adapterServiceCheckRateInSeconds",
          "defaultValue": "60"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "manageDatabase.active",
          "defaultValue": "false"
        },
        {
          "name": "manageDatabase.webServiceListener.active",
          "defaultValue": "false"
        },
        {
          "name": "manageDatabase.serviceName",
          "description": "set manageDatabase.serviceName to make manageDatabase available via ServiceDispatcher as external JavaListener"
        },
        {
          "name": "checkReload.active",
          "defaultValue": "true"
        },
        {
          "name": "manageFileSystem.active",
          "defaultValue": "false"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "classloader.allowed.protocols",
          "description": "Comma separated list of (external) protocols where the ClassLoader may retrieve files from.\nPossible protocols include: file,http,ftp",
          "defaultValue": "classpath"
        }
      ]
    },
    {
      "name": "RESTFUL Etag Caching",
      "properties": [
        {
          "name": "etag.cache.type",
          "description": "Type of cache to be used. (memcached,ehcache) NOTE: Ehcache is local (stateful)",
          "defaultValue": "ehcache"
        },
        {
          "name": "etag.cache.server",
          "description": "Url(s) of external caching mechanisms (space separated)"
        },
        {
          "name": "etag.cache.username",
          "description": "If applicable, authentication for the etag cache server"
        },
        {
          "name": "etag.cache.password"
        },
        {
          "name": "etag.cache.timeout",
          "description": "Timeout for the etag precondition check",
          "defaultValue": "10"
        },
        {
          "name": "etag.ehcache.maxElementsInMemory",
          "defaultValue": "512"
        },
        {
          "name": "etag.ehcache.memoryStoreEvictionPolicy",
          "defaultValue": "LRU"
        },
        {
          "name": "etag.ehcache.eternal",
          "defaultValue": "false"
        },
        {
          "name": "etag.ehcache.overflowToDisk",
          "defaultValue": "false"
        },
        {
          "name": "etag.ehcache.maxElementsOnDisk",
          "defaultValue": "10000"
        },
        {
          "name": "etag.ehcache.dir",
          "defaultValue": "${cache.dir}"
        },
        {
          "name": "etag.ehcache.diskPersistent",
          "defaultValue": "false"
        },
        {
          "name": "etag.ehcache.diskExpiryThreadIntervalSeconds",
          "defaultValue": "600"
        },
        {
          "name": "etag.cache.authAlias"
        }
      ]
    },
    {
      "name": "Cross Site Request Forgery protection",
      "properties": [
        {
          "name": "csrf.enabled",
          "defaultValue": "true"
        },
        {
          "name": "csrf.cookie.path"
        }
      ]
    },
    {
      "name": "Suppressions",
      "properties": [
        {
          "name": "warnings.suppress.sqlInjections",
          "description": "Below listed 4 suppression keys should be used with an adapter name to avoid losing any useful configuration warnings.\nExample: warnings.suppress.transaction.{NameOfTheAdapter}=true\nSqlInjection warnings can not be suppressed globally on application level, however it is possible to set\nSystem property warnings.suppress.sqlInjections=true to suppress all related configuration warnings at once.",
          "defaultValue": "false"
        },
        {
          "name": "warnings.suppress.defaultvalue",
          "defaultValue": "false"
        },
        {
          "name": "warnings.suppress.deprecated",
          "defaultValue": "false"
        },
        {
          "name": "warnings.suppress.transaction",
          "description": "setting this true will suppress the transaction warnings in the console.\nNamely, the warnings \"implementing setting of transacted=...\",\n\"listener type {name} requires transactional processing\",\n\"... but has no errorSender or errorStorage\"",
          "defaultValue": "false"
        },
        {
          "name": "warnings.suppress.integrityCheck",
          "description": "If warnings.suppress.integrityCheck is set true, this suppresses a warning that is issued by MessageSendingPipes if asynchronous senders do not have a messageLog.\nHaving the messageLog enables service management to provide proof of the messages sent, and when applicable,\nto prove that for each message received by the adapter a corresponding message was sent by the MessageSendingPipe.",
          "defaultValue": "false"
        },
        {
          "name": "security.constraint.warning"
        }
      ]
    },
    {
      "name": "Interactive console",
      "properties": [
        {
          "name": "iaf-api.enabled",
          "description": "Activates the new Frank!Framework API + GUI3.0",
          "defaultValue": "true"
        },
        {
          "name": "console.location",
          "defaultValue": "iaf/gui/"
        },
        {
          "name": "iaf-api.allowDeprecated",
          "description": "Enable deprecated API endpoints",
          "defaultValue": "false"
        },
        {
          "name": "api.auth.cors.allowOrigin"
        },
        {
          "name": "api.auth.cors.exposeHeaders"
        },
        {
          "name": "api.auth.token-ttl"
        },
        {
          "name": "api.etag.enabled"
        },
        {
          "name": "console.active",
          "defaultValue": "${iaf-api.enabled}"
        },
        {
          "name": "console.cookies.functional",
          "defaultValue": "true"
        },
        {
          "name": "console.cookies.personalization",
          "defaultValue": "true"
        },
        {
          "name": "console.cookies.analytical",
          "defaultValue": "true"
        },
        {
          "name": "console.pollerInterval",
          "description": "How often the interactive frontend should poll the IAF API for new data",
          "defaultValue": "5000"
        },
        {
          "name": "console.idle.pollerInterval",
          "description": "How often the interactive frontend should poll during IDLE state",
          "defaultValue": "60000"
        },
        {
          "name": "console.idle.time",
          "description": "After x seconds the interactive console goes into 'IDLE' state, in the idle state the console changes it's polling interval\nUse 0 to disable this functionality",
          "defaultValue": "300"
        },
        {
          "name": "console.idle.timeout",
          "description": "After x seconds of inactivity the user will be forcefully logged out\nUse 0 to disable this functionality",
          "defaultValue": "0"
        },
        {
          "name": "console.dateFormat",
          "description": "Time format in which to display the time and date.",
          "defaultValue": "yyyy-MM-dd HH:mm:ss"
        },
        {
          "name": "console.feedbackURL",
          "description": "Feedback URL to be used",
          "defaultValue": "https://ibissource.org/iaf/feedback/"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "loadBalancer.url",
          "description": "Load balancer url (this will be used to create server object in openapi schema)"
        },
        {
          "name": "message.max.memory.size",
          "description": "Maximum size of message that is to be kept in memory. Messages larger than this\nare potentially kept in a temporary file on disk.",
          "defaultValue": "5242880"
        },
        {
          "name": "migration.rewriteLegacyClassNames",
          "description": "Flag deciding to rewrite package names in legacy-format configurations, where classes are specified in `className` attribute.\nSet to 'true' to make it easier to load existing configurations without updating everything.\nDefault in version 8.0 is 'true', to rewrite classnames. In higher versions, this will be set to 'false' by default.\ntrue value will negatively impact startup performance.",
          "defaultValue": "true"
        }
      ]
    },
    {
      "name": "",
      "properties": [
        {
          "name": "rest.cors.allowOrigin"
        },
        {
          "name": "rest.cors.exposeHeaders"
        }
      ]
    },
    {
      "name": "Mail",
      "properties": [
        {
          "name": "mail.mime.charset"
        },
        {
          "name": "mail.smtp.from"
        },
        {
          "name": "mail.smtp.host"
        },
        {
          "name": "mail.smtp.starttls.enable"
        }
      ]
    },
    {
      "name": "MongoDB",
      "properties": [
        {
          "name": "mongodb.datasource.default"
        }
      ]
    },
    {
      "name": "Cmis",
      "properties": [
        {
          "name": "cmis.datetime.formatstring"
        },
        {
          "name": "cmis.mtomfilter.active"
        },
        {
          "name": "cmis.mtomproxy.active"
        },
        {
          "name": "cmis.mtomproxy.servlet"
        },
        {
          "name": "cmis.securityHandler.type"
        },
        {
          "name": "cmissender.processproperties.legacydateformat",
          "description": "",
          "flags": ["Deprecated"]
        },
        {
          "name": "cmisbridge.active",
          "defaultValue": "true"
        },
        {
          "name": "cmisbridge.closeConnection"
        },
        {
          "name": "cmisbridge.url"
        },
        {
          "name": "cmisbridge.adapterDispatcher"
        }
      ]
    },
    {
      "name": "Ldap",
      "properties": [
        {
          "name": "ldap.auth.url",
          "description": "",
          "flags": ["Deprecated"]
        },
        {
          "name": "[Deprecated]"
        },
        {
          "name": "ldap.props.file"
        }
      ]
    },
    {
      "name": "XmlValidator",
      "properties": [
        {
          "name": "xmlValidator.entityExpansionLimit"
        },
        {
          "name": "xmlValidator.maxInitialised"
        },
        {
          "name": "xmlValidator.sharedSymbolTable"
        },
        {
          "name": "xmlValidator.sharedSymbolTable.size"
        }
      ]
    },
    {
      "name": "Wsdl",
      "properties": [
        {
          "name": "wsdl.location"
        },
        {
          "name": "wsdl.soapAction"
        },
        {
          "name": "wsdl.targetNamespace"
        }
      ]
    }
  ]
}
